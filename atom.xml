<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://zhang0224gz.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhang0224gz.github.io/"/>
  <updated>2021-12-29T12:23:46.708Z</updated>
  <id>https://zhang0224gz.github.io/</id>
  
  <author>
    <name>zhang0224gz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://zhang0224gz.github.io/2021/12/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Untitled/"/>
    <id>https://zhang0224gz.github.io/2021/12/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Untitled/</id>
    <published>2021-12-29T12:23:27.423Z</published>
    <updated>2021-12-29T12:23:46.708Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>一些小知识点</title>
    <link href="https://zhang0224gz.github.io/2021/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zhang0224gz.github.io/2021/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-12-28T12:36:46.476Z</published>
    <updated>2021-12-29T11:43:36.170Z</updated>
    
    <content type="html"><![CDATA[<p>随机存取、顺序存取、随机存储和顺序存储的区别<br>1.存取结构:随机存取和顺序存取<br>随机存取（直接存取，Random Access）<br>指当存储器中的数据被读取或写入时，所需要的时间与该数据所在的物理地址无关<br>微观栗子：编程语言中的<strong>数组</strong><br>宏观栗子：随机存取存储器（RAM：Random Access Memory,内存条）<br>（因为RAM利用电容存储电荷的原理保存信息，所以RAM可以高速存取，且与物理地址无关。）<br>顺序存取（Sequential Access）<br>一种按记录的逻辑顺序进行读、写操作的存取方法，所需要的时间与该数据所在的物理地址有关。<br>顺序存取表现为:在存取第N个数据时，必须先访问前（N-1）个数据。<br>微观栗子：数据结构中的<strong>链表</strong><br>宏观栗子：录音磁带、光盘、机械硬盘里面的磁盘<br>（磁带、光盘、磁盘上的数据分别存储在不同扇区、不同磁道上，磁盘的读写磁头通过切换不同扇区和磁道来读取物理地址不连续的数据时，该过程中要经过不同扇区和不同磁道上的无关数据，磁盘的读写磁头在切换不同扇区和磁道所需时间也不同，故为顺序存取。）<br>2.存储结构:顺序存储、随机存储<br>按ctrl+D键将本页面保存为书签，下次可直接打开网页；按F11(或Fn+F11)键把网页设置成全屏，学习效率更高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随机存取、顺序存取、随机存储和顺序存储的区别&lt;br&gt;1.存取结构:随机存取和顺序存取&lt;br&gt;随机存取（直接存取，Random Access）&lt;br&gt;指当存储器中的数据被读取或写入时，所需要的时间与该数据所在的物理地址无关&lt;br&gt;微观栗子：编程语言中的&lt;strong&gt;数组&lt;/</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="笔记" scheme="https://zhang0224gz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zhang0224gz.github.io/2021/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E8%AF%95/"/>
    <id>https://zhang0224gz.github.io/2021/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%80%83%E8%AF%95/</id>
    <published>2021-12-28T07:47:11.987Z</published>
    <updated>2021-12-29T09:56:06.510Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th></th><th>直接插入排序</th><th>希尔排序</th><th>起泡排序</th><th>快速排序</th><th>简单选择排序</th><th>堆排序</th><th>归并排序</th></tr></thead><tbody><tr><td>最好情况</td><td>正序 O(n)</td><td>O(n**1.3)</td><td>正序 O(n)</td><td>都是中值O(nlog2n)</td><td>O(n2)</td><td>O(nlog2n)</td><td>O(nlog2n)</td></tr><tr><td>最坏情况</td><td>逆序 O(n**2)</td><td></td><td>逆序 O(n**2)</td><td>正序逆序O(n**2)</td><td>O(n2)</td><td>O(nlog2n)</td><td>O(nlog2n)</td></tr><tr><td>平均情况</td><td>O(n**2)</td><td></td><td>O(n**2)</td><td>O(nlog2n)</td><td>O(n2)</td><td>O(nlog2n)</td><td>O(nlog2n)</td></tr><tr><td>稳定性</td><td>稳定</td><td>不稳定</td><td>稳定</td><td>不稳定</td><td>不稳定</td><td>不稳定</td><td>稳定</td></tr><tr><td>时间性能</td><td>O(n**2)</td><td>取决于增量序列O(n**2) ~ O(nlogn)</td><td>O(n**2)</td><td>O(nlog2n)</td><td>O(n**2)</td><td>O(nlog2n)</td><td>O(nlog2n)</td></tr><tr><td>空间性能</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(log2n)~O(n)</td><td>O(1)</td><td>O(1)</td><td>O(n)</td></tr></tbody></table><p>稳定性：直接插入排序，起泡排序，归并排序</p><p>不稳定：希尔排序，快速排序，简单选择排序，堆排序</p><p>直接插入排序、简单选择排序和起泡排序 O(n2)</p><p>堆排序、快速排序和归并排序 O(nlogn)</p><p>希尔排序的时间性能取决于增量序列，介于O(n2)和O(nlog2n)之间</p><p>缓冲区应该是一个（队列 ）结构。</p><p>最快的速度挑选出前10个最大的，采用（  堆排序）方法最好。</p><p>（插入排序）可能会出现下面情况：在最后一趟开始之前，所有元素都不在最终位置上</p><p>（1）时间性能：排序算法在各种情况（最好、最坏、平均）下的时间复杂度。<br>          例如，基于比较的内排序在排序过程中的基本操作：<br>          ① 比较：关键码之间的比较；<br>          ② 移动：记录从一个位置移动到另一个位置。 </p><p>（2）空间性能：排序过程中占用的辅助存储空间。<br>          辅助存储空间是除了存放待排序记录占用的存储空间之外，执行算法所需要的其他存储空间。</p><p>直接插入排序：（正序）循环第k个元素开始，向前进行比较，大于就交换，小于就结束，进行下一趟</p><p>-&gt;排序过程：前面k-1个有序，后面无序</p><p>希尔排序：步数为n，序列中索引值为(i += n)的作为一个子序列进行排序，再全部进行直接插入排序</p><p>起泡排序：两两比较，如果反序则交换</p><p>-&gt;排序过程：后面k+1个有序，前面无序</p><p>快速排序：将第一个作为中间值mid，从后向前找比mid小的，找到就交换位置，i++；从前向后开始找比mid大的，找到就交换位置,j–；重复，直到i&gt;=j,一趟结束。i==j的位置作为下一趟的mid值。</p><p>简单选择排序：将前n-1个值和和该值后面的进行比较，找到最小的和该值交换</p><p>-&gt;排序过程：前面k-1个有序，后面无序</p><p>堆排序：（大根堆）原顺序作为层序形成完全二叉树，从大到小的根节点和孩子比较，小就交换，然后向下继续比较小就交换直到底。形成大根堆，将第一个0和最后一个n-1交换，剩下n-1个进行堆调整。</p><p>归并排序：将序列划分为2*<em>n个子序列进行单独排序，两两合并为2</em>n-1个子序列进行单独排序,一直到合并为一个排序</p><p>基数排序：栗子三位数排序(有明显界限的个位，十位，百位)</p><p>创建10个链表0<del>9,先后按个位按0</del>9连进属于的表头（尾插），结束将其串成整表，再按照十位做相同的行为</p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;直接插入排序&lt;/th&gt;
&lt;th&gt;希尔排序&lt;/th&gt;
&lt;th&gt;起泡排序&lt;/th&gt;
&lt;th&gt;快速排序&lt;/th&gt;
&lt;th&gt;简单选择排序&lt;/th&gt;
&lt;th&gt;堆排序&lt;/th&gt;
&lt;th&gt;归并排序&lt;/th&gt;
&lt;/tr&gt;
&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第二，三，四章 线性表</title>
    <link href="https://zhang0224gz.github.io/2021/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://zhang0224gz.github.io/2021/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/</id>
    <published>2021-12-28T07:14:34.053Z</published>
    <updated>2021-12-29T12:52:45.783Z</updated>
    
    <content type="html"><![CDATA[<p>字符串：线性表特例</p><p>多维数组：线性表推广（严格不是）</p><p>线性表（表）：具有相同类型的数据元素的有限序列</p><p>-&gt; 将元素类型限制为字符：字符串（串）：零个或多个字符组成的有限序列</p><p>串长：串中所包含的字符个数</p><p>空串：长度为 0 的串</p><p>子串：串中任意个连续的字符组成的子序列(包含空串)<br>主串：包含子串的串<br>子串的位置：子串的第一个字符在主串中的序号</p><p>串的存储结构</p><p>字符串通常采用顺序存储，即用数组存储</p><h4 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h4><h5 id="gt-BF算法"><a href="#gt-BF算法" class="headerlink" title="-&gt; BF算法"></a>-&gt; BF算法</h5><p>模式匹配：在主串 S 中寻找子串 T 的过程，T 也称为模式</p><p>如果匹配成功，返回 T 在 S 中的位置；否则返回 0</p><p>模式匹配问题有什么特点？</p><p>（1） 算法的一次执行时间：问题规模通常很大，常常在大量信息中进行匹配</p><p>（2） 算法改进所取得的积累效益：模式匹配操作经常被调用，执行频率高</p><h5 id="gt-KMP算法"><a href="#gt-KMP算法" class="headerlink" title="-&gt; KMP算法"></a>-&gt; KMP算法</h5><p>数组的存储结构</p><p>如何存储（多维）数组呢？</p><p>数组没有插入和删除操作，所以，不用预留空间，适合采用顺序存储</p><p>按行优先：先存储行号较小的元素，行号相同者先存储列号较小的元素</p><p>按列优先：先存储列号较小的元素，列号相同者先存储行号较小的元素 </p><h3 id="特殊矩阵的压缩存储"><a href="#特殊矩阵的压缩存储" class="headerlink" title="特殊矩阵的压缩存储"></a>特殊矩阵的压缩存储</h3><p>什么是特殊矩阵？</p><p> 特殊矩阵：矩阵中很多值相同的元素并且它们的分布有一定的规律</p><p>特殊矩阵如何压缩存储？</p><p>为值相同的元素分配一个存储空间</p><p>特殊矩阵压缩存储后有什么要求吗？</p><p>保证<strong>随机存取</strong>，即在O(1)时间内寻址</p><h5 id="gt-对称矩阵的压缩存储"><a href="#gt-对称矩阵的压缩存储" class="headerlink" title="-&gt; 对称矩阵的压缩存储"></a>-&gt; 对称矩阵的压缩存储</h5><p>如何压缩存储对称矩阵呢？    只存储下三角部分的元素</p><p>aij 在一维数组中的下标    k = i×(i-1)/2+ j-1</p><p> 对称矩阵压缩存储后的寻址方法</p><p>对于下三角中的元素aij（i ≥ j）：k＝i×(i-1)/2＋j -1</p><p>对于上三角中的元素aij（i＜j），因为aij＝aji，则 k＝j×(j-1)/2＋i -1</p><h5 id="gt-三角矩阵的压缩存储"><a href="#gt-三角矩阵的压缩存储" class="headerlink" title="-&gt; 三角矩阵的压缩存储"></a>-&gt; 三角矩阵的压缩存储</h5><p>如何压缩存储三角矩阵呢？</p><p>下（上）三角部分的元素；相同的常数只存储一个</p><p> 下三角矩阵压缩存储后的寻址方法</p><p>对于下三角中的元素aij（i ≥ j）：k＝i×(i -1)/2 + j-1</p><p>对于上三角中的元素aij（i＜j）：k＝n×(n + 1)/2</p><h5 id="gt-对角矩阵的压缩存储"><a href="#gt-对角矩阵的压缩存储" class="headerlink" title="-&gt; 对角矩阵的压缩存储"></a>-&gt; 对角矩阵的压缩存储</h5><p>对角矩阵：所有非零元素都集中在以<strong>主对角线为中心</strong>的带状区域中，所有其他元素都为零 </p><h3 id="稀疏矩阵的压缩存储"><a href="#稀疏矩阵的压缩存储" class="headerlink" title="稀疏矩阵的压缩存储"></a>稀疏矩阵的压缩存储</h3><p>什么是稀疏矩阵？</p><p> 稀疏矩阵：矩阵中有很多零元素，并且分布没有规律</p><p>稀疏矩阵如何压缩存储？</p><p>只存储非零元素，零元素不分配存储空间</p><p>如何只存储非零元素？</p><p> 三元组：（行号，列号，非零元素值）</p><h5 id="gt-三元组顺序表"><a href="#gt-三元组顺序表" class="headerlink" title="-&gt; 三元组顺序表"></a>-&gt; 三元组顺序表</h5><p> 三元组表：将稀疏矩阵的非零元素对应的三元组所构成的集合，按行优先的顺序排列成一个线性表</p><h5 id="gt-十字链表"><a href="#gt-十字链表" class="headerlink" title="-&gt; 十字链表"></a>-&gt; 十字链表</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;字符串：线性表特例&lt;/p&gt;
&lt;p&gt;多维数组：线性表推广（严格不是）&lt;/p&gt;
&lt;p&gt;线性表（表）：具有相同类型的数据元素的有限序列&lt;/p&gt;
&lt;p&gt;-&amp;gt; 将元素类型限制为字符：字符串（串）：零个或多个字符组成的有限序列&lt;/p&gt;
&lt;p&gt;串长：串中所包含的字符个数&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="笔记" scheme="https://zhang0224gz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第五章 树和二叉树</title>
    <link href="https://zhang0224gz.github.io/2021/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://zhang0224gz.github.io/2021/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-12-28T05:23:23.691Z</published>
    <updated>2021-12-29T11:15:30.927Z</updated>
    
    <content type="html"><![CDATA[<p>树的前序遍历等价于二叉树的前序遍历！<br>树的后序遍历等价于二叉树的中序遍历！</p><p>先访问该结点打标记，再孩子入队列-&gt;图结构时，不会造成重复入队<br>先访问左右孩子入队列，再打标记 -&gt;图结构时会造成重复入队</p><h4 id="逻辑关系"><a href="#逻辑关系" class="headerlink" title="逻辑关系"></a>逻辑关系</h4><p>线性结构中，数据元素之间具有线性关系，逻辑关系表现为<strong>前驱-后继</strong>；</p><p>树结构中，结点之间具有层次关系，逻辑关系表现为<strong>双亲-孩子</strong></p><p>图结构中，任意两个顶点之间都可能有关系，逻辑关系表现为<strong>邻接</strong> </p><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><p>树：n个结点(数据元素)的有限集合 ，当 n＝0 时，称为空树；任意一棵非空树 T 满足以下条件：<br>（1）有且仅有一个特定的称为根的结点；<br>（2）当 n＞1 时，除根结点之外的其余结点被分成 m（m &gt; 0）个互不相交的有限集合 T1,T2,… , Tm，其中每个集合又是一棵树，并称为这个根结点的子树。</p><p>​                            *树的定义是采用递归方法</p><p>互不相交的具体含义是什么？<br>结点：结点不能属于多个子树<br>边：子树之间不能有关系<br>                    *互不相交-&gt;没有回路-&gt;树结构具有层次性</p><h5 id="结点的度：结点所拥有的子树的个数"><a href="#结点的度：结点所拥有的子树的个数" class="headerlink" title="结点的度：结点所拥有的子树的个数"></a>结点的度：结点所拥有的<strong>子树的个数</strong></h5><p>树的度：树中各结点度的最大值<br>叶子结点：度为 0 的结点，也称为终端结点<br>分支结点：度不为 0 的结点，也称为非终端结点</p><p>*<strong>在树结构中，逻辑关系表现为双亲——孩子</strong></p><p>路径：结点序列 n1, n2, …, nk 称为一条由 n1 至 nk 的路径，当且仅当满足如下关系：结点 ni 是 ni+1 的双亲（1&lt;=i&lt;k）</p><h5 id="路径长度：路径上经过的边的个数"><a href="#路径长度：路径上经过的边的个数" class="headerlink" title="路径长度：路径上经过的边的个数"></a>路径长度：路径上经过的边的个数</h5><p>在树结构中，路径是<strong>唯一的</strong><br>祖先、子孙：如果有一条路径从结点 x 到结点 y，则 x 称为 y 的祖先，而 y 称为 x 的子孙</p><p>结点所在层数：根结点的层数为 1；对其余结点，若某结点在第 k 层，则其孩子结点在第 k+1 层</p><h5 id="树的深度（高度）：树中所有结点的最大层数"><a href="#树的深度（高度）：树中所有结点的最大层数" class="headerlink" title="树的深度（高度）：树中所有结点的最大层数"></a>树的深度（高度）：树中所有结点的最大层数</h5><h5 id="树的宽度：树中每一层结点个数的最大值"><a href="#树的宽度：树中每一层结点个数的最大值" class="headerlink" title="树的宽度：树中每一层结点个数的最大值"></a>树的宽度：树中每一层结点个数的最大值</h5><h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><h5 id="gt-前序，中序，后序和层序"><a href="#gt-前序，中序，后序和层序" class="headerlink" title="-&gt;前序，中序，后序和层序"></a>-&gt;前序，中序，后序和层序</h5><p>树的遍历：从<strong>根</strong>结点出发，按照某种<strong>次序</strong>访问树中所有结点，并且每个结点仅被<strong>访问</strong>一次 </p><h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><h5 id="gt-双亲，孩子，孩子兄弟表示法"><a href="#gt-双亲，孩子，孩子兄弟表示法" class="headerlink" title="-&gt;双亲，孩子，孩子兄弟表示法"></a>-&gt;双亲，孩子，孩子兄弟表示法</h5><p>实现树的存储结构，关键是什么?    如何表示树中结点之间的逻辑关系</p><p>什么是存储结构?    数据元素及其逻辑关系在存储器中的表示</p><p>树中结点之间的逻辑关系是什么?<br>    思考问题的出发点：如何表示结点的双亲和孩子</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h5 id="gt-斜树，满二叉树，完全二叉树"><a href="#gt-斜树，满二叉树，完全二叉树" class="headerlink" title="-&gt;斜树，满二叉树，完全二叉树"></a>-&gt;斜树，满二叉树，完全二叉树</h5><p>二叉树： n（n≥0）个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。</p><p>二叉树是度为 2 的树吗？</p><p>二叉树是度小于等于 2 的树吗？</p><p>二叉树有什么特点？<br>（1）每个结点最多有两棵子树<br>（2）二叉树是有序的，其次序不能任意颠倒 </p><p>左斜树：所有结点都只有左子树的二叉树<br>右斜树：所有结点都只有右子树的二叉树<br>斜树：左斜树和右斜树的统称</p><p>斜树有什么特点呢？<br>（1）每一层只有一个结点<br>（2）结点个数与其深度相同</p><p><em>斜树是树结构的特例，是从树结构*<em>退化成了线性结构</em></em></p><p>满二叉树：所有分支结点都存在左子树和右子树，并且所有<strong>叶子都在同一层</strong>上的二叉树</p><p>满二叉树有什么特点呢？<br>（1）叶子只能出现在最下一层<br>（2）只有度为 0 和度为 2 的结点<br>（3）在同样深度的二叉树中结点个数最多<br>（4）在同样深度的二叉树中叶子结点个数最多</p><p>满二叉树是树结构的特例，是<strong>最丰满</strong>的二叉树</p><p>完全二叉树：在满二叉树中，从最后一个结点开始，<strong>连续去掉任意</strong>个结点得到的二叉树</p><p>完全二叉树有什么特点呢？</p><p>（1）叶子结点只能出现在<strong>最下两层</strong>且最下层的叶子结点都集中在二叉树的<strong>左面</strong><br>（2）完全二叉树中如果有度为 1 的结点，只可能有一个，且该结点只有<strong>左孩子</strong><br>（3）深度为 k 的完全二叉树在 k-1 层上一定是满二叉树<br>（4）在同样结点个数的二叉树中，完全二叉树的<strong>深度最小</strong></p><h3 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h3><h5 id="gt-n0＝n2＋1"><a href="#gt-n0＝n2＋1" class="headerlink" title="-&gt; n0＝n2＋1"></a>-&gt; <strong>n0＝n2＋1</strong></h5><p>性质 5-1：在一棵二叉树中，如果叶子结点数为 n0，度为 2 的结点数为 n2，则有: <strong>n0＝n2＋1</strong></p><p>n＝n0＋n1＋n2 ;n＝n1＋2n2＋1;n0＝n2＋1 </p><h5 id="gt-第i层：2-i-1-个结点"><a href="#gt-第i层：2-i-1-个结点" class="headerlink" title="-&gt; 第i层：2**(i-1)个结点"></a>-&gt; 第i层：2**(i-1)个结点</h5><p>性质 5-2：二叉树的第 i 层上最多有2i-1个结点（i≥1）</p><h5 id="gt-最多有2-k-1-个结点"><a href="#gt-最多有2-k-1-个结点" class="headerlink" title="-&gt;最多有2**(k-1)个结点"></a>-&gt;最多有2**(k-1)个结点</h5><p>性质 5-3：一棵深度为 k 的二叉树中，最多有 2k-1个结点<br>    深度为 k 且具有 2k-1个结点的二叉树一定是满二叉树</p><h5 id="gt-深度：log-n下取整-1"><a href="#gt-深度：log-n下取整-1" class="headerlink" title="-&gt;深度：log n下取整+1"></a>-&gt;深度：log n下取整+1</h5><p>性质 5-4：具有 n 个结点的<strong>完全二叉树</strong>的深度为[ logn]  +1/log(n+1)上取整</p><h5 id="gt-双亲i-2，左孩子2i，右孩子2i-1"><a href="#gt-双亲i-2，左孩子2i，右孩子2i-1" class="headerlink" title="-&gt;双亲i/2，左孩子2i，右孩子2i+1"></a>-&gt;双亲i/2，左孩子2i，右孩子2i+1</h5><p>性质 5-5：对一棵具有 n 个结点的<strong>完全二叉树</strong>中从 1 开始按层序编号，对于任意的序号为 i（1≤i≤n）的结点（简称结点 i），有：<br>（1）如果 i＞1，则结点 i 的<strong>双亲</strong>结点的序号为 <strong>i/2</strong>，否则结点 i 无双亲结点<br>（2）如果 2i≤n，则结点 i 的<strong>左孩子</strong>的序号为 <strong>2i</strong>，否则结点 i 无左孩子<br>（3）如果 2i+1≤n，则结点 i 的<strong>右孩子</strong>的序号为<strong>2i+1</strong>，否则结点 i 无右孩子</p><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><h5 id="gt-前序，中序，后序和层序O-n"><a href="#gt-前序，中序，后序和层序O-n" class="headerlink" title="-&gt;前序，中序，后序和层序O(n)"></a>-&gt;前序，中序，后序和层序O(n)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BiTree</span>( )&#123;root = <span class="built_in">Creat</span>(root);&#125;</span><br><span class="line">    ~<span class="built_in">BiTree</span>( )&#123;<span class="built_in">Release</span>(root);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">( )</span></span>&#123;<span class="built_in">PreOrder</span>(root);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">( )</span></span>&#123;<span class="built_in">InOrder</span>(root);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">( )</span></span>&#123;<span class="built_in">PostOrder</span>(root);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LeverOrder</span><span class="params">( )</span></span>;                   </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">BiNode&lt;DataType&gt; *<span class="title">Creat</span><span class="params">(BiNode&lt;DataType&gt; *bt)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Release</span><span class="params">(BiNode&lt;DataType&gt; *bt)</span></span>;         </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiNode&lt;DataType&gt; *bt)</span></span>;      </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BiNode&lt;DataType&gt; *bt)</span></span>;         </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BiNode&lt;DataType&gt; *bt)</span></span>;     </span><br><span class="line">    BiNode&lt;DataType&gt; *root;                           </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">void</span> BiTree&lt;DataType&gt; :: <span class="built_in">PreOrder</span>(BiNode&lt;DataType&gt; *bt) </span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) <span class="keyword">return</span>;                         <span class="comment">//递归调用的结束条件</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; bt-&gt;data;                            <span class="comment">//访问根结点bt的数据域</span></span><br><span class="line">            <span class="built_in">PreOrder</span>(bt-&gt;lchild);                     <span class="comment">//前序递归遍历bt的左子树</span></span><br><span class="line">            <span class="built_in">PreOrder</span>(bt-&gt;rchild);                     <span class="comment">//前序递归遍历bt的右子树  </span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">void</span> BiTree&lt;DataType&gt; :: <span class="built_in">LeverOrder</span>( )</span><br><span class="line">&#123;</span><br><span class="line">      BiNode&lt;DataType&gt; *Q[<span class="number">100</span>], *q = <span class="literal">nullptr</span>;  </span><br><span class="line">      <span class="keyword">int</span> front = <span class="number">-1</span>, rear = <span class="number">-1</span>;               </span><br><span class="line">      <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>; </span><br><span class="line">      Q[++rear] = root;                        </span><br><span class="line">      <span class="keyword">while</span> (front != rear)</span><br><span class="line">      &#123;</span><br><span class="line">           q = Q[++front];      cout &lt;&lt; q-&gt;data;   </span><br><span class="line">           <span class="keyword">if</span> (q-&gt;lchild != <span class="literal">nullptr</span>)  Q[++rear] = q-&gt;lchild;</span><br><span class="line">           <span class="keyword">if</span> (q-&gt;rchild != <span class="literal">nullptr</span>)  Q[++rear] = q-&gt;rchild;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><h5 id="gt-顺序存储结构"><a href="#gt-顺序存储结构" class="headerlink" title="-&gt;顺序存储结构"></a>-&gt;顺序存储结构</h5><p>顺序存储结构的要求是什么？<br>用一组连续的存储单元依次存储数据元素，由存储位置表示元素之间的逻辑关系</p><p>二叉树的顺序存储结构是用一维数组存储二叉树的结点，结点的<strong>存储位置（下标）</strong>应能体现结点之间的<strong>逻辑关系——父子关系</strong> </p><p>缺点：浪费存储空间<br>二叉树的顺序存储结构一般仅存储完全二叉树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(<span class="keyword">char</span> a[],<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=n)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    PreOrder(a,<span class="number">2</span>*i,n);</span><br><span class="line">    PreOrder(a,<span class="number">2</span>*i+<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="gt-二叉链表"><a href="#gt-二叉链表" class="headerlink" title="-&gt;二叉链表"></a>-&gt;二叉链表</h5><p>二叉链表：二叉树的每个结点对应一个链表结点，链表结点存放结点的数据信息和指示左右孩子的指针</p><p>叶子结点的标志？ 左右孩子指针均为空</p><p>n 个结点的二叉链表有多少个空指针？ 2n-(n-1) = <strong>n+1</strong> 个空指针</p><p>如何由一种遍历序列生成该二叉树？<br>    <strong>扩展二叉树</strong>：将二叉树中每个结点的空指针引出一个虚结点，其值为一特定值如 ‘#’</p><h6 id="gt-扩展二叉树"><a href="#gt-扩展二叉树" class="headerlink" title="-&gt;扩展二叉树"></a>-&gt;扩展二叉树</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line">BiNode&lt;DataType&gt; *BiTree&lt;DataType&gt; :: Creat(BiNode&lt;DataType&gt; *bt)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">char</span> ch;</span><br><span class="line">     <span class="built_in">cin</span> &gt;&gt; ch;                                                <span class="comment">//输入结点的数据信息，假设为字符</span></span><br><span class="line">     <span class="keyword">if</span> (ch == ‘#’) bt = <span class="literal">nullptr</span>;                       <span class="comment">//建立一棵空树</span></span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">          bt = <span class="keyword">new</span> BiNode&lt;DataType&gt;;  bt-&gt;data = ch;        </span><br><span class="line">          bt-&gt;lchild = Creat(bt-&gt;lchild);          <span class="comment">//递归建立左子树</span></span><br><span class="line">          bt-&gt;rchild = Creat(bt-&gt;rchild);          <span class="comment">//递归建立右子树</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> bt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">扩展二叉树的前序遍历序列：A B # D # # C # #</span><br></pre></td></tr></table></figure><img src="C:\Users\zhangguozhi\Desktop\图片\QQ截图20211228143839.png" alt="QQ截图20211228143839" style="zoom: 80%;" /><h3 id="森林"><a href="#森林" class="headerlink" title="森林"></a>森林</h3><p>森林：m（m≥0）棵互不相交的树的集合</p><p>森林的遍历：按照某种<strong>次序</strong>(前序（根）、后序（根）)依次遍历构成森林的 m（m≥0）棵树</p><h3 id="最优二叉树"><a href="#最优二叉树" class="headerlink" title="最优二叉树"></a>最优二叉树</h3><p>叶子结点的权值：对叶子结点赋予的一个有意义的数值量</p><p>二叉树的带权路径长度：从根结点到各个叶子结点的路径长度与相应叶子结点权值的乘积之和</p><p>最优二叉树（哈夫曼树）：给定一组具有确定权值的叶子结点，带权路径长度最小的二叉树</p><p>最优二叉树有什么特点?<br>（1）权值越大的叶子结点越靠近根结点<br>（2）只有度为 0 和度为 2 的结点，<strong>不存在度为 1</strong> 的结点</p><h5 id="gt-哈夫曼算法"><a href="#gt-哈夫曼算法" class="headerlink" title="-&gt;哈夫曼算法"></a>-&gt;哈夫曼算法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选取权值最小的两棵二叉树进行合并，重新排序，再选权值最小的两棵二叉树进行合并</span><br></pre></td></tr></table></figure><img src="C:\Users\zhangguozhi\Desktop\图片\QQ截图20211228150040.png" alt="QQ截图20211228150040" style="zoom: 67%;" /><h5 id="gt-哈夫曼编码"><a href="#gt-哈夫曼编码" class="headerlink" title="-&gt;哈夫曼编码"></a>-&gt;哈夫曼编码</h5><p>编码：给每一个对象标记一个二进制位串来表示一组对象</p><p>等长编码：用长度相等的二进制位串表示一组对象</p><p>编码的目的是什么?  数字化（编码效率取决于编码长度）</p><p>不等长编码：表示一组对象的二进制位串的长度不相等</p><p>设计不等长编码时，必须考虑解码的唯一性</p><p>前缀编码：在一组编码中，任一编码都不是其它任何编码的前缀</p><p>​            *<strong>前缀（无歧义）编码保证了在解码时不会有多种可能</strong></p><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><p><img src="https://img-blog.csdn.net/20151205194329640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>线索：指向前驱和和后继结点的指针</p><p>线索二叉树：加入线索的二叉树</p><p>缺点：指针和线索无法区分-&gt;加标记 0孩子,1前驱后继</p><p>以一定规则将二叉树中的结点排列成一个线性序列，使每个结点(除第一个和最后一个外)在这些线性序列中有且仅有一个直接前驱和直接后继</p><p>优点：如果右链中中序后继，左链中中序前趋，则中序<strong>遍历的效率高</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;树的前序遍历等价于二叉树的前序遍历！&lt;br&gt;树的后序遍历等价于二叉树的中序遍历！&lt;/p&gt;
&lt;p&gt;先访问该结点打标记，再孩子入队列-&amp;gt;图结构时，不会造成重复入队&lt;br&gt;先访问左右孩子入队列，再打标记 -&amp;gt;图结构时会造成重复入队&lt;/p&gt;
&lt;h4 id=&quot;逻辑关系&quot;&gt;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="笔记" scheme="https://zhang0224gz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第六章 图</title>
    <link href="https://zhang0224gz.github.io/2021/12/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    <id>https://zhang0224gz.github.io/2021/12/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/</id>
    <published>2021-12-27T10:11:07.173Z</published>
    <updated>2021-12-28T13:59:03.030Z</updated>
    
    <content type="html"><![CDATA[<p>单链表的逆置，寻找叶子结点，树的遍历，折半查找，哈夫曼树</p><h4 id="逻辑关系"><a href="#逻辑关系" class="headerlink" title="逻辑关系"></a>逻辑关系</h4><p>线性结构中，数据元素之间具有线性关系，逻辑关系表现为前驱-后继；</p><p>树结构中，结点之间具有层次关系，逻辑关系表现为双亲-孩子</p><p>图结构中，任意两个顶点之间都可能有关系，逻辑关系表现为邻接 </p><h4 id="连通图（无向图）"><a href="#连通图（无向图）" class="headerlink" title="连通图（无向图）"></a>连通图（无向图）</h4><p>连通顶点：在无向图中，如果顶点vi和顶点vj(i≠j)之间有路径，则称顶点vi和vj是连通的</p><p>连通图：在无向图中，如果任意两个顶点都是连通的，则称该无向图是连通图</p><p>连通分量：非连通图的极大连通子图：含有极大顶点数，依附于这些顶点的所有边</p><h4 id="强连通图、强连通分量（有向图）"><a href="#强连通图、强连通分量（有向图）" class="headerlink" title="强连通图、强连通分量（有向图）"></a>强连通图、强连通分量（有向图）</h4><p>强连通顶点：在有向图中，如果从顶点vi到顶点vj和从顶点vj到顶点vi均有路径，则称顶点vi和vj是强连通的</p><p>强连通图：在有向图中，如果任意两个顶点都是强连通的，则称该有向图是强连通图</p><p>强连通分量：非强连通图的极大连通子图</p><h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><p>图的遍历：从图中某一顶点出发访问图中所有顶，并且每个结点仅被访问一次 </p><p>在图中，如何选取遍历的起始顶点？<br>解决方案：将图中的顶点按任意顺序排列起来， 从编号最小的顶点开始</p><p>从某顶点出发能访问其他所有顶点吗？<br>解决方案：多次调用图遍历算法</p><p>如何避免遍历不会因回路而陷入死循环？<br>解决方案：附设访问标志数组visited[n]</p><p>采用什么次序依次访问图中所有顶点？</p><h5 id="gt-深度优先遍历和广度优先遍历"><a href="#gt-深度优先遍历和广度优先遍历" class="headerlink" title="-&gt; 深度优先遍历和广度优先遍历"></a>-&gt; 深度优先遍历和广度优先遍历</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">深度优先遍历DFTraverse（类似树的前序遍历）</span><br><span class="line">广度优先遍历BFTraverse（类似树的层序遍历）</span><br><span class="line">    </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">void</span> MGraph&lt;DataType&gt; :: DFTraverse(<span class="keyword">int</span> v)  </span><br><span class="line">&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; vertex[v]; visited[v] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++)</span><br><span class="line">           <span class="keyword">if</span> (edge[v][j] == <span class="number">1</span> &amp;&amp; visited[j] == <span class="number">0</span>) </span><br><span class="line">                DFTraverse( j );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">void</span> MGraph&lt;DataType&gt; :: BFTraverse(<span class="keyword">int</span> v) </span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">int</span> w, j, Q[MaxSize];  <span class="comment">//采用顺序队列</span></span><br><span class="line">      <span class="keyword">int</span> front = <span class="number">-1</span>, rear = <span class="number">-1</span>;  <span class="comment">//初始化队列</span></span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; vertex[v]; visited[v] = <span class="number">1</span>; Q[++rear] = v;  <span class="comment">//被访问顶点入队</span></span><br><span class="line">      <span class="keyword">while</span> (front != rear)  <span class="comment">//当队列非空时</span></span><br><span class="line">      &#123;</span><br><span class="line">            w = Q[++front];  <span class="comment">//将队头元素出队并送到v中</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vertexNum; j++)</span><br><span class="line">                 <span class="keyword">if</span> (edge[w][j] == <span class="number">1</span> &amp;&amp; visited[j] == <span class="number">0</span> ) &#123;</span><br><span class="line">                       <span class="built_in">cout</span> &lt;&lt; vertex[j]; visited[j] = <span class="number">1</span>; Q[++rear] = j;</span><br><span class="line">                 &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">void</span> ALGraph&lt;DataType&gt; :: DFTraverse(<span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">int</span> j;  EdgeNode *p = <span class="literal">nullptr</span>;</span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; adjlist[v].vertex; visited[v] = <span class="number">1</span>;</span><br><span class="line">     p = adjlist[v].firstEdge;     </span><br><span class="line">     <span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">     &#123;</span><br><span class="line">          j = p-&gt;adjvex;</span><br><span class="line">          <span class="keyword">if</span> (visited[j] == <span class="number">0</span>) DFTraverse(j);</span><br><span class="line">          p = p-&gt;next;           </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="keyword">void</span> ALGraph&lt;DataType&gt; :: BFTraverse(<span class="keyword">int</span> v) </span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">int</span> w, j, Q[MaxSize]; <span class="keyword">int</span> front = <span class="number">-1</span>, rear = <span class="number">-1</span>;        </span><br><span class="line">     EdgeNode *p = <span class="literal">nullptr</span>;</span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; adjlist[v].vertex; visited[v] = <span class="number">1</span>; Q[++rear] = v;  </span><br><span class="line">     <span class="keyword">while</span> (front != rear)             </span><br><span class="line">     &#123;</span><br><span class="line">          w = Q[++front];</span><br><span class="line">          p = adjlist[w].firstEdge;    </span><br><span class="line">          <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) </span><br><span class="line">          &#123;</span><br><span class="line">               j = p-&gt;adjvex;</span><br><span class="line">               <span class="keyword">if</span> (visited[j] == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="built_in">cout</span> &lt;&lt; adjlist[j].vertex; visited[j] = <span class="number">1</span>; Q[++rear] = j;</span><br><span class="line">          &#125;</span><br><span class="line">          p = p-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><h5 id="gt-邻接矩阵和邻接表"><a href="#gt-邻接矩阵和邻接表" class="headerlink" title="-&gt; 邻接矩阵和邻接表"></a>-&gt; 邻接矩阵和邻接表</h5><img src="C:\Users\zhangguozhi\AppData\Roaming\Typora\typora-user-images\image-20211227213309250.png" alt="image-20211227213309250" style="zoom:50%;" /><img src="C:\Users\zhangguozhi\AppData\Roaming\Typora\typora-user-images\image-20211227213244655.png" alt="image-20211227213244655" style="zoom:50%;" /><p><img src="C:\Users\zhangguozhi\Desktop\图片\QQ截图20211227213516.png" alt="QQ截图20211227213516"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;                       </span><br><span class="line">    EdgeNode *next;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType vertex;</span><br><span class="line">    EdgeNode *firstEdge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>边表中的结点表示什么？对应图中的一条边</p><p><strong>设图有n个顶点e条边，邻接表的空间复杂度是多少？O(n+e)</strong></p><p>如何求顶点 v 的度？顶点 v 的边表中结点的个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = adjlist[v].firstEdge; count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    count++; p = p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何求顶点 v 的所有邻接点?顶点 i 的边表中的所有结点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = adjlist[v].firstEdge; </span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    j = p-&gt;adjvex;                      <span class="comment">//j是v的邻接点</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小生成树（无向图）"><a href="#最小生成树（无向图）" class="headerlink" title="最小生成树（无向图）"></a>最小生成树（无向图）</h3><h5 id="gt-Prim算法O-n2"><a href="#gt-Prim算法O-n2" class="headerlink" title="-&gt; Prim算法O(n2)"></a>-&gt; Prim算法O(n2)</h5><p>生成树：连通图的生成树是包含全部顶点的一个极小连通子图（含有n-1条边）</p><p>生成树的代价：在无向连通网中，生成树上各边的权值之和</p><p>最小生成树(Minimum Spanning Tree) ：在无向连通网中，代价最小的生成树</p><p>贪心算法的应用：Prim算法，Kruskal算法和Boruvka算法<br>    Prim算法：先构造满足条件的候选最短边集，再查找最短边<br>    Kruskal算法：先查找最短边，再判断是否满足条件 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Prim算法 O(n2)</span><br><span class="line">*每步添加一条边及其相连的顶点(min)到一棵树，从而逐步生成最小生成树(可能不唯一，但代价唯一)</span><br><span class="line">通过第一个顶点，将第一个顶点和其他顶点的权值进行比较，找到最小边邻接的顶点</span><br><span class="line">该邻接顶点和剩余顶点比较，比第一个顶点和其权值小就替换进数组，找到更新后的最小边的邻接顶点……</span><br><span class="line">（创建一个数组存放当前顶点和邻接顶点的边，当邻接顶点和当前顶点的边权值更小就更新。每次找出更新的最小边，并将选择出的顶点从数组中标除去）</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="gt-Kruskal算法O-elog2e"><a href="#gt-Kruskal算法O-elog2e" class="headerlink" title="-&gt; Kruskal算法O(elog2e)"></a>-&gt; Kruskal算法O(elog2e)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">？Kruskal算法 O(elog2e)</span><br><span class="line">*将所有的点放入，每次选最小的边，但不能形成回路</span><br><span class="line">图采用什么存储结构呢？ 边集数组表示法</span><br><span class="line">Kruskal算法在图中存在相同权值的边时也有效</span><br><span class="line">如何存储连通分量呢？并查集</span><br><span class="line">（并查集：集合中的元素组织成树的形式：</span><br><span class="line">（<span class="number">1</span>）查找两个元素是否属于同一集合：所在树的根结点是否相同</span><br><span class="line">（<span class="number">2</span>）合并两个集合——将一个集合的根结点作为另一个集合根结点的孩子）</span><br><span class="line">*如何判断两个顶点是否位于同一个连通分量呢？</span><br><span class="line">*如何合并两个连通分量呢？</span><br></pre></td></tr></table></figure><h3 id="最短路径（有向图）"><a href="#最短路径（有向图）" class="headerlink" title="最短路径（有向图）"></a>最短路径（有向图）</h3><h5 id="gt-Dijkstra算法O-n2"><a href="#gt-Dijkstra算法O-n2" class="headerlink" title="-&gt; Dijkstra算法O(n2)"></a>-&gt; Dijkstra算法O(n2)</h5><p>最短路径：非带权图——边数最少的路径</p><p>最短路径：带权图——边上的权值之和最少的路径</p><p>路径上第一个顶点称为源点；最后一个顶点称为终点</p><p>对于非带权图，如何求最短路径？ 广度优先遍历</p><p>对于带权图，如何求最短路径？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dijkstra算法O(n2)</span><br><span class="line">针对一个源点，求出中转（mini)；将中转和剩下点连接，比剩下点与上一个点的路径短就替换，再在整合好的表中找到最短的</span><br><span class="line">当前最短路径中最小路为最终最短路（路径长度递增）</span><br></pre></td></tr></table></figure><table><thead><tr><th>(dist,path)</th><th>v1</th><th>v2</th><th>v3</th><th>v4</th></tr></thead><tbody><tr><td>{v0}</td><td><strong>(10,’v0v1’)</strong></td><td>(**,’ ‘)</td><td>(30,’v0v3’)</td><td>(100,’v0v4’)</td></tr><tr><td>{v0v1}</td><td></td><td>(60，‘v0v1v2’)</td><td><strong>(30,’v0v3’)</strong></td><td>(100,’v0v4’)</td></tr><tr><td>{v0v1v3}</td><td></td><td><strong>(50,’v0v3v2’)</strong></td><td></td><td>(60,’v0v3v4’)</td></tr><tr><td>{v0v1v3v2}</td><td></td><td></td><td></td><td><strong>(60,’v0v3v2v4’)</strong></td></tr><tr><td>{v0v1v3v2v4}</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>疑惑性很大，如何当点&gt;2时，进行判断不同可能性（类似Prim但必须包含源点得出的路径？）</p><h5 id="gt-Floyd算法O-n3"><a href="#gt-Floyd算法O-n3" class="headerlink" title="-&gt; Floyd算法O(n3)"></a>-&gt; Floyd算法O(n3)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Floyd算法 O(n3)</span><br><span class="line">*可有权值为负，但不能有负的回路(*)</span><br><span class="line">-&gt; 使用邻接矩阵</span><br><span class="line">初始化path0（两点相连的所有可能性<span class="number">9</span>种，以a/b/c为源点），在两点间插入a(保持源点不变，以a为源点的一行可忽视,<span class="number">6</span>种；如果值比原来小就替换)形成path1,在path1中插入b……同理……</span><br><span class="line">dist保存路径权值，path保存路径中的点</span><br><span class="line">-&gt;该算法将所有的可能性都计算出来，只有最后一步有效</span><br></pre></td></tr></table></figure><h3 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h3><h5 id="gt-AOV网和拓扑排序-O-n-e"><a href="#gt-AOV网和拓扑排序-O-n-e" class="headerlink" title="-&gt; AOV网和拓扑排序  O(n+e)"></a>-&gt; AOV网和拓扑排序  O(n+e)</h5><p>什么是工程？工程有什么共性？<br>几乎所有的工程都可以分为若干个称作<strong>活动</strong>的子工程<br>某些活动之间通常存在一定的<strong>约束</strong>条件</p><p>AOV网（顶点表示活动的网）：在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系</p><p>AOV网（activity on <strong>vertex</strong> network）</p><p>AOV网中出现回路意味着什么？活动之间的优先关系是矛盾的</p><p>拓扑序列:v2必须满足v0和v1才能成立（栗子：排课系统），<strong>可能不唯一</strong></p><p>拓扑排序：对一个有向图构造拓扑序列的过程</p><img src="C:\Users\zhangguozhi\AppData\Roaming\Typora\typora-user-images\image-20211228104006774.png" alt="image-20211228104006774" style="zoom:50%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">图采用什么存储结构呢？ 邻接表</span><br><span class="line">在邻接表中，如何求顶点的入度？顶点表中增加入度域</span><br><span class="line">如何查找没有前驱的顶点？ 设置栈或队列</span><br><span class="line">成功标志：排完后，所有点都排序（<span class="literal">NULL</span>），不剩余点</span><br><span class="line">   <span class="number">1.</span>重复下述操作，直到输出全部顶点，或AOV网中不存在没有前驱的顶点</span><br><span class="line">    <span class="number">1.1</span>从AOV网中选择一个没有前驱的顶点并且输出；</span><br><span class="line">    <span class="number">1.2</span>从AOV网中删去该顶点，并且删去所有以该顶点为尾的弧； </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\zhangguozhi\Desktop\图片\QQ截图20211228124814.png" alt="QQ截图20211228124814"></p><h5 id="gt-AOE网和关键路径"><a href="#gt-AOE网和关键路径" class="headerlink" title="-&gt;AOE网和关键路径"></a>-&gt;AOE网和关键路径</h5><p>什么是工程？工程有什么共性？<br>几乎所有的工程都可以分为若干个称作活动的子工程<br>活动之间存在某些制约关系<br>每个活动通常需要一个持续的时间</p><p>源点：整个工程的开始点，其入度为0<br>终点：整个工程的结束点，其出度为0</p><p>AOE网（边表示活动的网）：在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，边上的权值表示活动的持续时间</p><p>AOE网（activity on <strong>edge</strong> network）</p><p>AOE网的性质：<br>（1）只有在<strong>进入某顶点的各活动</strong>都已经结束，该顶点所代表的事件才能发生<br>（2）只有在某顶点所代表的事件发生后，从<strong>该顶点出发的各活动</strong>才能开始</p><p>AOE网能够解决什么问题？<br>（1） 完成整个工程至少需要多少时间?<br>（2）为缩短完成工程所需的时间， 应当加快哪些活动?   </p><p>关键路径：AOE网中从源点到终点的<strong>最长</strong>路径<br>关键活动：关键路径上的活动</p><p>不按期完成关键活动就会影响整个工程的进度；换言之，要缩短整个工期，必须加快关键活动的进度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">如何求关键路径呢？ 求关键活动</span><br><span class="line">如何求关键活动呢？关键活动为什么是关键的？</span><br><span class="line">关键活动的开始时间不能推迟-&gt;关键活动的最早开始时间和最晚开始时间相等</span><br><span class="line">    </span><br><span class="line"> <span class="number">1.</span> 计算各个活动的最早开始时间和最晚开始时间</span><br><span class="line"> <span class="number">2.</span> 计算各个活动的时间余量，时间余量为 <span class="number">0</span> 即为关键活动</span><br><span class="line"></span><br><span class="line">设带权有向图 G=(V，E)含有 n 个顶点 e 条边，设置 <span class="number">4</span> 个一维数组：</span><br><span class="line">（<span class="number">1</span>）事件的最早发生时间 ve[n] -&gt; 从v0=<span class="number">0</span>开始到该顶点的相加ai和取最大（正序计算）</span><br><span class="line">（<span class="number">2</span>）事件的最迟发生时间 vl[n] -&gt; 从v3=<span class="number">10</span>开始到该点减去ai被减差取最小（倒序计算）</span><br><span class="line">（<span class="number">3</span>）活动的最早开始时间 ae[e] -&gt; 等于ve[以ai为出度的事件] </span><br><span class="line">（<span class="number">4</span>）活动的最晚开始时间 al[e] -&gt; vl[以ai为入度的事件]-ai</span><br><span class="line">-&gt; al[i]-ae[i]=<span class="number">0</span></span><br><span class="line">    取为<span class="number">0</span>的相连作为关键路径</span><br><span class="line">书P205 表格</span><br><span class="line">    </span><br><span class="line">一个关键活动的延期，会影响延误工期；一个关键活动的提前，不一定提前工期</span><br></pre></td></tr></table></figure><img src="C:\Users\zhangguozhi\AppData\Roaming\Typora\typora-user-images\image-20211228130448352.png" alt="image-20211228130448352" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;单链表的逆置，寻找叶子结点，树的遍历，折半查找，哈夫曼树&lt;/p&gt;
&lt;h4 id=&quot;逻辑关系&quot;&gt;&lt;a href=&quot;#逻辑关系&quot; class=&quot;headerlink&quot; title=&quot;逻辑关系&quot;&gt;&lt;/a&gt;逻辑关系&lt;/h4&gt;&lt;p&gt;线性结构中，数据元素之间具有线性关系，逻辑关系表现为</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="笔记" scheme="https://zhang0224gz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>新核心知识点</title>
    <link href="https://zhang0224gz.github.io/2021/12/27/%E8%8B%B1%E8%AF%AD/%E6%96%B0%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zhang0224gz.github.io/2021/12/27/%E8%8B%B1%E8%AF%AD/%E6%96%B0%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-12-27T06:29:35.146Z</published>
    <updated>2021-12-27T07:21:28.288Z</updated>
    
    <content type="html"><![CDATA[<p>1.When she realized most of China’s top causes of death could be tied to smoking, she began pushing officials to <strong><u>tackle</u> the problem</strong>.</p><ul><li>tackle/solve/resolve/address/handle/tackle/deal with</li></ul><p>2.Its population rises and falls <strong>unpredictably</strong>, destroying clumps of pinewood as it peaks which then <strong>regenerate/grow again</strong> as the bug <strong>recedes/die away</strong>. </p><ul><li><p>树皮甲虫的繁殖不可预测，或暴增，或减弱，当树皮甲虫繁殖高峰时会杀害大量松树，只有甲虫消退后松树才能再生。</p></li><li><p><strong>recede</strong>: to move back from a previous point 自原处后退</p></li></ul><p>3.… says that the current outbreak is “<strong>unprecedented</strong> in history”: a natural background-noise <strong>disturbance</strong> has become a major outbreak. </p><ul><li>adj. 前所未有的，史无前例的；（大小、数量、程度等）前所未知的，空前的</li><li>n. 干扰，扰乱；骚乱，动乱；失调，紊乱</li></ul><p>4.Other parts of North America have also been affected, but the damage in British Columbia is particularly severe and particularly troubling in a province <strong>whose economy is dominated by timber</strong>.</p><ul><li>dominated /ˈdɒmɪneɪtɪd/<br>adj. 占主导地位的；强势的；受控的<br>v. 控制，支配；处于支配地位（dominate 的过去式和过去分词 ）</li><li>n.林木</li><li>北美的其他地方也受到了影响，但是英属哥伦比亚的损失是相当严重的，尤其对<strong>一个依赖木材产业的省</strong>伤害更甚。</li></ul><p>5.It could be caused by the higher temperatures that now <strong>prevail</strong> in northern areas, … </p><ul><li>V-I If a proposal, principle, or opinion prevails, it gains influence or is accepted, often after a struggle or argument. 占上风</li><li>V-I If a situation, attitude, or custom prevails in a particular place at a particular time, it is normal or most common in that place at that time. 盛行; 普遍存在</li><li>V-I If one side in a battle, contest, or dispute prevails, it wins. 获胜</li></ul><p>6.Its aim was to “achieve <strong>stabilization</strong> of greenhouse-gas concentrations in the atmosphere at a level that would prevent dangerous <strong>anthropogenic</strong> <strong>interference with</strong> the climate system”. </p><ul><li>《联合国气候变化框架公约》的目标是“为全面控制二氧化碳等温室气体排放，阻止人类对气候系统的危险干预。”</li><li>n. 稳定；稳定化</li><li>adj. 人为的；[人类] 人类起源的</li><li>interference with  干涉；妨碍，打扰</li></ul><p>7.According to the Intergovernmental Panel on Climate Change(政府间气候变化专门委员会), the body <strong>set up to</strong> establish a scientific <strong>consensus on</strong> what is happening, heat waves, droughts, floods and serious hurricanes have increased in frequency over the past few decades.</p><ul><li>consensus n. a general agreement; the opinion of most of the people in a group （意见等的）一致,一致同意<pre><code>  build a consensus   达成一致  reach a consensus   取得一致  unspoken consensus   默契</code></pre></li><li>Extreme weather/natural disaster<br> heat wave, drought, flood, hurricane    热浪，干旱，洪水，飓风<br> earthquake, mudslide, typhoon, cyclone, blizzard/snow storm暴风雪, storm, hail冰雹，landslide, sandstorm,   tsunami, volcanic eruption<pre><code>  地震,泥石流,台风,飓风,暴风雪/暴风雪暴风雪,风暴,雹冰雹,山体滑坡,沙尘暴,海啸,火山喷发</code></pre>  snowslide,avalanche,acid rain  雪崩,雪崩,酸雨</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.When she realized most of China’s top causes of death could be tied to smoking, she began pushing officials to &lt;strong&gt;&lt;u&gt;tackle&lt;/u&gt; th</summary>
      
    
    
    
    <category term="CET" scheme="https://zhang0224gz.github.io/categories/CET/"/>
    
    
  </entry>
  
  <entry>
    <title>细小知识点</title>
    <link href="https://zhang0224gz.github.io/2021/12/22/Python/%E7%BB%86%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zhang0224gz.github.io/2021/12/22/Python/%E7%BB%86%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-12-22T03:03:46.564Z</published>
    <updated>2021-12-22T13:51:54.724Z</updated>
    
    <content type="html"><![CDATA[<p>1.复数</p><p>我们把形如z=a+bj（a,b均为实数）的数称为复数，其中a称为实部，b称为虚部，<strong>j称为虚数单位</strong>。</p><p>一个复数时一对有序浮点数 (x,y)，其中 x 是实数部分，y 是虚数部分。</p><p>Python 语言中有关复数的概念：</p><p>1、虚数不能单独存在，它们总是和一个值为 <strong>0.0</strong> 的实数部分一起构成一个复数</p><p>2、复数由实数部分和虚数部分构成</p><p>3、表示复数的语法：real+imagej</p><p>4、实数部分和虚数部分都是<strong>浮点数</strong></p><p>5、虚数部分必须有后缀<strong>j或J</strong></p><p>2.<a href="https://blog.csdn.net/weixin_40041218/article/details/80868521">and,or</a>(有0,<a href="https://vhsagj.smartapps.baidu.com/pages/lemma/lemma?lemmaTitle=%E9%80%BB%E8%BE%91%E6%95%B0%E6%8D%AE&lemmaId=635132&from=bottomBarShare&_swebfr=1&_swebFromHost=heytapbrowser">逻辑数据</a>时进行c/c++中的&amp;&amp;与运算(1,0)，or取前and取后)</p><p>10 and 20 -&gt; 20</p><p>10 or 20 -&gt; 10</p><p>10 &amp; 20 -&gt; 0 （01010&amp;10100=00000）每位进行与运算</p><p>10 | 20 -&gt;30</p><p>逻辑数据，是一种操作数类型。是用来表示二值逻辑中的 “是”与 “否” 、或称 “真”与 “假” 两个状态的数据。</p><p>3.Python浮点数占4个字节</p><p>4.pass 表示空语句</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.复数&lt;/p&gt;
&lt;p&gt;我们把形如z=a+bj（a,b均为实数）的数称为复数，其中a称为实部，b称为虚部，&lt;strong&gt;j称为虚数单位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个复数时一对有序浮点数 (x,y)，其中 x 是实数部分，y 是虚数部分。&lt;/p&gt;
&lt;p&gt;Pytho</summary>
      
    
    
    
    <category term="Python" scheme="https://zhang0224gz.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>线性结构：字符串——KMP算法</title>
    <link href="https://zhang0224gz.github.io/2021/12/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP/"/>
    <id>https://zhang0224gz.github.io/2021/12/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP/</id>
    <published>2021-12-11T07:51:52.920Z</published>
    <updated>2021-12-17T15:01:47.531Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">i</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td align="center">char[i]</td><td>a</td><td>b</td><td>a</td><td>b</td><td>a</td><td>b</td><td>c</td></tr><tr><td align="center">next</td><td>-1</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td align="center">nextval</td><td>-1</td><td>0</td><td>-1</td><td>0</td><td>-1</td><td>0</td><td>4</td></tr></tbody></table><p><strong>一、过程：</strong><br> <strong>求next值：</strong><br> 1.两个固定值：char[0]_next=-1; char[1]_next=0（一个，没有匹配的，长度为0）<br> 2.开始求：char[2]匹配出错，前面a!=b（两组字符不同），故next=0(重头开始）<br>   char[3]匹配出错，前面有aba, a(char[3]前面的a)和a（匹配必从第一个开始）相同，字符a长度为1，故next=1<br>   char[4]匹配出错，前面有abab,ab和ab相同，长度为2，故next=2<br>   char[5]匹配出错，前面有ababa，aba和aba(123和345)相同，长度为3，故next=3<br>   char[6]匹配出错，前面有ababab,abab和abab(1234和3456)相同,长度为4，故next=4<br> <strong>求nextval值：</strong><br> 1.一个固定值：char[0]_nextval=-1<br> 2.开始求：char[1]_next=0(char[0]=a), a!=b,所以nextval=char[1]_next<br>   char[2]_next=0(char[0]=a),a==a,所以nextval=char[0]_nextval<br>   同理可得……</p><p><strong>二、总结：<br> 求next的值：</strong><br> 看当前字符的前面的一组字符是否有相似的一组字符（开头开始）与之相同，取其最大长度作为next的值<br> <strong>求nextval值（修正值）：</strong><br> 当前字符的next值(索引值)所指向的字符是否和当前字符相同：相同则修正值为当前字符的next值所指向的字符的修正值；不同则去当前字符的next值</p><p><strong>三、例子再来一个：</strong></p><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td></td><td>a</td><td>b</td><td>c</td><td>a</td><td>b</td><td>c</td><td>a</td><td>b</td><td>a</td><td>a</td></tr><tr><td>next</td><td>-1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>1</td></tr><tr><td>nextval</td><td>-1</td><td>0</td><td>0</td><td>-1</td><td>0</td><td>0</td><td>-1</td><td>0</td><td>5</td><td>1</td></tr></tbody></table><p><strong>求next值：</strong>next0=-1,next1=0<br>   a!=b,next2=0; abc不可能(ab!=bc),next3=0;<br>   0==3,next4=1; 01==34,next5=2;012==345,next6=3;<br>   abca==abca(1234==3456),next7=4; 01234==34567,next8=5<br>   1==8,next9=1<br> <strong>求nextval值：</strong>nextval0=-1<br>   b!=char[next1]=a, nextval=next1=0<br>   c!=char[next2]=a, nextval=next2=0<br>   a==char[next3]=a,nextval=nextval0=-1<br>   同理可得……</p><p> 这个思路也可以：</p><p><a href="https://blog.csdn.net/qq_43919400/article/details/103736457">(7条消息) KMP算法中计算next值和nextval的值_threecat.up的博客-CSDN博客_kmp算法next修正值计算方法<img src="https://csdnimg.cn/release/blog_editor_html/release1.9.2/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=L9C2" alt=" ">https://blog.csdn.net/qq_43919400/article/details/103736457</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;i&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构笔记</title>
    <link href="https://zhang0224gz.github.io/2021/12/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://zhang0224gz.github.io/2021/12/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-12-09T05:52:57.914Z</published>
    <updated>2021-12-25T07:19:59.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第6章-图"><a href="#第6章-图" class="headerlink" title="第6章 图"></a>第6章 图</h3><h4 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h4><h4 id="图的基本术语"><a href="#图的基本术语" class="headerlink" title="图的基本术语"></a>图的基本术语</h4><h3 id="第七章-查找技术"><a href="#第七章-查找技术" class="headerlink" title="第七章 查找技术"></a>第七章 查找技术</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>关键码：可以标识一个**记录(数据元素、结点、顶点)**的某个数据项</p><p>键值：关键码的值</p><p>主关键码：可以唯一标识一个记录的关键码</p><p>次关键码：不能唯一标识一个记录的关键码</p><p><img src="C:\Users\zhangguozhi\AppData\Roaming\Typora\typora-user-images\image-20211225130027003.png" alt="image-20211225130027003"></p><p>什么是查找？<br>查找：在相同类型的记录构成的集合中找出满足给定条件的记录</p><p>静态查找 ：不涉及<strong>插入和删除操作</strong>的查找<br>    静态查找只注重<strong>查找效率</strong>，适用于：<br>    （1）查找集合一经生成，便只对其进行查找，而不进行插入和删除操作<br>    （2）经过一段时间的查找之后，集中地进行插入和删除等修改操作</p><p>动态查找 ：涉及插入和删除操作的查找<br>    动态查找要求<strong>插入、删除、查找</strong>均有较好的效率，适用于：查找与插入和删除操作在同一个阶段进行<br>    例如：当查找成功时，要删除查找到的记录<br>                当查找不成功时，要插入被查找的记录</p><p>查找结构 ：面向查找操作的数据结构 ，即查找基于的数据结构</p><p>查找基于的数据模型是什么？集合<br>    集合 ：线性表：适用于静态查找，顺序查找、折半查找等技术<br>                树  表：适用于动态查找，二叉排序树的查找技术<br>                散列表：静态查找和动态查找均适用，采用散列技术</p><h4 id="查找算法的性能"><a href="#查找算法的性能" class="headerlink" title="查找算法的性能"></a>查找算法的性能</h4><p>如何评价查找算法的效率呢？和关键码的比较次数</p><p>关键码的比较次数与哪些因素有关呢？</p><p>平均查找长度ASL：查找算法进行的关键码比较次数的<strong>数学期望值</strong></p><p><img src="file:///C:\Users\zhangguozhi\AppData\Roaming\Tencent\Users\2251787923\QQ\WinTemp\RichOle\73W}236IB4N68AL[$I884A2.png" alt="img"></p><p><img src="file:///C:\Users\zhangguozhi\AppData\Roaming\Tencent\Users\2251787923\QQ\WinTemp\RichOle\HF9X6B1K6FU_V8UZEMKB10U.png" alt="img"></p><h4 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h4><h5 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*顺序查找（线性查找）O(n)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">改进：设置“哨兵”，就是待查值，放在查找方向的尽头处，免去了每</span></span><br><span class="line"><span class="comment">一次比较后都要判断查找位置是否越界</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">不要求元素的有序性，插入、删除的性能是O(1)</span></span><br><span class="line"><span class="comment">查找性能是O(n)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> LineSearch :: <span class="built_in">SeqSearch2</span>(<span class="keyword">int</span> k) </span><br><span class="line">&#123;   </span><br><span class="line">     <span class="keyword">int</span> i = n; </span><br><span class="line">     data[<span class="number">0</span>] = k; </span><br><span class="line">     <span class="keyword">while</span> (data[i] != k)</span><br><span class="line">        i--;</span><br><span class="line">     <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="file:///C:\Users\zhangguozhi\AppData\Roaming\Tencent\Users\2251787923\QQ\WinTemp\RichOle\X}]H4{2YJ0BCR0UQV]ZT0G7.png" alt="img"></p><p><img src="file:///C:\Users\zhangguozhi\AppData\Roaming\Tencent\Users\2251787923\QQ\WinTemp\RichOle\R{ZN~H7M}WADEY1F}J7ER%S.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*折半查找（对半查找、二分查找）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在有序表（假设为递增）中，取中间记录作为比较对象，若给定值与中</span></span><br><span class="line"><span class="comment">间记录相等，则查找成功；若给定值小于中间记录，则在有序表的左半</span></span><br><span class="line"><span class="comment">区继续查找；若给定值大于中间记录，则在有序表的右半区继续查找。</span></span><br><span class="line"><span class="comment">不断重复上述过程，直到查找成功，或查找区域无记录，查找失败</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">查找性能是O(log2n)</span></span><br><span class="line"><span class="comment">为保证元素的有序性，插入、删除要移动元素，性能是O(n)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归算法：</span></span><br><span class="line"><span class="keyword">int</span> LineSearch :: <span class="built_in">BinSearch1</span>(<span class="keyword">int</span> k)                   <span class="comment">/*查找集合存储在r[1]~r[n]*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> mid, low = <span class="number">1</span>, high = n;                           <span class="comment">/*初始查找区间是[1, n]*/</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)                                     <span class="comment">/*当区间存在时*/</span></span><br><span class="line">    &#123; </span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;            </span><br><span class="line">        <span class="keyword">if</span> (k &lt; data[mid])  high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">if</span> (k &gt; data[mid])  low = mid + <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> mid;                                        <span class="comment">/*查找成功，返回元素序号*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                                       <span class="comment">/*查找失败，返回0*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归算法：</span></span><br><span class="line"><span class="keyword">int</span> LineSearch :: <span class="built_in">BinSearch2</span>(<span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> k) </span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span> <span class="number">0</span>;                                  <span class="comment">/*递归的边界条件*/</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; data[mid]) <span class="keyword">return</span> <span class="built_in">BinSearch2</span>(low, mid<span class="number">-1</span>, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; data[mid]) <span class="keyword">return</span> <span class="built_in">BinSearch2</span>(mid+<span class="number">1</span>, high, k); </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> mid;                                         <span class="comment">/*查找成功，返回序号*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判定树（折半查找判定树）：描述折半查找判定过程的二叉树</p><p>查找成功的平均比较次数 = (1×1+2×2+3×4+4×4)/11 = 3<br><img src="C:\Users\zhangguozhi\Desktop\1.png" alt="1"><br>查找不成功的平均比较次数 = (3×4+4×8)/12 = 11/3</p><p><img src="C:\Users\zhangguozhi\Desktop\2.png" alt="2"></p><h5 id="树表"><a href="#树表" class="headerlink" title="树表"></a>树表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉排序树（二叉查找树）：或者是一棵空的二叉树，或者是具有下列性质的二叉树：</span></span><br><span class="line"><span class="comment">（1）若它的左子树不空，则左子树上所有结点的值均小于根结点的值</span></span><br><span class="line"><span class="comment">（2）若它的右子树不空，则右子树上所有结点的值均大于根结点的值</span></span><br><span class="line"><span class="comment">（3）它的左右子树也都是二叉排序树</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">中序序列是元素升序排序</span></span><br><span class="line"><span class="comment">存储：二叉链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiSortTree</span>                              </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">BiSortTree</span>(<span class="keyword">int</span> a[ ], <span class="keyword">int</span> n);       </span><br><span class="line">     ~ <span class="built_in">BiSortTree</span>( ) &#123;<span class="built_in">Release</span>(root);&#125; </span><br><span class="line">     <span class="function">BiNode&lt;<span class="keyword">int</span>&gt; *<span class="title">InsertBST</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">InsertBST</span>(root, x);&#125;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">DeleteBST</span><span class="params">(BiNode&lt;<span class="keyword">int</span>&gt; *p, BiNode&lt;<span class="keyword">int</span>&gt; *f )</span></span>;      </span><br><span class="line">     <span class="function">BiNode&lt;<span class="keyword">int</span>&gt; *<span class="title">SearchBST</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">SearchBST</span>(root, k);&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">     <span class="function">BiNode&lt;<span class="keyword">int</span>&gt; *<span class="title">InsertBST</span><span class="params">(BiNode&lt;<span class="keyword">int</span>&gt; *bt , <span class="keyword">int</span> x)</span></span>;     </span><br><span class="line">     <span class="function">BiNode&lt;<span class="keyword">int</span>&gt; *<span class="title">SearchBST</span><span class="params">(BiNode&lt;<span class="keyword">int</span>&gt; *bt, <span class="keyword">int</span> k)</span></span>;    </span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Release</span><span class="params">(BiNode&lt;DataType&gt; *bt)</span></span>;     </span><br><span class="line">     BiNode&lt;<span class="keyword">int</span>&gt; *root;                              </span><br><span class="line">&#125;;</span><br><span class="line">BiSortTree::<span class="built_in">BiSortTree</span>(<span class="keyword">int</span> a[ ], <span class="keyword">int</span> n)<span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">     root = <span class="literal">nullptr</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">          root = <span class="built_in">InsertBST</span>(root, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; * BiSortTree :: <span class="built_in">SearchBST</span>(BiNode&lt;<span class="keyword">int</span>&gt; *bt, <span class="keyword">int</span> k)<span class="comment">//查找函数</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">      <span class="keyword">if</span> (bt-&gt;data == k) <span class="keyword">return</span> bt;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (bt-&gt;data &gt; k) <span class="keyword">return</span> <span class="built_in">SearchBST</span>(bt-&gt;lchild, k);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">SearchBST</span>(bt-&gt;rchild, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BiNode&lt;<span class="keyword">int</span>&gt; * <span class="title">BiSortTree::InsertBST</span><span class="params">(BiNode&lt;<span class="keyword">int</span>&gt; *bt, <span class="keyword">int</span> x)</span><span class="comment">//插入函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (bt == <span class="literal">nullptr</span>) &#123;                </span><br><span class="line">          BiNode&lt;<span class="keyword">int</span>&gt; *s = <span class="keyword">new</span> BiNode&lt;<span class="keyword">int</span>&gt;; s-&gt;data = x;</span><br><span class="line">          s-&gt;lchild = s-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">          bt = s;</span><br><span class="line">          <span class="keyword">return</span> bt;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (bt-&gt;data &gt; x) bt-&gt;lchild = <span class="built_in">InsertBST</span>(bt-&gt;lchild, x);</span><br><span class="line">     <span class="keyword">else</span> bt-&gt;rchild = <span class="built_in">InsertBST</span>(bt-&gt;rchild, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">二叉排序树的性能分析</span><br><span class="line">最坏情况：退化为线性查找</span><br><span class="line">最好情况：相当于折半查找</span><br><span class="line">平均情况：<span class="built_in">O</span>(n) ~ <span class="built_in">O</span>(logn)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">平衡二叉树（二叉排序树优化-&gt;深度尽可能小的二叉排序树）</span></span><br><span class="line"><span class="comment">二叉排序树的深度取决于给定查找集合的排列，即结点的插入顺序</span></span><br><span class="line"><span class="comment">平衡因子：该结点的左子树的深度减去右子树的深度</span></span><br><span class="line"><span class="comment">平衡二叉树：或者是一棵空的二叉排序树，或者是具有下列性质的二叉排序树：</span></span><br><span class="line"><span class="comment">（1）根结点的左子树和右子树的深度最多相差 1;</span></span><br><span class="line"><span class="comment">（2）根结点的左子树和右子树也都是平衡二叉树</span></span><br><span class="line"><span class="comment">在平衡二叉树中，结点的平衡因子是1、0 或 -1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">平衡调整</span></span><br><span class="line"><span class="comment">扁担原理：将根结点看成是扁担中肩膀的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">B树：一棵m阶的B树或者为空树，或者为满足下列特性的m叉树：</span></span><br><span class="line"><span class="comment">（1）每个结点至多有 m 棵子树；</span></span><br><span class="line"><span class="comment">（2）根结点至少有两棵子树；</span></span><br><span class="line"><span class="comment">（3）除根结点和叶子结点外，所有结点至少有[m/2]棵子树；</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">散列的基本思想：在记录的关键码和存储地址之间建立一个确定的对应关系，通过计算得到待查记录的地址。</span></span><br><span class="line"><span class="comment">散列表：采用散列技术存储查找集合的连续存储空间。</span></span><br><span class="line"><span class="comment">散列函数：将关键码映射为散列表中适当存储位置的函数。</span></span><br><span class="line"><span class="comment">散列地址：由散列函数所得的存储地址。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">冲突：对于两个不同关键码ki≠kj，有H(ki)＝H(kj)。</span></span><br><span class="line"><span class="comment">同义词：ki 和 kj 相对于H 称做同义词。 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">散列是一种完整的存储结构吗？</span></span><br><span class="line"><span class="comment">散列只是通过记录的关键码定位该记录，没有完整地表达记录之间的逻辑关系，所以，散列主要是面向查找的存储结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">散列技术能进行范围查找吗？适合于哪种类型的查找？</span></span><br><span class="line"><span class="comment">散列技术最适合回答的问题是：如果有的话，哪个记录的关键码等于待查值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">除留余数法H(key)=key  mod  p </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">处理冲突的方法——开放定址法（数组）</span></span><br><span class="line"><span class="comment">对于给定的关键码key执行下述操作：</span></span><br><span class="line"><span class="comment">（1）计算散列地址：j = H(key)</span></span><br><span class="line"><span class="comment">（2）如果地址 j 的存储单元没有存储记录，则存储key对应的记录；</span></span><br><span class="line"><span class="comment">（3）如果在地址 j 发生冲突，则寻找一个空的散列地址，存储key对应的记录；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">闭散列表：用开放定址法处理冲突得到的散列表</span></span><br><span class="line"><span class="comment">线性探测法：从冲突位置的下一个位置起，依次寻找空的散列地址。</span></span><br><span class="line"><span class="comment">堆积：非同义词对同一个散列地址争夺的现象</span></span><br><span class="line"><span class="comment">二次探测法：以冲突位置为中心，跳跃式寻找空的散列地址。</span></span><br><span class="line"><span class="comment">Hi=(H(key)＋di) % m   （di = 12,-12,22,-22,… , q2,-q2(q≤m/2)）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">处理冲突的方法——拉链法（链表）</span></span><br><span class="line"><span class="comment">对于给定的关键码key执行下述操作：</span></span><br><span class="line"><span class="comment">（1）计算散列地址：j = H(key)</span></span><br><span class="line"><span class="comment">（2）将key对应的记录插入到同义词子表 j 中；（头插）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">同义词子表：所有散列地址相同的记录构成的单链表。</span></span><br><span class="line"><span class="comment">开散列表：用拉链法处理冲突得到的散列表。</span></span><br><span class="line"><span class="comment">开散列表中存储同义词子表的头指针，开散列表不会出现堆积现象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">散列查找的性能分析</span></span><br><span class="line"><span class="comment">散列技术的查找性能取决于什么？</span></span><br><span class="line"><span class="comment">产生冲突后，仍然是给定值与关键码进行比较</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">影响冲突产生的因素有什么？</span></span><br><span class="line"><span class="comment">（1）散列函数是否均匀</span></span><br><span class="line"><span class="comment">（2）处理冲突的方法 </span></span><br><span class="line"><span class="comment">（3）散列表的装填因子α= 表中填入的记录数/散列表的长度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>堆积：非同义词对同一个散列地址争夺的现象<br>冲突：对于两个不同关键码ki≠kj，有H(ki)＝H(kj)</p><p><img src="C:\Users\zhangguozhi\Desktop\3.png" alt="3"></p><p><img src="C:\Users\zhangguozhi\AppData\Roaming\Typora\typora-user-images\image-20211225151704207.png" alt="image-20211225151704207"></p><h3 id="第8章-排序技术"><a href="#第8章-排序技术" class="headerlink" title="第8章 排序技术"></a>第8章 排序技术</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>1.排序：给定一组<strong>记录（数据元素，结点，顶点）</strong>的集合{r1,r2,…,rn}，其相应的<strong>关键码</strong>分别为{k1,k2,…,kn},将这些记录排列为{s1,s2,…,sn}的序列，使得相应关键码满足<strong>升序或降序</strong>。<br>        （排序是对<strong>线性结构</strong>(数据模型)的一种操作）</p><p>2.排序码(关键码)：排序的依据</p><p>3.趟：在排序过程中，将待排序的记录序列扫描一遍称为一趟</p><p>4.排序算法的稳定性：相同关键码的相对次序经过排序保持不变<br>        （只是算法的一种属性，且有具体算法决定）</p><h4 id="排序算法的性能"><a href="#排序算法的性能" class="headerlink" title="排序算法的性能"></a>排序算法的性能</h4><p>1.时间性能：排序算法在各种情况（最好、最坏、平均）下的时间复杂度<br>    （基于比较的内排序在排序过程中的基本操作：（1）比较：关键码之间的比较；（2）移动：记录从一个位置移动到另一个位置）</p><p>2.空间性能：排序过程中占用的辅助存储空间（额外申请的辅助空间个数，除代码规模和输入空间）</p><h4 id="基于比较的内排序"><a href="#基于比较的内排序" class="headerlink" title="基于比较的内排序"></a>基于比较的内排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="keyword">void</span> Sort :: InsertSort( )          </span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">int</span> i, j, temp;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; length; i++)</span><br><span class="line">     &#123; </span><br><span class="line">          temp = data[i];                 </span><br><span class="line">          j = i - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; data[j])</span><br><span class="line">          &#123;</span><br><span class="line">               data[j + <span class="number">1</span>] = data[j];                </span><br><span class="line">               j--;</span><br><span class="line">          &#125;</span><br><span class="line">          data[j + <span class="number">1</span>] = temp;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">void</span> Sort :: ShellSort( )        </span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">int</span> d, i, j, temp;</span><br><span class="line">     <span class="keyword">for</span> (d = length/<span class="number">2</span>; d &gt;= <span class="number">1</span>; d = d/<span class="number">2</span>)               <span class="comment">//增量为d进行直接插入排序</span></span><br><span class="line">     &#123;</span><br><span class="line">          <span class="keyword">for</span> (i = d; i &lt; length; i++)                       <span class="comment">//进行一趟希尔排序</span></span><br><span class="line">          &#123;</span><br><span class="line">               temp = data[i];                                   <span class="comment">//暂存待插入记录</span></span><br><span class="line">               <span class="keyword">for</span> (j = i - d; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; data[j]; j = j - d)</span><br><span class="line">                    data[j + d] = data[j];                      <span class="comment">//记录后移d个位置</span></span><br><span class="line">               data[j + d] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//起泡排序</span></span><br><span class="line"><span class="keyword">void</span> Sort :: BubbleSort( ) </span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">int</span> j, exchange, bound, temp;</span><br><span class="line">     exchange = length - <span class="number">1</span>;           <span class="comment">//第一趟起泡排序的区间是[0~length-1]</span></span><br><span class="line">     <span class="keyword">while</span> (exchange != <span class="number">0</span>)            </span><br><span class="line">     &#123;</span><br><span class="line">          bound = exchange; exchange = <span class="number">0</span>；  </span><br><span class="line">          <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; bound; j++)       <span class="comment">//一趟起泡排序的区间是[0~bound]</span></span><br><span class="line">               <span class="keyword">if</span> (data[j] &gt; data[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = data[j]; data[j] = data[j+<span class="number">1</span>]; data[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    exchange = j；           <span class="comment">//记载每一次记录交换的位置</span></span><br><span class="line">               &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第6章-图&quot;&gt;&lt;a href=&quot;#第6章-图&quot; class=&quot;headerlink&quot; title=&quot;第6章 图&quot;&gt;&lt;/a&gt;第6章 图&lt;/h3&gt;&lt;h4 id=&quot;图的定义&quot;&gt;&lt;a href=&quot;#图的定义&quot; class=&quot;headerlink&quot; title=&quot;图的定义&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="笔记" scheme="https://zhang0224gz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SET4-翻译</title>
    <link href="https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E7%BF%BB%E8%AF%91/"/>
    <id>https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E7%BF%BB%E8%AF%91/</id>
    <published>2021-12-06T08:36:53.397Z</published>
    <updated>2021-12-17T15:19:39.748Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">Hot pot has a history of over 2000 years in China.Initially,it was only popular in the coldest places,and subsequentlg became widely accepted in many other areas,where distinct regional variations developed.When eating a hot pot,family and friends sit around the table with a steaming hot pot at the center of it.People can put their preferred meal,seafood,vegetables and ingredients into the pot to cook their own food,and chat to their hearts’ content over a good meal.</th></tr></thead></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Hot pot has a history of over 2000 years in China.Initially,it was only popular in the coldest places,</summary>
      
    
    
    
    <category term="CET" scheme="https://zhang0224gz.github.io/categories/CET/"/>
    
    
    <category term="SET4" scheme="https://zhang0224gz.github.io/tags/SET4/"/>
    
  </entry>
  
  <entry>
    <title>SET4-作文</title>
    <link href="https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E4%BD%9C%E6%96%87/"/>
    <id>https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E4%BD%9C%E6%96%87/</id>
    <published>2021-12-06T02:20:39.278Z</published>
    <updated>2021-12-17T15:19:33.154Z</updated>
    
    <content type="html"><![CDATA[<h4 id="“use”类"><a href="#“use”类" class="headerlink" title="“use”类"></a>“use”类</h4><p>栗子：the use of translation apps is becoming increasingly popular</p><p>开篇可概述翻译应用程序在生活中的应用越发广泛的趋势</p><p>主体部分应详述其应用情况：多种<strong>应用场景</strong> + 积极<strong>影响</strong>/受欢迎的<strong>原因</strong></p><p>结尾部分可总结其带来的益处，适当提及不足之处和未来的应用或发展趋势</p><table><thead><tr><th align="left">The use of translation apps is becoming increasely popular.They play a critical role in removing the language barrier in this globalized era(全球化的时代).</th></tr></thead></table><table><thead><tr><th align="left">These technology tools are especially helpful for both leisure(闲暇，业余时间；休闲活动) and business travelers.</th></tr></thead></table><table><thead><tr><th align="left">With the ever-increasing input of linguistic data,these apps will be smarter and thus applied in broader fields.As a result,more people will enjoy the fruits of this technological advance.</th></tr></thead></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">词汇：</span><br><span class="line">machine translation 机器翻译</span><br><span class="line">convert speech to text将语音转换为文字</span><br><span class="line">voice/speech recognition语音识别</span><br><span class="line">voice translator apps语音翻译应用程序</span><br><span class="line">photo/camera translator apps拍照翻译应用程序</span><br><span class="line">an offline multilingual dictionary可离线使用的多语种词典</span><br><span class="line">translate text into multiplelanguages将文本翻译为多种语言</span><br><span class="line">offer instant speech-to-speech translation提供即使语音翻译</span><br><span class="line"></span><br><span class="line">foreign/overseas/international travel出国游</span><br><span class="line">have a short conversation with locals与当地人进行简短的交流</span><br><span class="line">bridge the information and communication gap架起信息与沟通的桥梁</span><br><span class="line">keep in contact with clients/customers worldwide与世界各地的客户保持联系</span><br><span class="line">conduct trade negotiations with foreign companies与外国公司进行贸易洽谈</span><br></pre></td></tr></table></figure><h4 id="“changes-of-ways”类"><a href="#“changes-of-ways”类" class="headerlink" title="“changes of ways”类"></a>“changes of ways”类</h4><p>栗子：Changes in the way of education</p><p>开篇可铺陈背景，引入对“教育方式发生改变”的探讨，或开门见山，直接概述教育领域<strong>发生的变化</strong></p><p>主体部分应详细阐述<strong>具体变化</strong>（今昔对比/当下变化）+ 这些变化的<strong>成因/影响</strong></p><p>结尾部分可对这些变化简要作评，或展望未来的发展趋势并呼吁人们做好准备</p><table><thead><tr><th align="left">The past decades have witnessed a surge of technological innovations.Irresistibly useful and convenient,tools resulting from these innovations have prompted(促使，导致) radical changes in our lifestyle.Among them,changes in the way of education are some of the most noticeable ones.</th></tr></thead></table><table><thead><tr><th align="left">Nowadays,the computer and projector(投影仪) have become indispensable(不可或缺的) in every classroom.Compared with old-fashioned chalk and talk(板书口授),multimedia-based teaching enables teachers to demonstrate what they found hard or even impossible in the past,such as abstract geometric(几何的) concepts and bizarre lanscapes.<br/>    The trend of distance learning is another significant change.With a wide array of(大量各式各样的) online courses to choose from,teaching and learning are no longer confined(局限) to the classroom or school day.Students now can attend lectures by prominent(著名的，卓越的) professors in far-away locations in their own bedroom anytime they want.And all this happens just within a few clicks.</th></tr></thead></table><table><thead><tr><th align="left">Although these changes are by and large(大体上) constructive,they do have a couple of unintended(无意地的，意想不到的) negative consequences.For instance,distance learning is likely to lead to a detached(冷淡的，疏远的) relationship between the student and the teacher.</th></tr></thead></table><p>其他作文：</p><table><thead><tr><th align="left">the changes of communication:<br/>At one time,people communicated primarily face to face and via letters.Nowadays,however,the advancement of network technology offers us more options such as text messaging,voice calling and video chatting.<br/>These changes bring a great deal of benefits.Perhaps the most obvious one is convenience.Irrespective of (不考虑，不管)the geographical locations and time zones,we can now keep in touch with each other through the Internet at a previously unimaginable speed.     This increased efficiency,in turn,leads to reduced costs.For instance,the advent of video conferencing(视频会议) allows people to meet each other without having to worry about travel expenses.       More excitingly,changes in the way of communication make possible remote</th></tr></thead></table><h4 id="“importance-of-quality”类"><a href="#“importance-of-quality”类" class="headerlink" title="“importance of quality”类"></a>“importance of quality”类</h4><p>栗子：Self-confidence:an importance factor for success</p><p>开篇可概述没有自信的危害来强调自信的重要性</p><p>主体部分：自信的定义+例子论证自信是成功的必要因素</p><p>结尾部分总结其带来的益处</p><table><thead><tr><th align="left">If we don’t feel self-confident about our ability,we will not be able to take up a task and get it done.If we dont’t have confidence in our competence,we won’t be courageous enough to face up to a challenge.Only when we think we are capable of doing something,will we be able to succeed in doing that.</th></tr></thead></table><table><thead><tr><th align="left">Self-confidence is different from complacency(自满).It is solidly(坚固地，坚硬地) based on our knowledge,judgement,abilities and skills.To develop it takes years of learning and to consolidate(巩固) it takes years of practicing.<br/>Self-confidence means more than mental preparedness(准备就绪).It serves as an indication(象征，暗示，迹象) of professional readiness(敏捷；准备就绪).It is also an expression of intellectual maturity.</th></tr></thead></table><table><thead><tr><th align="left">With self-confidence,we are able to firmly take each step in our journey of life(坚定地迈出人生旅途中的每一步) and it is self-confidencet that has been paving the way to the ultimate(最终的，最后的) goal of our professional career(为我们职业生涯的终极目标铺路).</th></tr></thead></table><h4 id="新闻写作：记叙类报道"><a href="#新闻写作：记叙类报道" class="headerlink" title="新闻写作：记叙类报道"></a>新闻写作：记叙类报道</h4><p>栗子：a news report to your campus newspaper<br> (on a volunteer activity organized by Student Union to assist elderly people in the neighbor hood)</p><p>开篇应为导语，介绍活动的时间、地点及参与者（基本事实+抓人眼球）</p><p>主体部分应介绍活动目的及具体内容/流程</p><p>结语部分应总结活动的意义、影响或收获，也可简要提及活动举办的大背景</p><p>​    记叙方式：时间循序（暖场-&gt;活动主体-&gt;结束）<br>​                       空间顺序（不同区域举办的活动依次参观）<br>​                       组别顺序（一人负责一件事，另一组人负责另一件事）<br>​    记叙类新闻写作五个基本要素5W（when,where,what,why,who）+ 1H:how</p><table><thead><tr><th align="left">The students,organized by the Student Union,visited a senior center close to our school on Wednesday,June 12th,for the purpose of providing help for the elderly there.</th></tr></thead></table><table><thead><tr><th align="left">Our volunteer were warmly welcomed when they arrived there at about 1 p.m.<br/>They presented the elderly with fresh fruits before dividing themselves into two groups,one responsible for cleaning and the other for chatting.It took nearly an hour for half a dozen volunteers to sweep and mop the floor and then wash all the windows.<br/>The rest were,meanwhile,listening attentively to the elderly who looked back on their good old days(过去美好时光) with a certain amount of nostalgia(n.怀旧，念旧).<br/>The activity ended with a certain lecture on how to send voice messages and make video calls on WeChat.</th></tr></thead></table><table><thead><tr><th align="left">“I’m impressed with their vigor(n.活力，精力) and optimism(n.乐观),”says one of the volunteers.”And I’m glad that the entire afternoon we spent together means something to them.They expressed their gratitude for our company,which may be,in my opinion,what they need most.”</th></tr></thead></table><h4 id="“whether正反观点观点”类"><a href="#“whether正反观点观点”类" class="headerlink" title="“whether正反观点观点”类"></a>“whether正反观点观点”类</h4><p>栗子：Whether technology will make people lazy</p><table><thead><tr><th align="left">With the continus progress of science and technology,great changes have taken place in the way people live.This progress has brought great convenience to people.Nonetheless,it has also made many people lazy.<br/>First,the widespread use of Internet technology,especially smart phones ,allows people to know what is happening outside without going out.People just need to pick up a mobile phone,connect to the Internet,and open the corresponding software,then the major events of the world will be caught in their eyes.They no longer have to open books and newspapers or go out to get information.Second,the appearance of takeaways has also made people lazier.People can get whatever they want to eat without cooking for themselves or even getting up to go to a restaurant…<br/>To sum up ,the ever-changing technology brings convenience to people,but it also make people laxy.Consequently,while improving the quality of life,people should learn to use science and technology correctly instead of relying on it blindly.</th></tr></thead></table><p>栗子：Whether violent video games online will cause students violent behaviors</p><table><thead><tr><th align="left">With the progress of the times, the use of smart phones, computers and other electronic products is becoming more and more common among students. And many students like violent video games online. This raises a question, whether violent online games will lead to students’ violent tendency? From my point of view, the answer is no.<br/>First of all, through online games, students can relieve the pressure in real life and find like-minded people to communicate with, which will reduce students’ irritable tendency in real life. In this way, these video games will not increase students’ violent tendency. On the contrary, to a certain extent they will reduce students’irritable behaviors. Moreover, online video games are virtual and the violent elements in the games are unrealistic, and these violent scenes can hardly be implemented in real life. So the violence in online games has little impact on real life.<br/>To sum up, from my point of view, violent online games will not lead to students’ violent tendency. The development of science and technology is bound to change people’s way of life, which will bring about a lot of influence on people’s life. It is only necessary for us to learn to use it properly.</th></tr></thead></table><p>栗子：<strong>Are People Becoming Addicted to Technology?</strong></p><table><thead><tr><th align="left">Numerous studies claim that addiction to technology is real and it has the same effect on the brain as drug addiction. First, no one can deny the fact that technology is of great importance to our daily life. However, as a matter of fact, its adverse effect should not be ignored by the public.<br/>Confronted with such phenomenon, we should take a series of effective measures to cope with the situation. For one thing, it is obvious that the universitiesand mass media should increase publicity and educationto encourage people to apply technology more appropriately. For another, we should bear in mind that we are supposed to take a reasonable attitude toward modern technology, andmake its advantages over-weigh disadvantages.<br/>Personally, I believe that only by doing so can we better ourselves in every aspect of our life. Consequently, I’m confident that a bright future is awaiting us because technology makes our life rich and colorful.</th></tr></thead></table><h4 id="高级替换："><a href="#高级替换：" class="headerlink" title="高级替换："></a>高级替换：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">end/finish with sth;end/finish by doing sth(do sth at last)以某事收尾</span><br><span class="line">mean something/a lot to sb;matter to sb(be important to sb)对某人来说很重要</span><br><span class="line">show/express one&#x27;s gratitude/appreciation for (doing) sth(thanks for (doing) sth)对某事表示感谢</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">副词应用：</span><br><span class="line">solidly(坚固地，坚硬地)/firmly</span><br><span class="line">more than + n./no longer/by and large</span><br><span class="line">increasely</span><br><span class="line">especially</span><br><span class="line">As a result/For instance</span><br><span class="line">Irresistibly</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">同义转换：</span><br><span class="line">feel self-confident about our ability/have confidence in our competence</span><br><span class="line">take up a task/face up to a challenge</span><br><span class="line">are capable of doing/be able to take/be courageous enough to face</span><br><span class="line">mean/ an indication(象征，暗示，迹象) of/an expression of</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;“use”类&quot;&gt;&lt;a href=&quot;#“use”类&quot; class=&quot;headerlink&quot; title=&quot;“use”类&quot;&gt;&lt;/a&gt;“use”类&lt;/h4&gt;&lt;p&gt;栗子：the use of translation apps is becoming increasingl</summary>
      
    
    
    
    <category term="CET" scheme="https://zhang0224gz.github.io/categories/CET/"/>
    
    
    <category term="SET4" scheme="https://zhang0224gz.github.io/tags/SET4/"/>
    
  </entry>
  
  <entry>
    <title>SET4-词汇</title>
    <link href="https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E8%AF%8D%E6%B1%87/"/>
    <id>https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E8%AF%8D%E6%B1%87/</id>
    <published>2021-12-06T01:41:11.803Z</published>
    <updated>2021-12-17T13:18:51.349Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2021-12-13"><a href="#2021-12-13" class="headerlink" title="2021/12/13"></a>2021/12/13</h4><table><thead><tr><th align="left">生词</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">airline,carrier,aviation,aircraft,cabin seat</td><td align="left">n.航空公司，航线；客运航空公司；航空；飞机；机舱座位</td></tr><tr><td align="left">definitely，alternatively，incredibly,possibly</td><td align="left">adv.肯定，当然，确实；确切地，明确地，清楚地                                                                   adv.或者，要么                                                                                                                                         adv.极端的，及其；难以置信地                                                                                                             adv.可能，或许；尽可能，尽量</td></tr><tr><td align="left"><strong>budget</strong></td><td align="left">adj.廉价的                                                                                                                                          v.安排开支，编制预算</td></tr><tr><td align="left">across the globe</td><td align="left">全球</td></tr><tr><td align="left"><strong>integrate</strong> various <strong>shade</strong>s/<strong>tone</strong>s of blue</td><td align="left">融合(v.合并,成为一体;加入,融入群体)各种色调(n.)的蓝</td></tr><tr><td align="left">aircraft interior</td><td align="left">n.内部，室内设计</td></tr><tr><td align="left">reinforce</td><td align="left">v.加固，强化</td></tr><tr><td align="left"><strong>induce/endure</strong></td><td align="left">v.引起，诱导/忍耐，忍受</td></tr><tr><td align="left">bold</td><td align="left">adj.大胆的</td></tr><tr><td align="left">the <strong>principal</strong> aim</td><td align="left">adj.最重要的，主要的    n.大学校长，学院院长；本金，资本；主角</td></tr><tr><td align="left">domestic，earthy</td><td align="left">adj.家庭的；朴实的</td></tr><tr><td align="left">become the color <strong>of choice</strong></td><td align="left">首选的，广受欢迎的</td></tr><tr><td align="left"><strong>to the point of</strong> complete inaction</td><td align="left"><strong>达到</strong>完全不作为<strong>的程度</strong></td></tr><tr><td align="left">imitate</td><td align="left">v.模仿，效仿</td></tr><tr><td align="left">rebell</td><td align="left">v.反叛；叛逆；反对（rebell against）</td></tr><tr><td align="left">indication</td><td align="left">n.表明，显示；象征</td></tr><tr><td align="left">be unable and unprepared to endure the long haul</td><td align="left">无法或不愿意忍受长期的煎熬                                                                                               adj.不愿意的，不甘心的，未准备好的                                                                                                 长期艰巨的任务。</td></tr><tr><td align="left">inaction</td><td align="left">n.不行动，不采取措施；无作为</td></tr><tr><td align="left">destructive</td><td align="left">adj.破坏性的，毁灭性的</td></tr><tr><td align="left">proposition</td><td align="left">n.提议；主张，观点；（美国）法律修正议案；事情，问题，任务</td></tr></tbody></table><table><thead><tr><th align="left">熟词</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">coincidence</td><td align="left">n.（令人吃惊的）巧合，巧事；同时存在；（意见）相同，一致</td></tr><tr><td align="left">credit card,debt,loan,mortgage,financial difficulty,financial stress</td><td align="left">n.信用卡；债务；贷款；按揭贷款，房屋抵押贷款；经济困难</td></tr><tr><td align="left">trust,efficiency,quietness,coolness,reflection,calm</td><td align="left">n.信任；高效；平静；冷静；沉思；沉着</td></tr><tr><td align="left">domestic,natural,earthy</td><td align="left">adj.居家，自然，质朴</td></tr><tr><td align="left"><strong>conservative,agreeable,corporate</strong></td><td align="left">adj.保守的；令人愉快的；公司的</td></tr><tr><td align="left">trustworthy</td><td align="left">adj.可靠的，值得信赖的</td></tr><tr><td align="left">natural</td><td align="left">adj.天然的，自然地；正常的，意料之中的；天生的，本能的                                        n.有天赋的人，擅长做某事的人</td></tr><tr><td align="left">associated</td><td align="left">v.-ed 联想，联系；交往；表明支持，表示同意                                              adj.相关的；有联系的；联合的</td></tr><tr><td align="left">psychology</td><td align="left">n.心理学，心理课堂</td></tr><tr><td align="left">leading</td><td align="left">adj.杰出的</td></tr><tr><td align="left">brand</td><td align="left">n.品牌</td></tr><tr><td align="left">recognizable</td><td align="left">adj.易于识别的，可承认的</td></tr><tr><td align="left">primary concern</td><td align="left"></td></tr><tr><td align="left">maximize</td><td align="left">v.使增加到最大限度；充分利用</td></tr><tr><td align="left">softened</td><td align="left">adj.柔和的</td></tr><tr><td align="left">traditional</td><td align="left">adj.传统的，习俗的，惯例地；守旧地</td></tr><tr><td align="left">simply stick</td><td align="left">就这么沿用下来                                                                                                              adv.仅仅，不过；确实，简直；简单地，简朴地；不过，只是                                           v.经久驻留</td></tr><tr><td align="left">symbolize</td><td align="left">v.象征，代表</td></tr><tr><td align="left">encounter</td><td align="left">v.遭遇，遇到</td></tr><tr><td align="left">convince</td><td align="left">v.坚信，深信，确信</td></tr><tr><td align="left">argue</td><td align="left">v.争吵，争辩（argue with sb about/over sth)；论证，说理（argue for/against sth)</td></tr><tr><td align="left">the normal <strong>ups and downs</strong> of investment markets</td><td align="left">投资市场正常的涨涨跌跌                                                                                      adj.正常的，一般的；精神正常的，意识健全的 n.常态，通常标准，一般水平 起伏，涨跌，兴衰</td></tr><tr><td align="left">gateway，household，pattern</td><td align="left">n.大门入口，途径;家庭，一家人;模式</td></tr><tr><td align="left">statement</td><td align="left">n.声明，陈述；结算单，报表（financial statement财务报表）</td></tr></tbody></table><p>era    n.<br>souvenir    n.<br>stall    n.<br>fruit    n.<br>advance    n.<br>phrase book<br>introduce    v.<br>indispens<strong>a</strong>ble    adj.<br>adequate    adj.<br>casual     adj.<br>lingual,linguistic    adj.<br>when it comes to …<br>find the right way to deal with sth<br>make a big effort to do sth<br>be not as good as sb</p><p>accessible    adj.<br>account    v.<br>adaptation    n.<br>appropriately    adv.<br>considerable    adj.<br>effective    adj.<br>ladder    n.<br>miseread    v.<br>nomination    n.<br>overlook    v.<br>promote    v.<br>senior    n.<br>submission    n.<br>suggest    v.<br>thankfullg    adv.<br>separate    v.<br>utter    v.<br>pioneering    adj.<br>pursuit    n.<br>in one’s lifetime<br>play an importannt part/role in …<br>higher education<br>advance and promote gender equality<br>undergraduate    n./adj.<br>postgraduate    n./adj.<br>make up<br>academic staff<br>at senior levels<br>stark    adj.<br>median    adj.</p><p>knit(knitting,knitter)    v.<br>(crocheter)<br>stitch    v.<br>handiwork    n.<br>crafts    n.<br>throughout college    prep.<br>thereafter    adv.<br>hook    v.<br>on one’s way to doing sth<br>restore    v./ renewal    n.<br>council    n.<br>swell the ranks<br>in honer of<br>pioneer    n.<br>repetitive    adj.<br>induce a relaxed state<br>be associated with<br>initial learning curve<br>heart rate<br>tangible    adj.<br>self-esteem/self-respect    n.<br>singular    adj.<br>boost my spirits<br>hundreds of thousands of …<br>routinely    adv.<br>fulfillment    n.<br>a prematurely born baby<br>intensive care unit(ICU)<br>stick with<br>cope with<br>prompte    v.<br>go well    adv.<br>replace A with B<br>conduct    v.<br>heal for    v.<br>autoimmune    adj.<br>mindless    adj.<br>stiff    agj.<br>disorder    n.<br>significant improvements<br>lessen their fears<br>wellness    n.<br>therapeutic    adi.<br>respondent    n.<br>clinically    adv.<br>persistent    adj.<br>redirect their focus/ divert their attention from their pain<br>process<br>at once<br>register pain signals<br>sample    n.<br>be engaged in …<br>diminished    adj.<br>speculate    v.<br>nerve pathways<br>intellectually    adv.<br>sustained    adj.<br>maximize    v.<br>like-minded        adj.<br>for one<br>stay away from tobacco<br>enhance    v.<br>prolong one’s life<br>keenly    adv.<br>relieve stress<br>suffer mild cognitive damage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">vanishv.</span><br><span class="line">prospectn.</span><br><span class="line">there is almost no hard evidence for ... other than ...</span><br><span class="line">pilotadj.</span><br><span class="line">autopilotn.</span><br><span class="line">the bulk of</span><br><span class="line">a shifting of gears</span><br><span class="line">terrifyingadj.</span><br><span class="line">a rebirthn.</span><br><span class="line">choose purpose over happiness</span><br><span class="line">give priority to</span><br><span class="line">far from gloomy</span><br><span class="line">phasev.</span><br><span class="line">identityn.</span><br><span class="line">built up your resources</span><br><span class="line">preciselyadv.</span><br><span class="line">foundationn.</span><br><span class="line">secureadj.</span><br><span class="line">sowingn.</span><br><span class="line">reapv.</span><br><span class="line">the run</span><br><span class="line">leapv.</span><br><span class="line">venturen.</span><br><span class="line">measuredadj.</span><br><span class="line">hasten.</span><br><span class="line">energeticadj.</span><br><span class="line">presidential candidate</span><br><span class="line">lifespann.</span><br><span class="line">narrative</span><br><span class="line">descentcn.</span><br><span class="line">a turning point</span><br><span class="line">take full advantage of</span><br><span class="line">misrepresent real life</span><br><span class="line">rosyadj.</span><br><span class="line">burdensomeadj.</span><br><span class="line">undergo(undergoes)v.</span><br><span class="line">turn off</span><br><span class="line">doneadj.</span><br><span class="line">science fiction</span><br><span class="line">increasinglyadv.</span><br><span class="line">absorbv.</span><br><span class="line">fragmentedadj.</span><br><span class="line">bizarreadj.</span><br><span class="line">popular notion</span><br><span class="line">retainv.</span><br><span class="line">replayv.</span><br><span class="line">a neural virtual reality</span><br><span class="line">vividadj.</span><br><span class="line">sleep disorders</span><br><span class="line">sleepwalkv.</span><br><span class="line">physical movement</span><br><span class="line">videotape the subjects</span><br><span class="line">drawv.</span><br><span class="line">integrate ... into</span><br><span class="line">10-foldadj.</span><br><span class="line">respondent,candidate,subject,participant</span><br><span class="line">bedtimen.</span><br><span class="line">a nap</span><br><span class="line">a study session</span><br><span class="line">oddn.</span><br><span class="line">intensifiedadj.</span><br><span class="line">systematizev.</span><br><span class="line">substitute ... with</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;2021-12-13&quot;&gt;&lt;a href=&quot;#2021-12-13&quot; class=&quot;headerlink&quot; title=&quot;2021/12/13&quot;&gt;&lt;/a&gt;2021/12/13&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;生词&lt;</summary>
      
    
    
    
    <category term="CET" scheme="https://zhang0224gz.github.io/categories/CET/"/>
    
    
    <category term="SET4" scheme="https://zhang0224gz.github.io/tags/SET4/"/>
    
  </entry>
  
  <entry>
    <title>PTA 数据结构</title>
    <link href="https://zhang0224gz.github.io/2021/12/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/PTA/"/>
    <id>https://zhang0224gz.github.io/2021/12/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/PTA/</id>
    <published>2021-12-04T15:24:25.366Z</published>
    <updated>2021-12-28T05:33:59.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a><a href="https://pintia.cn/problem-sets?tab=1">第一章 绪论</a></h3><h4 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h4><p>1-1</p><p>数据元素是数据的最小单位。F(数据项)</p><p>1-2</p><p>数据的逻辑结构是指数据的各数据项之间的逻辑关系。F（数据元素之间）</p><p>1-3</p><p>数据结构概念包括数据之间的逻辑结构、数据在计算机中的存储方式和数据的运算三个方面。T</p><p>1-4</p><p>数据结构的抽象操作的定义与具体实现有关。F</p><p>1-5</p><p>算法和程序没有区别，在数据结构中二者是通用的。F</p><p>1-6</p><p>数据结构包括数据对象集以及它们的逻辑结构和物理结构，还包括与数据对象相关联的操作集，以及实现这些操作的高效的算法。T</p><h4 id="选择题（错题：2-9-2-13）"><a href="#选择题（错题：2-9-2-13）" class="headerlink" title="选择题（错题：2-9,2-13）"></a>选择题（错题：2-9,2-13）</h4><p>2-1</p><p>在 Data_Structure = (D，R)中，D 是（ ）的有限集合。</p><p>A.数据元素</p><p>2-2</p><p>以下关于数据结构的说法中错误的是（ ）。</p><p>A.数据结构相同，对应的存储结构也相同</p><p>2-4</p><p>算法分析的目的是( )</p><p>C.分析算法的效率以求改进</p><p>2-5</p><p>算法分析的两个主要方面是( )</p><p>A.空间复杂度和时间复杂度</p><p>2-6</p><p>采用链结构存储线性表时，其地址（ ）。</p><p>B.连续不连续都可以</p><p>2-7</p><p>一个正确的算法应该具有 5 个特性，除输入、输出特性外，另外 3 个特性是（ ）。</p><p>A.确定性、可行性、有穷性</p><p>2-8</p><p>算法的时间复杂度取决于（ ）</p><p>C.问题的规模和待处理数据的初态</p><p>2-9</p><p>以下数据结构中，哪一个是线性结构（ ）</p><p>D.串</p><p>2-10</p><p>以下数据结构中，（ ）是非线性数据结构</p><p>B.字符串</p><p>2-11</p><p>算法的时间复杂度与（ ）有关。</p><p>A.问题规模</p><p>2-12</p><p>以下程序段的空间复杂度为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a = 1, b = 1, i;</span><br><span class="line">for (i=0; i&lt;=10; i++) &#123;</span><br><span class="line">  b += a;</span><br><span class="line">  a = b - a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B.O(1)</p><p>2-13</p><p>下列程序段的时间复杂度是（ ）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count=0;</span><br><span class="line">for(k=1;k&lt;=n;k*=2)</span><br><span class="line"> for(j=1;j&lt;=n;j++)</span><br><span class="line">   count++;</span><br></pre></td></tr></table></figure><p>C.O*(<em>n<strong>l</strong>og</em>2*n)</p><p>2-14</p><p>下面说法中，错误的是（ ）。</p><p>ⅰ.算法原地工作的含义是指不需要任何额外的辅助空间</p><p>ⅱ.在相同规模n下，复杂度为<em>O</em>(<em>n</em>)的算法在时间上总是优于复杂度为<em>O</em>(2<em>n</em>)的算法</p><p>ⅲ.所谓时间复杂度，是指最坏情况下估算算法执行时间的一个上界</p><p>ⅳ.同一个算法，实现语言的级别越高，执行效率越低</p><p>C.ⅰ,ⅳ</p><p>2-15</p><p>算法的计算量的大小称为算法的____。</p><p>B.复杂度</p><p>2-16</p><p>在下面的程序段中，对x的赋值语句的频度为（ ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (i=1;i&lt;=n;i++)</span><br><span class="line">    for (j=1;j&lt;=n;j++)</span><br><span class="line">      x=x+1;</span><br></pre></td></tr></table></figure><p>C.O(<em>n</em>2)</p><p>2-17</p><p>下面程序段的时间复杂度是 ( )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i ＝ 0；</span><br><span class="line">while（i&lt;=n）</span><br><span class="line">     i = i * 3；</span><br></pre></td></tr></table></figure><p>D.O(<em>l<strong>o</strong>g</em>3<em>n</em>)</p><h4 id="填空题（错题：4-1-4-4-4-6，4-7，4-10）"><a href="#填空题（错题：4-1-4-4-4-6，4-7，4-10）" class="headerlink" title="填空题（错题：4-1, 4-4, 4-6，4-7，4-10）"></a>填空题（错题：4-1, 4-4, 4-6，4-7，4-10）</h4><p>4-1</p><p>算法效率的比较</p><p>假设为解决某问题而设计的若干算法的时间复杂度分别为：</p><p>A) <em>O</em>(<em>n</em>)<br>B) <em>O</em>(<em>n</em>2)<br>C) <em>O</em>(log2​<em>n</em>)<br>D) <em>O</em>(<em>n</em>log2​<em>n</em>)<br>E) <em>O</em>(2<em>n</em>)<br>F) <em>O</em>(<em>n</em>​)<br>G) <em>O</em>(<em>n</em>!)<br>H) <em>O</em>(1)<br>I) <em>O</em>(<em>n**n</em>​)<br>J) <em>O</em>(<em>n**n</em>)</p><p>这些算法按效率由高到低的顺序是 <strong>HCFADIBEGJ</strong></p><p>4-2</p><p>基本术语</p><p><strong>数据</strong> 是客观事物的符号表示，是所有能输入到计算机中并被计算机程序处理的符号的总称。</p><p>4-3</p><p>数据结构的数学定义</p><p>数据结构的数学定义为一个二元组：</p><p><em>D**S</em>=(<em>D</em>,<em>R</em>)</p><p>其中：<em>D</em> 是<strong>数据元素</strong>的有限集，<em>R</em> 是 <em>D</em> 上的<strong>关系</strong> 的有限集。</p><p>4-4</p><p>存储结构存储结构包括<strong>数据元素</strong>的表示和<strong>关系</strong>的表示。</p><p>4-5</p><p>基本术语</p><p><strong>抽象数据类型</strong> 一般指由用户定义的、表示应用问题的数学模型，以及定义在该模型上的一组操作。</p><p>4-6</p><p>在数据结构中，数据的逻辑结构分为<strong>线性结构</strong>和<strong>非线性结构</strong> 。</p><p>4-7</p><p>数据结构由数据的<strong>逻辑结构</strong>、<strong>存储结构</strong> 和<strong>运算|操作</strong>三部分组成。</p><p>4-8</p><p>算法的特性</p><p>一个算法必须满足以下五个重要特性：</p><p>(1) <strong>有穷性</strong> 一个算法必须总是在执行有穷步后结束，且每一步都可以有穷有时间内完成。</p><p>(2) <strong>确定性</strong> 一个算法中每一条指令必须有确切的含义。</p><p>(3) <strong>可行性</strong> 算法中的所有操作都可以通过已经实现的基本操作运算执行有限次来实现。</p><p>(4) <strong>输入</strong>一个算法有零个或多个输入。</p><p>(5) <strong>输出</strong>一个算法有一个或多个输出，它们是算法进行信息加工后得到的结果。</p><p>4-9</p><p>基本术语</p><p> <strong>数据元素</strong>是数据的基本单位，<strong>数据项</strong>是数据的不可分割最小单位。其中：前者在计算机中通常作为一个整体进行考虑和处理，它可以由一个或多个后者组成。</p><p>4-10</p><p>数据的实例</p><p>观察下面的表格：</p><table><thead><tr><th><strong>学号</strong></th><th><strong>姓名</strong></th><th><strong>性别</strong></th><th><strong>语文</strong></th><th><strong>数学</strong></th><th><strong>物理</strong></th><th><strong>化学</strong></th><th><strong>英语</strong></th><th><strong>总分</strong></th></tr></thead><tbody><tr><td>15160101</td><td>王克强</td><td>男</td><td>87</td><td>95</td><td>93</td><td>76</td><td>84</td><td>435</td></tr><tr><td>15160102</td><td>刘铭志</td><td>男</td><td>77</td><td>82</td><td>80</td><td>97</td><td>95</td><td>431</td></tr><tr><td>15160103</td><td>孙勇</td><td>男</td><td>78</td><td>85</td><td>87</td><td>86</td><td>65</td><td>401</td></tr><tr><td>15160104</td><td>李瀚东</td><td>男</td><td>93</td><td>82</td><td>72</td><td>75</td><td>95</td><td>417</td></tr><tr><td>15160105</td><td>赵敏</td><td>女</td><td>95</td><td>90</td><td>88</td><td>82</td><td>96</td><td>451</td></tr><tr><td>15160106</td><td>张毅</td><td>男</td><td>78</td><td>76</td><td>65</td><td>81</td><td>80</td><td>380</td></tr><tr><td>15160107</td><td>柳青</td><td>女</td><td>82</td><td>91</td><td>82</td><td>84</td><td>85</td><td>424</td></tr><tr><td>15160108</td><td>蔡文婷</td><td>女</td><td>85</td><td>78</td><td>80</td><td>86</td><td>95</td><td>424</td></tr></tbody></table><p>整张表格称为一个 <strong>数据对象</strong>，其中每一行称为一个 <strong>数据元素</strong>，任意一行中的每一个栏目称为一个<strong>数据项</strong>。</p><p>4-11</p><p>沃斯的名言</p><p>瑞士科学家尼古拉斯·沃斯(Niklaus Wirth)有一句在计算机领域里人尽皆知的名言：</p><p><strong>算法 + 数据结构 = 程序</strong></p><h4 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h4><h5 id="7-1-求最小值和次小值-25-分"><a href="#7-1-求最小值和次小值-25-分" class="headerlink" title="7-1 求最小值和次小值 (25 分)"></a><strong>7-1 求最小值和次小值 (25 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> mini = x;</span><br><span class="line">    <span class="keyword">int</span> mini2 = x;</span><br><span class="line">    <span class="keyword">int</span> a[n]=&#123;x&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(mini&gt;a[i])mini=a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==mini)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(mini2==mini)mini2=a[i];</span><br><span class="line">        <span class="keyword">if</span>(mini2&gt;a[i])mini2=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mini==mini2)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;There is no second smallest element&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;mini&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;mini2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Invalid Input&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-2-求素数个数-30-分"><a href="#7-2-求素数个数-30-分" class="headerlink" title="7-2 求素数个数 (30 分)"></a><strong>7-2 求素数个数 (30 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,num=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">int</span> *a=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">            a[i]=<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">0</span>]=a[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i;j&lt;=n;j+=i)</span><br><span class="line">                    a[j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i])num++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n,num=1,flag=1;</span></span><br><span class="line"><span class="comment">    cin&gt;&gt;n;</span></span><br><span class="line"><span class="comment">    if(n==1)cout&lt;&lt;&quot;0&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    else if(n==2)cout&lt;&lt;&quot;1&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(int i=3;i&lt;=n;i+=2)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            for(int j=3;j*j&lt;=i;j+=2)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                if(i%j==0)</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                    flag=0;</span></span><br><span class="line"><span class="comment">                    break;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(flag)</span></span><br><span class="line"><span class="comment">                num++;</span></span><br><span class="line"><span class="comment">            flag=1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;num&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n,num=0,flag=1;</span></span><br><span class="line"><span class="comment">    cin&gt;&gt;n;</span></span><br><span class="line"><span class="comment">    for(int i=2;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(int j=2;j*j&lt;=i;j++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            if(i%j==0)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                flag=0;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(flag)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            num++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        flag=1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;num&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h3><h4 id="判断题（错题：1-2-1-4-1-15-1-17）"><a href="#判断题（错题：1-2-1-4-1-15-1-17）" class="headerlink" title="判断题（错题：1-2,1-4,1-15,1-17）"></a>判断题（错题：1-2,1-4,1-15,1-17）</h4><p>1-1</p><p>顺序存储方式只能用于存储线性结构。F</p><h5 id="1-2"><a href="#1-2" class="headerlink" title="1-2"></a>1-2</h5><p>在顺序表中取出第i个元素所花费的时间与i成正比。<strong>F</strong></p><p>1-3</p><p>线性表的顺序存储表示优于链式存储表示。F</p><h5 id="1-4"><a href="#1-4" class="headerlink" title="1-4"></a>1-4</h5><p>带头结点的单循环链表中，任一结点的后继结点的指针域均不空。<strong>T</strong></p><p>1-5</p><p>顺序表 - 存储结构</p><p>顺序表中逻辑上相邻的元素，其物理位置也一定相邻。T</p><p>1-6</p><p>链式存储的优点是插入、删除元素时不会引起后续元素的移动，缺点是只能顺序访问各元素。T</p><p>1-7</p><p>线性表若采用链式存储结构时，要求内存中可用存储单元的地址一定不连续。F</p><p>1-8</p><p>链表是采用链式存储结构的线性表,进行插入、删除操作时，在链表中比在顺序存储结构中效率高。T</p><p>1-9</p><p>若某线性表最常用的操作是存取任一指定序号的元素和在最后进行插入和删除运算，则利用顺序表存储最节省时间。T</p><p>1-10</p><p>对于顺序存储的长度为<em>N</em>的线性表，删除第一个元素和插入最后一个元素的时间复杂度分别对应为<em>O</em>(1)和<em>O</em>(<em>N</em>)。F</p><p>1-11</p><p>在线性表的顺序存储结构中，插入和删除元素时，移动元素的个数与该元素的位置有关。T</p><p>1-12</p><p>顺序存储方式的优点是存储密度大，且插入、删除运算效率高。F</p><p>1-13</p><p>在具有<em>N</em>个结点的单链表中，访问结点和增加结点的时间复杂度分别对应为<em>O</em>(1)和<em>O</em>(<em>N</em>)。F</p><p>1-14</p><p>线性表采用链式存储表示时，所有结点之间的存储单元地址可以连续也可以不连续。T</p><h5 id="1-15"><a href="#1-15" class="headerlink" title="1-15"></a>1-15</h5><p>在单链表中，要访问某个结点，只要知道该结点的指针即可。因此，单链表是一种随机存取结构。<strong>F</strong></p><p>1-16</p><p>在具有头结点的链式存储结构中，头指针指向链表中的第一个元素结点。F</p><h5 id="1-17"><a href="#1-17" class="headerlink" title="1-17"></a>1-17</h5><p>在一个设有头指针和尾指针的单链表中，执行删除该单链表中最后一个元素的操作与链表的长度无关。F</p><p>1-18</p><p>循环链表可以做到从任一结点出发，访问到链表的全部结点。T</p><p>1-19</p><p>在单链表中，逻辑上相邻的元素，其物理位置必定相邻。F</p><p>1-20</p><p>在双向链表中，可以从当前结点出发访问到任何一个结点。T</p><h4 id="选择题-错题：2-10-2-13-2-16-2-20"><a href="#选择题-错题：2-10-2-13-2-16-2-20" class="headerlink" title="选择题(错题：2-10,2-13,2-16,2-20)"></a>选择题(错题：2-10,2-13,2-16,2-20)</h4><p>2-1</p><p>在一个长度为n的顺序表中，向第i个元素(1≤i≤n+1)位置插入一个新元素时需要从后向前移动多少个元素。</p><p>B.n-i+1</p><p>2-2</p><p>对于线性表，在顺序存储结构和链式存储结构中查找第k个元素，其时间复杂性分别是多少？</p><p>D.O(1)和O(k)</p><p>2-3</p><p>在顺序结构表示的线性表中，删除第i个元素（数组下标为i-1)，需要把后面的所有元素都往前挪一位，相应的语句是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for (___________ )</span><br><span class="line">            PtrL-&gt;Data[j-1]=PtrL-&gt;Data[j];</span><br></pre></td></tr></table></figure><p>其中空缺部分的内容应该是</p><p>A.j = i; j&lt; = PtrL-&gt;Last; j++</p><p>2-4</p><p>向一个有127个元素的顺序表中插入一个新元素并保持原来顺序不变，平均要移动的元素个数为（ ）</p><p>B.63.5</p><p>2-5</p><p>顺序表是线性表的( )</p><p>B.顺序存储结构</p><p>2-6</p><p>以下说法错误的是 ( )。</p><p>C.在链表上实现读表元运算的平均时间复杂度为O（1）</p><p>2-7</p><p>哪个选项不是线性表的链式存储结构（ ）</p><p>B.顺序表</p><p>2-8</p><p>在向表中第i个元素（1≤i≤n+1）位置插入一个新元素时，为保持插入后表中原有元素的相对次序不变，需要从后向前依次后移（ ）个元素。</p><p>B.n-i+1</p><p>2-9</p><p>在删除表中第i个元素时，同样地，为保持删除后表中原有元素的相对次序不变，需要从前向后依次前移（ ）个元素。</p><p>A.n-i</p><h5 id="2-10"><a href="#2-10" class="headerlink" title="2-10"></a>2-10</h5><p>与单链表相比，双链表的优点之一是（）。</p><p><strong>D.顺序访问相邻结点更加灵活</strong></p><p>2-11</p><p>在单链表中，要删除某一指定结点，必须先找到该结点的（）。</p><p>A.直接前驱</p><p>2-12</p><p>循环链表的主要优点是（）。</p><p>D.从表中的任意结点出发都能扫描到整个链表</p><h5 id="2-13"><a href="#2-13" class="headerlink" title="2-13"></a>2-13</h5><p>若某表最常用的操作是在最后一个结点之后插入一个结点或删除最后一个结点，则采用（）存储方式最节省运算时间。</p><p><strong>D.带表头附加结点的双循环链表</strong></p><p>2-14</p><p>单链表又称为线性链表，在单链表上实施插入和删除操作（ ）。</p><p>B.不需移动结点，只需改变结点指针</p><p>2-15</p><p>链表不具有的特点是( )。</p><p>A.可随机访问任一个元素</p><h5 id="2-16"><a href="#2-16" class="headerlink" title="2-16"></a>2-16</h5><p>下面关于线性表的叙述中，错误的是____。</p><p>B.线性表采用顺序存储，便于进行插入和删除操作。</p><p>2-17</p><p>单链表L（带头结点）为空的判断条件是____。</p><p>B.L-&gt;next==NULL</p><p>2-18</p><p>在单链表指针为p的结点之后插入指针为s的结点，正确的操作是：（ ）。</p><p>B.s-&gt;next=p-&gt;next;p-&gt;next=s</p><p>2-19</p><p>对于一个头指针为head的带头结点的单链表，判定该表为空表的条件是（ ）</p><p>B.head→next==NULL</p><h5 id="2-20"><a href="#2-20" class="headerlink" title="2-20"></a>2-20</h5><p>设一个链表最常用的操作是在末尾插入结点和删除尾结点，则选用( )最节省时间。</p><p><strong>D.带头结点的双循环链表</strong></p><h4 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h4><p>4-1</p><p>顺序表 - 地址计算</p><p>假设顺序表第 1 个元素的内存地址是 100，每个元素占用 2 字节内存空间，则第 5 个元素的内存地址是 <strong>108</strong></p><p>4-2</p><p>在有n个元素的顺序表中删除任意一个元素所需移动元素的平均次数为 <strong>（n-1)/2</strong></p><p>4-3</p><p>在有n个元素的顺序表中的任意位置插入一个元素所需移动元素的平均次数为 <strong>n/2</strong></p><p>4-4</p><p>在长度为n的顺序表L中将所有值为x的元素替换成y，该算法的时间复杂度为 <strong>O(n)</strong></p><p>4-5</p><p>在顺序表中，逻辑上相邻的元素，其物理位置 <strong>一定</strong> 相邻。在单链表中，逻辑上相邻的元素，其物理位置 <strong>不一定</strong> 相邻。</p><p>4-6</p><p>对于顺序表的插入算法insert_sqlist来说，若以结点移动为标准操作，则插入算法的在最坏情况下的移动次数为 <strong>n</strong> ，时间复杂度是 **O(n)**。在平均情况下的移动次数为 <strong>n/2</strong> ，时间复杂度是 **O(n)**。</p><p>4-7</p><p>线性表L=(a1, a2, … , an)用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是 <strong>(n-1)/2</strong></p><h4 id="程序填空题"><a href="#程序填空题" class="headerlink" title="程序填空题"></a>程序填空题</h4><p>5-1 顺序表删除操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define MAXSIZE 100</span><br><span class="line">typedef int datatype;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    datatype *elem; </span><br><span class="line">    int length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line">int ListDelete_Sq(SqList &amp;L, int i) &#123;</span><br><span class="line">    if ((i &lt; 1) || (i &gt; L.length))</span><br><span class="line">        return ERROR; </span><br><span class="line">    for (int j = i; j &lt;= L.length; j++)</span><br><span class="line">        ; (2&#x27;)</span><br><span class="line">    --L.length; </span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    int i = 0, n,a;</span><br><span class="line">    datatype e;</span><br><span class="line">    L.elem = new datatype[MAXSIZE];</span><br><span class="line">    L.length = 0;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for (i=0;i&lt;n;i++) </span><br><span class="line">        cin &gt;&gt; L.elem[i];</span><br><span class="line">    L.length = i;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    if (ListDelete_Sq(L, a))</span><br><span class="line">        &#123;</span><br><span class="line">            for (i = 0; i &lt; L.length; i++)</span><br><span class="line">                if(i==0)</span><br><span class="line">                 cout  &lt;&lt; L.elem[i];</span><br><span class="line">                else</span><br><span class="line">                 cout  &lt;&lt; &quot; &quot; &lt;&lt; L.elem[i];                </span><br><span class="line">        &#125;</span><br><span class="line">    else</span><br><span class="line">        cout &lt;&lt; &quot;ERROR&quot;;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5-2单链表删除操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">typedef int ElemType;</span><br><span class="line"></span><br><span class="line">typedef struct LNode &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    struct LNode *next; </span><br><span class="line">&#125; LNode, *LinkList; </span><br><span class="line"></span><br><span class="line">void CreateList(LinkList &amp;L, int n) ;//该函数未显示细节 </span><br><span class="line"></span><br><span class="line">int ListDelete_L(LinkList &amp;L, int i) &#123;</span><br><span class="line">    LinkList p, q;</span><br><span class="line">    int j;</span><br><span class="line">    p = L;</span><br><span class="line">    j = 0;</span><br><span class="line">    while((p-&gt;next) &amp;&amp; (j &lt;i)) (2&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!(p-&gt;next) || (j &gt; i - 1))</span><br><span class="line">        return ERROR; </span><br><span class="line">    q = p-&gt;next;  </span><br><span class="line">    p-&gt;next=q-&gt;next;(2&#x27;)</span><br><span class="line">    delete q; </span><br><span class="line">    return OK;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void print(LinkList &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    int flag=1;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    while (p) &#123;</span><br><span class="line">        if(flag)</span><br><span class="line">            cout &lt;&lt; p-&gt;data;</span><br><span class="line">        else</span><br><span class="line">            cout &lt;&lt; &quot; &quot;&lt;&lt; p-&gt;data;</span><br><span class="line">        flag=0;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    ElemType e;</span><br><span class="line">    int length;</span><br><span class="line">    int i;</span><br><span class="line">    cin &gt;&gt; length;</span><br><span class="line">    CreateList(L, length);    </span><br><span class="line">    cin &gt;&gt; i;</span><br><span class="line">    ListDelete_L(L,i);</span><br><span class="line">    print(L);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数题"><a href="#函数题" class="headerlink" title="函数题"></a>函数题</h4><p><strong>6-1 求顺序表最大值 (10 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMax</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> maxi=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span>(maxi&lt;L.elem[i])maxi=L.elem[i];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> maxi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-单链表逆置-10-分"><a href="#6-2-单链表逆置-10-分" class="headerlink" title="6-2 单链表逆置* (10 分)"></a><strong>6-2 单链表逆置* (10 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(NODE *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODE *p,*p1,*p2,*p3;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    p1 = head;</span><br><span class="line">    p1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p2 = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        p2-&gt;next = p1-&gt;next;</span><br><span class="line">        p1-&gt;next = p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6-3 单链表统计正数个数 (6 分)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PositiveInt</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data&gt;<span class="number">0</span>)n++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程题-1"><a href="#编程题-1" class="headerlink" title="编程题"></a>编程题</h4><p><strong>7-1 学生顺序表的建立 (10 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">法一：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">float</span> s1,s2,s3;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">float</span> s1,s2,s3;</span><br><span class="line">    Node *p,*first,*last=<span class="literal">NULL</span>;</span><br><span class="line">    last = <span class="keyword">new</span> Node;</span><br><span class="line">    first = last;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id&gt;&gt;name&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3;</span><br><span class="line">        p = <span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;id = id;</span><br><span class="line">        p-&gt;name = name;</span><br><span class="line">        p-&gt;s1 = s1;</span><br><span class="line">        p-&gt;s2 = s2;</span><br><span class="line">        p-&gt;s3 = s3;</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">        last = p;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p = first-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;id&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">1</span>)&lt;&lt;p-&gt;name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p-&gt;s1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p-&gt;s2&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p-&gt;s3&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">法二：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Students</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ID;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">double</span> score1;</span><br><span class="line"><span class="keyword">double</span> score2;</span><br><span class="line"><span class="keyword">double</span> score3;</span><br><span class="line"></span><br><span class="line">&#125;students[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;students[i].ID&gt;&gt;students[i].name&gt;&gt;students[i].score1&gt;&gt;students[i].score2&gt;&gt;students[i].score3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>.precision(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;students[i].ID&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;students[i].name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;fixed&lt;&lt;students[i].score1&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;fixed&lt;&lt;students[i].score2&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;fixed&lt;&lt;students[i].score3;</span><br><span class="line"><span class="keyword">if</span>(i!=n<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-2-求两个一元多项式的和-20-分"><a href="#7-2-求两个一元多项式的和-20-分" class="headerlink" title="7-2 求两个一元多项式的和 (20 分)"></a><strong>7-2 求两个一元多项式的和 (20 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">法一：链表</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> coef,<span class="built_in">exp</span>;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,coef,<span class="built_in">exp</span>;</span><br><span class="line">    Node *p,*p1,*q,*q1,*temp;</span><br><span class="line">    Node *first1,*first2,*last;</span><br><span class="line">    last = <span class="keyword">new</span> Node;</span><br><span class="line">    first1=last;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;coef&gt;&gt;<span class="built_in">exp</span>;</span><br><span class="line">        p=<span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;coef = coef;</span><br><span class="line">        p-&gt;<span class="built_in">exp</span> = <span class="built_in">exp</span>;</span><br><span class="line">        last-&gt;next=p;</span><br><span class="line">        last = p;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    last = <span class="keyword">new</span> Node;</span><br><span class="line">    first2=last;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;coef&gt;&gt;<span class="built_in">exp</span>;</span><br><span class="line">        p=<span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;coef = coef;</span><br><span class="line">        p-&gt;<span class="built_in">exp</span> = <span class="built_in">exp</span>;</span><br><span class="line">        last-&gt;next=p;</span><br><span class="line">        last = p;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    p=first1-&gt;next;</span><br><span class="line">    p1=first1;</span><br><span class="line">    q=first2-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;<span class="built_in">exp</span>&gt;q-&gt;<span class="built_in">exp</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;<span class="built_in">exp</span>&lt;q-&gt;<span class="built_in">exp</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp=q-&gt;next;</span><br><span class="line">            p1-&gt;next=q;</span><br><span class="line">            q-&gt;next=p;</span><br><span class="line">            q = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;coef+=q-&gt;coef;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;coef==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p1-&gt;next=p-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> p;</span><br><span class="line">                p=p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">                p1=p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)p1-&gt;next=q;</span><br><span class="line"></span><br><span class="line">    p=first1-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;p-&gt;coef&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p-&gt;<span class="built_in">exp</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;coef&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p-&gt;<span class="built_in">exp</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">法二：数组</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,coef,<span class="built_in">exp</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;coef&gt;&gt;<span class="built_in">exp</span>;</span><br><span class="line">        a[<span class="built_in">exp</span>]=coef;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;coef&gt;&gt;<span class="built_in">exp</span>;</span><br><span class="line">        a[<span class="built_in">exp</span>]+=coef;</span><br><span class="line">    &#125;</span><br><span class="line">    n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1000</span>;i&gt;<span class="number">-1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i;</span><br><span class="line">            n=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i])</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">if</span>(n)<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7-3 两个有序链表合并（新表不含重复元素） (20 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line">法一：刘俊兄弟的代码……emm……</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>], b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> flog = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> lengtha = <span class="number">0</span>, lengthb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (flog)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">-1</span>)</span><br><span class="line">flog = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[lengtha++] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flog = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (flog)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">-1</span>)</span><br><span class="line">flog = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b[lengthb++] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lengtha ; i &lt; lengtha + lengthb; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = b[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lengtha + lengthb == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n = lengtha + lengthb;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)    <span class="comment">//冒泡循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)<span class="comment">//从i后的一个元素一直往len-1位置寻找</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] == a[i])    <span class="comment">//如果发现重复</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; n; k++)<span class="comment">//j+1的位置到len-1的位置</span></span><br><span class="line">&#123;</span><br><span class="line">a[k - <span class="number">1</span>] = a[k];    <span class="comment">//将后面的数依次赋值给前一个位置</span></span><br><span class="line">&#125;</span><br><span class="line">n--;    <span class="comment">//数组长度-1</span></span><br><span class="line">j--;    <span class="comment">//重复点再次进行查重</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[n - <span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">法二：数组</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> a2[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        a1[n++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        a1[n++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mini=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a1[mini]&gt;a1[j])mini=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mini!=i)swap(a1[mini],a1[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a1[i]==flag)a1[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> flag = a1[i];<span class="comment">//?</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a1[i])</span><br><span class="line">            a2[n1++]=a1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a2[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a2[n1 - <span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">法三：链表</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,flag=<span class="number">-1</span>;</span><br><span class="line">    Node *first1,*first2,*first3,*p,*p1,*p2,*last;</span><br><span class="line">    last=<span class="keyword">new</span> Node;</span><br><span class="line">    first1 = last;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == flag)<span class="keyword">continue</span>;</span><br><span class="line">        p = <span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;data = x;</span><br><span class="line">        flag = x;</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">        last = p;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    last=<span class="keyword">new</span> Node;</span><br><span class="line">    first2 = last;</span><br><span class="line">    flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == flag)<span class="keyword">continue</span>;</span><br><span class="line">        p = <span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;data = x;</span><br><span class="line">        flag = x;</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">        last = p;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">    last = <span class="keyword">new</span> Node;</span><br><span class="line">    first3 = last;</span><br><span class="line">    p1 = first1-&gt;next;</span><br><span class="line">    p2 = first2-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>||p2!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p1!=<span class="literal">NULL</span>&amp;&amp;p2!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p2-&gt;data&gt;p1-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p= <span class="keyword">new</span> Node;</span><br><span class="line">                p-&gt;data = p1-&gt;data;</span><br><span class="line">                last-&gt;next = p;</span><br><span class="line">                last = p;</span><br><span class="line">                p1=p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p2-&gt;data&lt;p1-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p= <span class="keyword">new</span> Node;</span><br><span class="line">                p-&gt;data = p2-&gt;data;</span><br><span class="line">                last-&gt;next = p;</span><br><span class="line">                last = p;</span><br><span class="line">                p2=p2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p2-&gt;data==p1-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p= <span class="keyword">new</span> Node;</span><br><span class="line">                p-&gt;data = p2-&gt;data;</span><br><span class="line">                last-&gt;next = p;</span><br><span class="line">                last = p;</span><br><span class="line">                p2=p2-&gt;next;</span><br><span class="line">                p1=p1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p2==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p= <span class="keyword">new</span> Node;</span><br><span class="line">            p-&gt;data = p1-&gt;data;</span><br><span class="line">            last-&gt;next = p;</span><br><span class="line">            last = p;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p1==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p= <span class="keyword">new</span> Node;</span><br><span class="line">            p-&gt;data = p2-&gt;data;</span><br><span class="line">            last-&gt;next = p;</span><br><span class="line">            last = p;</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    p= first3-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NULL&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>7-4 在有序链表中插入数据 (20 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    Node *p,*p2,*p1,*first,*last=<span class="keyword">new</span> Node;</span><br><span class="line">    first=last;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        p = <span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;data = x;</span><br><span class="line">        last-&gt;next = p;</span><br><span class="line">        last = p;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">    p1 = first-&gt;next;</span><br><span class="line">    p2 = first;</span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == p1-&gt;data)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;p1-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            p = <span class="keyword">new</span> Node;</span><br><span class="line">            p-&gt;data = x;</span><br><span class="line">            p-&gt;next = p1;</span><br><span class="line">            p2-&gt;next = p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;p1-&gt;data&amp;&amp;(p1-&gt;next==<span class="literal">NULL</span>||x&lt;p1-&gt;next-&gt;data))</span><br><span class="line">        &#123;</span><br><span class="line">             p = <span class="keyword">new</span> Node;</span><br><span class="line">             p-&gt;data = x;</span><br><span class="line">             p-&gt;next = p1-&gt;next;</span><br><span class="line">             p1-&gt;next = p;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">        p2 = p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(first-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;data = x;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        first-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    p = first-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第三章-栈和列表"><a href="#第三章-栈和列表" class="headerlink" title="第三章 栈和列表"></a>第三章 栈和列表</h3><h4 id="判断题（错题：1-10）"><a href="#判断题（错题：1-10）" class="headerlink" title="判断题（错题：1-10）"></a>判断题（错题：1-10）</h4><p>1-1 </p><p>若一个栈的输入序列为1，2，3，…，<em>N</em>，输出序列的第一个元素是<em>i</em>，则第<em>j</em>个输出元素是<em>j</em>−<em>i</em>−1。F</p><p>1-2 </p><p>所谓“循环队列”是指用单向循环链表或者循环数组表示的队列。F</p><p>1-3 </p><p>在对不带头结点的链队列作出队操作时，不会改变头指针的值。F</p><p>1-4 </p><p>不论是入队列操作还是入栈操作,在顺序存储结构上都需要考虑”溢出”情况。T</p><p>1-5 </p><p>队列和栈都是运算受限的线性表，只允许在表的两端进行运算。F</p><p>1-6</p><p>栈和队列的存储方式，既可以是顺序方式，也可以是链式方式。T</p><p>1-7</p><p>循环队列也存在着空间溢出问题。T</p><p>1-8</p><p>循环队列执行出队操作时会引起大量元素的移动。F</p><p>1-9</p><p>栈是插入和删除只能在一端进行的线性表；队列是插入在一端进行，删除在另一端进行的线性表。T</p><p>1-10</p><p>在n个元素连续进栈以后，它们的出栈顺序和进栈顺序一定正好相反。<strong>T</strong></p><p>1-11</p><p>环形队列中有多少个元素可以根据队首指针和队尾指针的值来计算。T</p><p>1-12</p><p>栈和队列的插入和删除操作特殊，所以，栈和队列是非线性结构。F</p><p>1-13</p><p>序列{1,2,3,4,5}依次入栈，则不可能得到{3,4,1,2,5}的出栈序列。 T</p><p>1-14</p><p>队列中允许插入的一端叫队头，允许删除的一端叫队尾。F</p><h4 id="单选题（错题：2-2、2-18）"><a href="#单选题（错题：2-2、2-18）" class="headerlink" title="单选题（错题：2-2、2-18）"></a>单选题（错题：2-2、2-18）</h4><p>2-1</p><p>若用大小为6的数组来实现循环队列，且当前<code>front</code>和<code>rear</code>的值分别为0和4。当从队列中删除两个元素，再加入两个元素后，<code>front</code>和<code>rear</code>的值分别为多少？</p><p>A.2和0</p><h5 id="2-2"><a href="#2-2" class="headerlink" title="2-2"></a>2-2</h5><p>如果循环队列用大小为<code>m</code>的数组表示，且用队头指针<code>front</code>和队列元素个数<code>size</code>代替一般循环队列中的<code>front</code>和<code>rear</code>指针来表示队列的范围，那么这样的循环队列可以容纳的元素个数最多为：</p><p><strong>B.m</strong></p><p>2-3</p><p>以下数据结构中，（ ）是非线性数据结构。</p><p>A.树</p><p>2-4</p><p>设栈S和队列Q的初始状态均为空，元素{1, 2, 3, 4, 5, 6, 7}依次进入栈S。若每个元素出栈后立即进入队列Q，且7个元素出队的顺序是{2, 5, 6, 4, 7, 3, 1}，则栈S的容量至少是：</p><p>D.4</p><p>2-5</p><p>线性表、堆栈、队列的主要区别是什么？</p><p>B.堆栈和队列都是插入、删除受到约束的线性表</p><p>2-6</p><p>栈和队列的共同点( )。</p><p>C.只允许在端点处插入和删除元素</p><p>2-7</p><p>下列关于线性表,栈和队列叙述,错误的是( )。</p><p>A.线性表是给定的n(n必须大于零)个元素组成的序列</p><p>2-8</p><p>设用一个数组A[1……N]来存储一个栈，令A[N]为栈底，用整型变量T指示当前栈顶位置，A[T]为栈顶元素。当从栈中弹出一个元素时，变量T的变化为（ ）。</p><p>A.T=T+1</p><p>2-9</p><p>链式栈与顺序栈相比，一个比较明显的优点是（ ）。</p><p>B.通常不会出现栈满的情况</p><p>2-10</p><p>(neuDS)在循环顺序队列中，假设以少用一个存储单元的方法来区分队列判满和判空的条件，front和rear分别为队首和队尾指针，它们分别指向队首元素和队尾元素的下一个存储单元，队列的最大存储容量为maxSize，则队列的长度是（ ）。</p><p>C.(rear-front+maxSize)%maxSize</p><p>2-11</p><p>(nueDS_C++)设栈S和队列Q的初始状态为空，元素e1、e2、e3、e4、e5、e6依次通过栈S，一个元素出栈后即进入队列Q，若6个元素出队的顺序是e2、e4、e3、e6、e5、e1，则栈S的容量至少应该是（　　 ）。<strong>提示：对于栈，可以全进再依次出；也可以进一个出一个；也可以进一部分，出一个，再进一部分；但是出栈之后，不能再入栈</strong>。</p><p>A.3</p><p>2-12</p><p>关于栈和队列的下列说法正确的是（）</p><p>B.栈是后进先出的结构，出栈时除了栈顶元素，其余元素无需移动；</p><p>2-13</p><p>一个栈的入栈序列是a,b,c,d,e，则栈的出栈序列不可能的是（ ）。</p><p>C.dceab</p><p>2-14</p><p>在一个链表表示的队列中， f和r分别指向队列的头和尾。下列哪个操作能正确地将s结点插入到队列中：</p><p>B.r-&gt;next=s; r=s;</p><p>2-15</p><p>栈和队列具有相同的。</p><p>B.逻辑结构</p><p>2-16</p><p>假定利用数组a[n]顺序存储一个栈，用top表示栈顶指针，用top==-1表示栈空，并已知栈未满，当元素x进栈时所执行的操作为（　）。</p><p>C.a[++top]=x</p><p>2-17</p><p>队列的“先进先出”特性是指（　）。</p><p>Ⅰ.最后插入队列中的元素总是最后被删除<br>Ⅱ.当同时进行插入、删除操作时，总是插入操作优先<br>Ⅲ.每当有删除操作时，总要先做一次插入操作<br>Ⅳ.每次从队列中删除的总是最早插入的元素</p><p>B.Ⅰ、Ⅳ</p><h5 id="2-18"><a href="#2-18" class="headerlink" title="2-18"></a>2-18</h5><p>已知循环队列存储在一维数组A[0…n-1]中，且队列非空时front和rear分别指向队头元素和队尾元素。若初始时队列为空，且要求第一个进入队列的元素存储在A[0]处，则初始时front和rear的值分别是（　）。</p><p><strong>B.0,n-1（原因：……）</strong></p><p>2-19</p><p>执行函数时，其局部变量一般采用（　）进行存储。</p><p>C.栈结构</p><p>2-20</p><p>对空栈 <em>S</em> 进行 Push 和 Pop 操作，入栈序列为 a, b, c, d, e，经过 Push, Push, Pop, Push, Pop, Push, Push, Pop 操作后，得到的出栈序列是：</p><p>D.b, c, e</p><p>2-21</p><p>用S表示入栈操作，X表示出栈操作，若元素入栈的顺序为1234，为了得到1342出栈顺序，相应的S和X的操作串为( )。</p><p>D.SXSSXSXX</p><h4 id="填空题（错题：4-3）"><a href="#填空题（错题：4-3）" class="headerlink" title="填空题（错题：4-3）"></a>填空题（错题：4-3）</h4><p>4-1</p><p>栈的运算遵循 <strong>后进先出|先进后出</strong> 的原则。</p><p>4-2</p><p>以下运算实现在链队上的入队列，请在空白处用适当句子予以填充。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(QueptrTp *lq,DataType x)</span></span>&#123;</span><br><span class="line">       LqueueTp *p;</span><br><span class="line">       p=(LqueueTp *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LqueueTp));</span><br><span class="line">       p-&gt;data=x;(<span class="number">1&#x27;</span>)</span><br><span class="line">       p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">       (lq-&gt;rear)-&gt;next=p;(<span class="number">1&#x27;</span>)</span><br><span class="line">       lq-&gt;rear=p;(<span class="number">1&#x27;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>4-3</p><p>以下运算实现在链栈上的初始化，请在空白处用请适当句子予以填充。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  DataType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode,*LStackTp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(LStackTp &amp;ls)</span></span>&#123; ls=<span class="literal">NULL</span>;&#125;。(<span class="number">1&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="函数题-1"><a href="#函数题-1" class="headerlink" title="函数题"></a>函数题</h4><h5 id="6-3-jmu-ds-舞伴问题-20-分"><a href="#6-3-jmu-ds-舞伴问题-20-分" class="headerlink" title="6-3 jmu-ds-舞伴问题 (20 分)"></a><strong>6-3 jmu-ds-舞伴问题 (20 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLen</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q-&gt;rear-Q-&gt;front+MAXQSIZE)%MAXQSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, Person e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q-&gt;rear = (Q-&gt;rear+<span class="number">1</span>)%MAXQSIZE;</span><br><span class="line">    Q-&gt;data[Q-&gt;rear] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;rear==Q-&gt;front)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, Person &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q-&gt;front = (Q-&gt;front+<span class="number">1</span>)%MAXQSIZE;</span><br><span class="line">    e = Q-&gt;data[Q-&gt;front];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DancePartner</span><span class="params">(Person dancer[], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dancer[i].sex==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">            <span class="built_in">EnQueue</span>(Mdancers,dancer[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">EnQueue</span>(Fdancers,dancer[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">QueueEmpty</span>(Mdancers)&amp;&amp;!<span class="built_in">QueueEmpty</span>(Fdancers))</span><br><span class="line">    &#123;</span><br><span class="line">        Person x,y;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Mdancers,x);</span><br><span class="line">        <span class="built_in">DeQueue</span>(Fdancers,y);</span><br><span class="line">        cout&lt;&lt;y.name&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;x.name&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>6-4 十进制转二进制（顺序栈设计和应用） (10 分)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素x入栈 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//if(x==MaxSize)cout&lt;&lt;&quot;上溢&quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//else </span></span><br><span class="line">     mystack[++top]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取栈顶元素 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mystack[top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除栈顶元素 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程题-2"><a href="#编程题-2" class="headerlink" title="编程题"></a>编程题</h4><h5 id="7-1-银行业务队列简单模拟-25-分"><a href="#7-1-银行业务队列简单模拟-25-分" class="headerlink" title="7-1 银行业务队列简单模拟 (25 分)"></a><strong>7-1 银行业务队列简单模拟 (25 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> flag1=<span class="number">0</span>,flag2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> top1=<span class="number">0</span>,top2=<span class="number">0</span>,top=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> a1[n+<span class="number">1</span>],a2[n+<span class="number">1</span>],a[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;arr[i];</span><br><span class="line">        <span class="keyword">if</span>(arr[i]%<span class="number">2</span>!=<span class="number">0</span>)a1[top1++]=arr[i];</span><br><span class="line">        <span class="keyword">else</span> a2[top2++]=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t1=<span class="number">0</span>,t2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]%<span class="number">2</span>==<span class="number">0</span>)flag2++;</span><br><span class="line">        <span class="keyword">else</span> flag1++;</span><br><span class="line">        <span class="keyword">if</span>(flag2%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;flag1%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[top++]=a1[t1++];</span><br><span class="line">            a[top++]=a1[t1++];</span><br><span class="line">            a[top++]=a2[t2++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(t1!=top1&amp;&amp;(flag1%<span class="number">2</span>==<span class="number">0</span>||t2==top2))</span><br><span class="line">        &#123;</span><br><span class="line">            a[top++]=a1[t1++];</span><br><span class="line">            a[top++]=a1[t1++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t2!=top2&amp;&amp;(flag2%<span class="number">2</span>==<span class="number">0</span>||t1==top1||flag1%<span class="number">2</span>==<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            a[top++]=a2[t2++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(top==n)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;a[n<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7-2 堆栈操作合法性 (20 分)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">int</span> n,x=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;str;</span><br><span class="line">        n = str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[j]==<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x++;</span><br><span class="line">                <span class="keyword">if</span>(x&gt;M)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[j]==<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x--;</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>)cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">        x=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四章-串和数组"><a href="#第四章-串和数组" class="headerlink" title="第四章 串和数组"></a>第四章 串和数组</h3><h4 id="判断题-1"><a href="#判断题-1" class="headerlink" title="判断题"></a>判断题</h4><p>1-1</p><p>假设模式串是<code>abababaab</code>，则<a href="https://blog.csdn.net/Zhang_2002_GZ/article/details/121040983">KMP模式匹配算法</a>中的next[j] = <code>0 1 1 2 3 4 5 6 2</code>。T</p><h4 id="选择题-错题：2-3-2-6-2-9-2-13"><a href="#选择题-错题：2-3-2-6-2-9-2-13" class="headerlink" title="选择题(错题：2-3,2-6,2-9,2-13)"></a>选择题(错题：2-3,2-6,2-9,2-13)</h4><p>2-1</p><p>KMP算法下，长为n的字符串匹配长度为m的字串的<a href="https://www.nowcoder.com/questionTerminal/1fb3b5b14603400c9f053202c5a629f4?source=relative">时间复杂度</a>为</p><p>B.O（M+N）</p><p>2-2</p><p>串的长度是指</p><p>B.串中所含字符的个数</p><h5 id="2-3"><a href="#2-3" class="headerlink" title="2-3"></a>2-3</h5><p>设主串 T = <code>abaabaabcabaabc</code>，模式串 S = <code>abaabc</code>，采用 KMP 算法进行模式匹配，到匹配成功时为止，在匹配过程中进行的单个字符间的比较次数是：</p><p><strong>B.10（6+4）</strong></p><p>2-4</p><p>串“ababaaababaa”的next数组为（ ）。</p><p>C.011234223456</p><p>2-5</p><p>已知字符串S为“abaabaabacacaabaabcc”，模式串t为“abaabc”。采用KMP算法进行匹配，第一次出现“失配”(s[i]≠t[j])时，i=j=5，则下次开始匹配时，i和j的值分别是()。</p><p>C.i=5,j=2</p><h5 id="2-6"><a href="#2-6" class="headerlink" title="2-6"></a>2-6</h5><p>2 符号串abcde的<a href="https://blog.csdn.net/Shrimp_millet/article/details/93660937">子串</a>共有：</p><p><strong>C.16（1+2+3+4+5+1(空串)）</strong></p><p>[^长度为n的字符串]: 1、有n(n+1)/2 +1个子串；2、非空子串：n（n+1）/2；3、非空真子串：n（n+1）/2– 1</p><p>2-7</p><p>适用于压缩存储稀疏矩阵的两种存储结构是：</p><p>A.三元组表和十字链表</p><p>2-8</p><p>(neuDS)以下( )是稀疏矩阵的一种存储方法。</p><p>A.十字链表</p><h5 id="2-9"><a href="#2-9" class="headerlink" title="2-9"></a>2-9</h5><p>一个稀疏矩阵采用压缩后，和直接采用二维数组存储相比会失去（ ） 特性。</p><p><strong>B.随机存取</strong></p><p>2-10</p><p>对特殊矩阵采用压缩存储的主要目的是（　）。</p><p>D.减少不必要的存储空间</p><p>2-11</p><p>对n阶对称矩阵压缩存储时，需要表长为（　）的顺序表。</p><p>C.n(n+1)/2</p><p>2-12</p><p>顺序查找法适合于存储结构为（ ）的线性表。</p><p>B.顺序存储或链式存储</p><h5 id="2-13-1"><a href="#2-13-1" class="headerlink" title="2-13"></a>2-13</h5><p>（SWPU-DS）设有一个 10 阶的对称矩阵 A，采用压缩存储方式，以行序为主存储，a[1, 1] 为第一元素，其存储地址为 1，每个元素占一个地址空间，则 a[8, 5] 的地址为（ ）。</p><p>*<em>C.33（对称矩阵：(7+1)<em>7/2+5)）</em></em></p><h3 id="第五章-树和二叉树"><a href="#第五章-树和二叉树" class="headerlink" title="第五章 树和二叉树"></a>第五章 树和二叉树</h3><h4 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h4><p>2-1</p><p>设一棵非空完全二叉树 <em>T</em> 的所有叶节点均位于同一层，且每个非叶结点都有 2 个子结点。若 <em>T</em> 有 <em>k</em> 个叶结点，则 <em>T</em> 的结点总数是：</p><p>A.2<em>k</em>−1</p><p>2-2</p><p>已知字符集{ a, b, c, d, e, f }，若各字符出现的次数分别为{ 6, 3, 8, 2, 10, 4 }，则对应字符集中各字符的哈夫曼编码可能是：</p><p>A.00, 1011, 01, 1010, 11, 100</p><p>2-3</p><p>已知二叉树的先序遍历序列为ABCDEFGH，中序遍历序列为CBEDFAGH，则该二叉树形态中，父节点的右子节点为（）。</p><p>C.G</p><h5 id="2-4"><a href="#2-4" class="headerlink" title="2-4"></a>2-4</h5><p>若将一棵树 <em>T</em> 转化为对应的二叉树 <em>BT</em>，则下列对 <em>BT</em> 的遍历中，其遍历序列与 <em>T</em> 的后根遍历序列相同的是：</p><p>B.中序遍历</p><h5 id="2-5"><a href="#2-5" class="headerlink" title="2-5"></a><a href="https://its401.com/article/qq_20156289/106674292">2-5</a></h5><p>对 <em>n</em> 个互不相同的符号进行哈夫曼编码。若生成的哈夫曼树共有 115 个结点，则 <em>n</em> 的值是：</p><p>C.58</p><p>2-6</p><p>设 T 是非空二叉树，若 T 的先序遍历和中序遍历序列相同，则 T 的形态是 __</p><p>D.所有结点只有右孩子</p><h5 id="2-7"><a href="#2-7" class="headerlink" title="2-7"></a>2-7</h5><p>以二叉链表作为二叉树的存储结构，在具有 <em>n</em> 个结点的二叉链表中（<em>n</em>&gt;0），空链域的个数为 __</p><p>A.<em>n</em>+1</p><p>2-8</p><p>已知二叉树的前序遍历序列为 ABDCEFG，中序遍历序列为 DBCAFEG，则后序遍历序列为 __</p><p>B.DCBFGEA</p><p>2-9</p><p>对于任意一棵高度为 5 且有 10 个结点的二叉树，若采用顺序存储结构保存，每个结点占 1 个存储单元（仅存放结点的数据信息），则存放该二叉树需要的存储单元的数量至少是：</p><p>A.31</p><h5 id="2-10-1"><a href="#2-10-1" class="headerlink" title="2-10"></a>2-10</h5><p>已知森林 <em>F</em> 及与之对应的二叉树 <em>T</em>，若 <em>F</em> 的先根遍历序列是 a, b, c, d, e, f，后根遍历序列是 b, a, d, f, e, c，则 <em>T</em> 的后序遍历序列是：</p><p>C.b, f, e, d, c, a</p><h4 id="填空题-1"><a href="#填空题-1" class="headerlink" title="填空题"></a>填空题</h4><p>4-1</p><p>已知一棵完全二叉树的第5层（设根为第1层）有8个叶结点，则该完全二叉树的结点个数最多是：47</p><p>4-2</p><p>一棵二叉树的前序遍历序列是<code>ABDFECGHK</code>，中序遍历序列是<code>DBEFAGHCK</code>，则它的后序遍历序列是 DEFBHGKCA</p><h5 id="4-3"><a href="#4-3" class="headerlink" title="4-3"></a>4-3</h5><p>具有n个结点的二叉树中,一共有 2n 个指针域,其中只有 n-1 个用来指向结点的左右孩子，其余的 n+1 个指针域为NULL。</p><p>4-4</p><p>若以{4，5，6，7，8}作为叶子结点的权值构造哈夫曼树，则其带权路径长度是 69</p><h4 id="程序填空题-1"><a href="#程序填空题-1" class="headerlink" title="程序填空题"></a>程序填空题</h4><p>5-2</p><p>下列代码的功能是将二叉树<code>T</code>中的结点按照层序遍历的顺序输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Tree</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">int</span> Key;</span><br><span class="line">   Tree  Left;</span><br><span class="line">   Tree  Right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Level_order</span> <span class="params">( Tree T )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Queue Q;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ( !T ) <span class="keyword">return</span>; </span><br><span class="line">   Q = <span class="built_in">CreateQueue</span>( MaxElements ); </span><br><span class="line">   <span class="built_in">Enqueue</span>( T, Q ); </span><br><span class="line">   <span class="keyword">while</span> ( !<span class="built_in">IsEmpty</span>( Q ) )&#123;</span><br><span class="line">      T = <span class="built_in">Front_Dequeue</span> ( Q ); <span class="comment">/* return the front element and delete it from Q */</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, T-&gt;Key);</span><br><span class="line">      <span class="keyword">if</span> ( T-&gt;Left ) </span><br><span class="line">         <span class="built_in">Enqueue</span>( T-&gt;Left)<span class="number">3</span>分;</span><br><span class="line">      <span class="keyword">if</span> (T-&gt;Right <span class="number">3</span>分 ) </span><br><span class="line">         <span class="built_in">Enqueue</span>( T-&gt;Right)<span class="number">3</span>分;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5-3</p><p>下列代码的功能是计算给定二叉树<code>T</code>的宽度。二叉树的宽度是指各层结点数的最大值。函数<code>Queue_rear</code>和<code>Queue_front</code>分别返回当前队列<code>Q</code>中队尾和队首元素的位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">BinTree</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">int</span> Key;</span><br><span class="line">   BinTree  Left;</span><br><span class="line">   BinTree  Right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Width</span><span class="params">( BinTree T )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   BinTree  p;</span><br><span class="line">   Queue Q;</span><br><span class="line">   <span class="keyword">int</span> Last, temp_width, max_width;</span><br><span class="line"></span><br><span class="line">   temp_width = max_width = <span class="number">0</span>;</span><br><span class="line">   Q = <span class="built_in">CreateQueue</span>(MaxElements);</span><br><span class="line">   Last = <span class="built_in">Queue_rear</span>(Q);</span><br><span class="line">   <span class="keyword">if</span> ( T == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Enqueue</span>(T, Q);</span><br><span class="line">      <span class="keyword">while</span> (!<span class="built_in">IsEmpty</span>(Q)) &#123;</span><br><span class="line">         p = <span class="built_in">Front_Dequeue</span>(Q); </span><br><span class="line">         temp_width++<span class="number">3</span>分; </span><br><span class="line">         <span class="keyword">if</span> ( p-&gt;Left != <span class="literal">NULL</span> )  <span class="built_in">Enqueue</span>(p-&gt;Left, Q);</span><br><span class="line">         <span class="keyword">if</span> ( p-&gt;Right != <span class="literal">NULL</span> ) <span class="built_in">Enqueue</span> (p-&gt;Right)<span class="number">3</span>分; </span><br><span class="line">         <span class="keyword">if</span> ( <span class="built_in">Queue_front</span>(Q) &gt; Last ) &#123;</span><br><span class="line">            Last = <span class="built_in">Queue_rear</span>(Q);</span><br><span class="line">            <span class="keyword">if</span> ( temp_width &gt; max_width ) max_width = temp_width;</span><br><span class="line">            temp_width=<span class="number">0</span> <span class="number">3</span>分;</span><br><span class="line">         &#125; <span class="comment">/* end-if */</span></span><br><span class="line">      &#125; <span class="comment">/* end-while */</span></span><br><span class="line">      <span class="keyword">return</span>  max_width;</span><br><span class="line">   &#125; <span class="comment">/* end-else */</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="函数题-2"><a href="#函数题-2" class="headerlink" title="函数题"></a>函数题</h4><h5 id="6-1-求二叉树高度-20-分"><a href="#6-1-求二叉树高度-20-分" class="headerlink" title="6-1 求二叉树高度 (20 分)"></a><strong>6-1 求二叉树高度 (20 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHeight</span><span class="params">( BinTree BT )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> LH,RH;</span><br><span class="line">    <span class="keyword">if</span>(!BT)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        LH = <span class="built_in">GetHeight</span>(BT-&gt;Left);</span><br><span class="line">        RH = <span class="built_in">GetHeight</span>(BT-&gt;Right);</span><br><span class="line">        <span class="keyword">return</span> LH&gt;RH?++LH:++RH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-二叉树的遍历-25-分"><a href="#6-2-二叉树的遍历-25-分" class="headerlink" title="6-2 二叉树的遍历 (25 分)"></a><strong>6-2 二叉树的遍历 (25 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTraversal</span><span class="params">( BinTree BT )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!BT)<span class="keyword">return</span>;</span><br><span class="line">    InorderTraversal(BT-&gt;Left);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,BT-&gt;Data);</span><br><span class="line">    InorderTraversal(BT-&gt;Right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreorderTraversal</span><span class="params">( BinTree BT )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!BT)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,BT-&gt;Data);</span><br><span class="line">    PreorderTraversal(BT-&gt;Left);</span><br><span class="line">    PreorderTraversal(BT-&gt;Right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostorderTraversal</span><span class="params">( BinTree BT )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!BT)<span class="keyword">return</span>;</span><br><span class="line">    PostorderTraversal(BT-&gt;Left);</span><br><span class="line">    PostorderTraversal(BT-&gt;Right);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,BT-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelorderTraversal</span><span class="params">( BinTree BT )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!BT)<span class="keyword">return</span>;</span><br><span class="line">    BinTree que[<span class="number">101</span>],t;</span><br><span class="line">    <span class="keyword">int</span> first=<span class="number">0</span>,rear=<span class="number">0</span>;</span><br><span class="line">    que[rear++]=BT;</span><br><span class="line">    <span class="keyword">while</span>(first!=rear)</span><br><span class="line">    &#123;</span><br><span class="line">        t=que[first++];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,t-&gt;Data);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;Left)que[rear++]=t-&gt;Left;</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;Right)que[rear++]=t-&gt;Right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-3-先序输出叶结点-15-分"><a href="#6-3-先序输出叶结点-15-分" class="headerlink" title="6-3 先序输出叶结点 (15 分)"></a><strong>6-3 先序输出叶结点 (15 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreorderPrintLeaves</span><span class="params">( BinTree BT )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BT)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!BT-&gt;Left&amp;&amp;!BT-&gt;Right) <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,BT-&gt;Data);</span><br><span class="line">        <span class="built_in">PreorderPrintLeaves</span>(BT-&gt;Left);</span><br><span class="line">        <span class="built_in">PreorderPrintLeaves</span>(BT-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6-4 二叉树的非递归遍历 (25 分)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTraversal</span><span class="params">( BinTree BT )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BinTree T=BT;</span><br><span class="line">    Stack S = <span class="built_in">CreateStack</span>();</span><br><span class="line">    <span class="keyword">while</span>(T||!<span class="built_in">IsEmpty</span>(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Push</span>(S,T);</span><br><span class="line">            T = T-&gt;Left;</span><br><span class="line">        &#125;</span><br><span class="line">        T = <span class="built_in">Pop</span>(S);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,T-&gt;Data);</span><br><span class="line">        T=T-&gt;Right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreorderTraversal</span><span class="params">( BinTree BT )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     BinTree T=BT;</span><br><span class="line">    Stack S = <span class="built_in">CreateStack</span>();</span><br><span class="line">    <span class="keyword">while</span>(T||!<span class="built_in">IsEmpty</span>(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Push</span>(S,T);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,T-&gt;Data);</span><br><span class="line">            T = T-&gt;Left;</span><br><span class="line">        &#125;</span><br><span class="line">        T = <span class="built_in">Pop</span>(S);</span><br><span class="line">        T = T-&gt;Right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostorderTraversal</span><span class="params">( BinTree BT )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BinTree T=BT;</span><br><span class="line">    Stack S = <span class="built_in">CreateStack</span>();</span><br><span class="line">    <span class="keyword">while</span>(T||!<span class="built_in">IsEmpty</span>(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Push</span>(S,T);</span><br><span class="line">            T-&gt;flag=<span class="number">0</span>;</span><br><span class="line">            T = T-&gt;Left;</span><br><span class="line">        &#125;</span><br><span class="line">        T = <span class="built_in">Peek</span>(S);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;flag++;</span><br><span class="line">            T=T-&gt;Right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            T = <span class="built_in">Pop</span>(S);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,T-&gt;Data);</span><br><span class="line">            T = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程题-3"><a href="#编程题-3" class="headerlink" title="编程题"></a>编程题</h4><h5 id="7-1-根据后序和中序遍历输出先序遍历-25-分"><a href="#7-1-根据后序和中序遍历输出先序遍历-25-分" class="headerlink" title="7-1 根据后序和中序遍历输出先序遍历 (25 分)"></a><strong>7-1 根据后序和中序遍历输出先序遍历 (25 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Node* <span class="title">Creat</span><span class="params">(<span class="keyword">int</span> *Post,<span class="keyword">int</span> *In,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    Node *p=<span class="keyword">new</span> Node;</span><br><span class="line">    p-&gt;data = *(Post+n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span>(*(In+len)!=p-&gt;data)len++;</span><br><span class="line">    p-&gt;left=Creat(Post,In,len);</span><br><span class="line">    p-&gt;right=Creat(Post+len,In+len+<span class="number">1</span>,n-len<span class="number">-1</span>);<span class="comment">//右子树……emmm……记住吧……</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Preorder</span><span class="params">(Node *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;t-&gt;data;</span><br><span class="line">    Preorder(t-&gt;left);</span><br><span class="line">    Preorder(t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> a[n],b[n];</span><br><span class="line">    Node *t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">    t=Creat(a,b,n);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Preorder:&quot;</span>;</span><br><span class="line">    Preorder(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-2-玩转二叉树-25-分"><a href="#7-2-玩转二叉树-25-分" class="headerlink" title="7-2 玩转二叉树 (25 分)"></a><strong>7-2 玩转二叉树 (25 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Node* <span class="title">creat</span><span class="params">(<span class="keyword">int</span> *In,<span class="keyword">int</span> *Pre,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*(In+len)!=*Pre)len++;</span><br><span class="line">    Node *p=<span class="keyword">new</span> Node;</span><br><span class="line">    p-&gt;data=*(In+len);</span><br><span class="line">    p-&gt;left=creat(In,Pre+<span class="number">1</span>,len);</span><br><span class="line">    p-&gt;right=creat(In+len+<span class="number">1</span>,Pre+len+<span class="number">1</span>,n-len<span class="number">-1</span>);<span class="comment">//n-len-1我也不清楚……</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Level</span><span class="params">(Node *t,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> first=<span class="number">0</span>,last=<span class="number">0</span>,i;</span><br><span class="line">    Node* Q[n],*w;</span><br><span class="line">    Q[last++]=t;</span><br><span class="line">    <span class="keyword">while</span>(last!=first)</span><br><span class="line">    &#123;</span><br><span class="line">        w=Q[first++];</span><br><span class="line">        <span class="comment">//镜面也可以看做先右子树再左子树</span></span><br><span class="line">        <span class="keyword">if</span>(w-&gt;right)Q[last++]=w-&gt;right;</span><br><span class="line">        <span class="keyword">if</span>(w-&gt;left)Q[last++]=w-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Q[i]-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Q[i]-&gt;data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> In[n],Pre[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;In[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;Pre[i];</span><br><span class="line">    Node* t=creat(In,Pre,n);</span><br><span class="line">    Level(t,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>7-3 树的遍历 (25 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *left,*right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Node* <span class="title">creat</span><span class="params">(<span class="keyword">int</span>* In,<span class="keyword">int</span>* Post,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*(In+len)!= *(Post+n<span class="number">-1</span>))len++;</span><br><span class="line">    Node *p=<span class="keyword">new</span> Node;</span><br><span class="line">    p-&gt;data=In[len];</span><br><span class="line">    p-&gt;left=creat(In,Post,len);</span><br><span class="line">    p-&gt;right=creat(In+len+<span class="number">1</span>,Post+len,n-len<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Level</span><span class="params">(Node* t,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last=<span class="number">0</span>,first=<span class="number">0</span>,i;</span><br><span class="line">    Node* Q[n],*w;</span><br><span class="line">    Q[last++]=t;</span><br><span class="line">    <span class="keyword">while</span>(last!=first)</span><br><span class="line">    &#123;</span><br><span class="line">        w=Q[first++];</span><br><span class="line">        <span class="keyword">if</span>(w-&gt;left)Q[last++]=w-&gt;left;</span><br><span class="line">        <span class="keyword">if</span>(w-&gt;right)Q[last++]=w-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Q[i]-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Q[i]-&gt;data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> In[n],Post[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;Post[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;In[i];</span><br><span class="line">    Node* t=creat(In,Post,n);</span><br><span class="line">    Level(t,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>7-4 哈夫曼编码 (30 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>7-5 二叉搜索树的最近公共祖先 (30 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第六章-图"><a href="#第六章-图" class="headerlink" title="第六章 图"></a>第六章 图</h3><h4 id="判断题-2"><a href="#判断题-2" class="headerlink" title="判断题"></a>判断题</h4><p>1-1</p><p>无向连通图所有顶点的度之和为偶数。T</p><h5 id="1-2-1"><a href="#1-2-1" class="headerlink" title="1-2"></a>1-2</h5><p>无向连通图至少有一个顶点的度为1。F</p><p>1-3</p><p>用邻接矩阵法存储图，占用的存储空间数只与图中结点个数有关，而与边数无关。T</p><p>1-4</p><p>在一个有向图中，所有顶点的入度与出度之和等于所有边之和的2倍。T</p><h5 id="1-5"><a href="#1-5" class="headerlink" title="1-5"></a>1-5</h5><p>如果无向图G必须进行两次广度优先搜索才能访问其所有顶点，则G中一定有回路。F</p><h5 id="1-6"><a href="#1-6" class="headerlink" title="1-6"></a>1-6</h5><p>在一个有权无向图中，若<code>b</code>到<code>a</code>的最短路径距离是12，且<code>c</code>到<code>b</code>之间存在一条权为2的边，则<code>c</code>到<code>a</code>的最短路径距离一定不小于10。T</p><p>1-7</p><p>用一维数组<code>G[]</code>存储有4个顶点的无向图如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G[] = &#123; 0, 1, 0, 1, 1, 0, 0, 0, 1, 0 &#125;</span><br></pre></td></tr></table></figure><p>则顶点2和顶点0之间是有边的。T</p><p>1-8</p><p>Kruskal 算法是通过每步添加一条边及其相连的顶点到一棵树，从而逐步生成最小生成树。F</p><p>1-9</p><p>Prim 算法是通过每步添加一条边及其相连的顶点到一棵树，从而逐步生成最小生成树。T</p><p>1-10</p><p>若图G有环，则G不存在拓扑排序序列。T</p><p>1-11</p><p>若图G为连通图且不存在拓扑排序序列，则图G必有环。T</p><p>1-12</p><p>P 是顶点 S 到 T 的最短路径，如果该图中的所有路径的权值都加 1，P 仍然是 S 到 T 的最短路径。F</p><p>1-13</p><p>对于带权无向图 G = (V, E)，M 是 G 的最小生成树，则 M 中任意两点 V1 到 V2 的路径一定是它们之间的最短路径。F</p><h5 id="1-14"><a href="#1-14" class="headerlink" title="1-14"></a>1-14</h5><p>如果从有向图 <em>G</em> 的每一点均能通过深度优先搜索遍历到所有其它顶点，那么该图一定不存在拓扑序列。T</p><p>1-15</p><p>如果 <em>e</em> 是有权无向图 <em>G</em> 唯一的一条最短边，那么边 <em>e</em> 一定会在该图的最小生成树上。T</p><h4 id="选择题-1"><a href="#选择题-1" class="headerlink" title="选择题"></a>选择题</h4><h5 id="2-1"><a href="#2-1" class="headerlink" title="2-1"></a>2-1</h5><p>在拓扑排序算法中用堆栈和用队列产生的结果会不同吗？</p><p>(1分)</p><p>A.</p><p>是的肯定不同</p><p>B.</p><p>肯定是相同的</p><p><strong>C.</strong></p><p><strong>有可能会不同</strong></p><p>D.</p><p>以上全不对</p><h5 id="2-2-1"><a href="#2-2-1" class="headerlink" title="2-2"></a>2-2</h5><p>若要检查有向图中有无回路，除了可以利用拓扑排序算法外，下列哪种算法也可以用？</p><p>A.</p><p>Dijkstra算法</p><p>B.</p><p>Prim算法</p><p>C.</p><p>广度优先搜索</p><p><strong>D.</strong></p><p><strong>深度优先搜索</strong></p><h5 id="2-3-1"><a href="#2-3-1" class="headerlink" title="2-3"></a>2-3</h5><p>下图为一个AOV网，其可能的拓扑有序序列为：</p><p><img src="https://images.ptausercontent.com/120" alt="img"></p><p>(2分)</p><p>A.</p><p>ABCDFEG</p><p>B.</p><p>ADFCEBG</p><p>C.</p><p>ACDFBEG</p><p><strong>D.</strong></p><p><strong>ABDCEFG</strong></p><h5 id="2-4-1"><a href="#2-4-1" class="headerlink" title="2-4"></a>2-4</h5><p>下列选项中，不是下图深度优先搜索序列的是：</p><p><img src="https://images.ptausercontent.com/126" alt="img"></p><p>(2分)</p><p>A.</p><p><em>V</em>1, <em>V</em>5, <em>V</em>4, <em>V</em>3, <em>V</em>2</p><p>B.</p><p><em>V</em>1, <em>V</em>3, <em>V</em>2, <em>V</em>5, <em>V</em>4</p><p>C.</p><p><em>V</em>1, <em>V</em>2, <em>V</em>5, <em>V</em>4, <em>V</em>3</p><p><strong>D.</strong></p><p><strong><em>V</em>1, <em>V</em>2, <em>V</em>3, <em>V</em>4, <em>V</em>5</strong></p><p>2-5</p><p>若将<em>n</em>个顶点<em>e</em>条弧的有向图采用邻接表存储，则拓扑排序算法的时间复杂度是：</p><p>(1分)</p><p>A.</p><p><em>O</em>(<em>n</em>)</p><p><strong>B.</strong></p><p><strong><em>O</em>(<em>n</em>+<em>e</em>)</strong></p><p>C.</p><p><em>O</em>(<em>n</em>2)</p><p>D.</p><p><em>O</em>(<em>n</em>×<em>e</em>)</p><p>2-6</p><p>使用迪杰斯特拉（Dijkstra）算法求下图中从顶点1到其他各顶点的最短路径，依次得到的各最短路径的目标顶点是：</p><p><img src="https://images.ptausercontent.com/127" alt="img"></p><p>(2分)</p><p>A.</p><p>5, 2, 3, 4, 6</p><p><strong>B.</strong></p><p><strong>5, 2, 3, 6, 4</strong></p><p>C.</p><p>5, 2, 4, 3, 6</p><p>D.</p><p>5, 2, 6, 3, 4</p><p>2-7</p><p>使用迪杰斯特拉（Dijkstra）算法求下图中从顶点1到其他各顶点的最短路径，依次得到的各最短路径的目标顶点是：</p><p><img src="https://images.ptausercontent.com/ad667c00-6889-433b-bdf2-b1d9a96bec1e.JPG" alt="Dij2.JPG"></p><p>(2分)</p><p><strong>A.</strong></p><p><strong>6, 7, 5, 3, 2, 4</strong></p><p>B.</p><p>6, 2, 5, 7, 3, 4</p><p>C.</p><p>2, 3, 4, 5, 6, 7</p><p>D.</p><p>2, 4, 3, 6, 5, 7</p><h5 id="2-8"><a href="#2-8" class="headerlink" title="2-8"></a>2-8</h5><p>设无向图为 G=(V，E)，其中 V={v1,v2,v3,v4}，E={(v1,v2)，(v3,v4)，(v4,v1)，(v2,v3)，(v1,v3)}。则每个顶点的度依次为：</p><p>(2分)</p><p>A.</p><p>2, 1, 1, 1</p><p>B.</p><p>1, 1, 2, 1</p><p><strong>C.</strong></p><p><strong>3, 2, 3, 2</strong></p><p>D.</p><p>2, 3, 2, 3</p><p>2-9</p><p>对于给定的有向图如下，其逆邻接表为：</p><p><img src="https://images.ptausercontent.com/e122d5ef-767a-423f-82a0-14bbcc18825f.JPG" alt="6-4.JPG"></p><p>(2分)</p><p>A.</p><p><img src="https://images.ptausercontent.com/c1a5c52a-448f-46bb-9c61-5688b7d306b8.JPG" alt="A1.JPG"></p><p>B.</p><p><img src="https://images.ptausercontent.com/a64046f3-222c-4958-8600-e2d020453271.JPG" alt="B1.JPG"></p><p>C.</p><p><img src="https://images.ptausercontent.com/7947c101-35e9-4ceb-9a51-9673c1bf196f.JPG" alt="C1.JPG"></p><p><strong>D.</strong></p><p><img src="https://images.ptausercontent.com/4c3bef68-2151-4262-bc8b-6c40256896e6.JPG" alt="D1.JPG"></p><p>2-10</p><p>已知一个无向图的顶点集为 {<em>V</em>0,<em>V</em>1,⋯,<em>V</em>7}，其邻接矩阵如下所示：</p><p><img src="https://images.ptausercontent.com/78c342db-c3bf-49a0-a3b3-da56609b5390.JPG" alt="6-5.JPG"></p><p>以下哪项<strong>不可能</strong>是从 <em>V</em>0 出发的广度优先遍历序？</p><p>(2分)</p><p>A.</p><p><em>V</em>0,<em>V</em>1,<em>V</em>3,<em>V</em>4,<em>V</em>2,<em>V</em>6,<em>V</em>5,<em>V</em>7</p><p><strong>B.</strong></p><p><strong><em>V</em>0,<em>V</em>3,<em>V</em>1,<em>V</em>4,<em>V</em>2,<em>V</em>6,<em>V</em>5,<em>V</em>7</strong></p><p>C.</p><p><em>V</em>0,<em>V</em>3,<em>V</em>1,<em>V</em>4,<em>V</em>6,<em>V</em>2,<em>V</em>7,<em>V</em>5</p><p>D.</p><p><em>V</em>0,<em>V</em>4,<em>V</em>3,<em>V</em>1,<em>V</em>6,<em>V</em>2,<em>V</em>7,<em>V</em>5</p><p>2-11</p><p>给定一个图的邻接矩阵如下，则从V1出发的宽度优先遍历序列（BFS，有多种选择时小标号优先）是：</p><p><img src="https://images.ptausercontent.com/165b8021-8357-409c-9ba9-b9efa4a88265.JPG" alt="6-8.JPG"></p><p>(2分)</p><p>A.</p><p>V1, V2, V4, V3, V6, V8, V10, V9, V7, V5</p><p><strong>B.</strong></p><p><strong>V1, V2, V3, V4, V5, V6, V7, V9, V8, V10</strong></p><p>C.</p><p>V1, V2, V4, V6, V8, V10, V9, V7, V5, V3</p><p>D.</p><p>V1, V2, V3, V5, V7, V9, V10, V6, V8, V4</p><p>2-12</p><p>给出如下图所示的具有 7 个结点的网 G，哪个选项对应其正确的邻接矩阵？</p><p><img src="https://images.ptausercontent.com/7f1bd3ff-1afe-485d-93b0-d8e0c45ee0d2.JPG" alt="6-10.JPG"></p><p>A.</p><p><img src="https://images.ptausercontent.com/cee123ff-02e5-4b1f-a6bf-21d596a840ee.JPG" alt="6-10A.JPG"></p><p><strong>B.</strong></p><p><img src="https://images.ptausercontent.com/0b5c8056-4b7d-48f9-ba3c-7801b163535a.JPG" alt="6-10B.JPG"></p><p>C.</p><p><img src="https://images.ptausercontent.com/950ed850-7ef2-4c11-8018-83e66a085b17.JPG" alt="6-10C.JPG"></p><p>D.</p><p><img src="https://images.ptausercontent.com/6a2a95ba-ce80-4b4d-bdd6-567570816b13.JPG" alt="6-10D.JPG"></p><p>2-13</p><p>已知无向图 <em>G</em> 如下所示，使用克鲁斯卡尔（Kruskal）算法求图 <em>G</em> 的最小生成树，加入到最小生成树中的边依次是：</p><p><img src="https://images.ptausercontent.com/7818ff4f-c9ba-4494-a537-2a086343fdca.JPG" alt="GRE20-7.JPG"></p><p><strong>A.</strong></p><p><strong>(b,f), (b,d), (a,e), (c,e), (b,e)</strong></p><p>B.</p><p>(b,f), (b,d), (b,e), (a,e), (c,e)</p><p>C.</p><p>(a,e), (b,e), (c,e), (b,d), (b,f)</p><p>D.</p><p>(a,e), (c,e), (b,e), (b,f), (b,d)</p><p>2-14</p><p>若使用 AOE 网估算工程进度，则下列叙述中正确的是：</p><p>(2分)</p><p>A.</p><p>关键路径是从源点到汇点边数最多的一条路径</p><p><strong>B.</strong></p><p><strong>关键路径是从源点到汇点路径长度最长的路径</strong></p><p>C.</p><p>增加任一关键活动的时间不会延长工程的工期</p><p>D.</p><p>缩短任一关键活动的时间将会缩短工程的工期</p><h5 id="2-15"><a href="#2-15" class="headerlink" title="2-15"></a>2-15</h5><p>下列关于无向连通图特征的叙述中，正确的是：</p><ol><li>所有顶点的度之和为偶数</li><li>边数大于顶点个数减1</li><li>至少有一个顶点的度为1</li></ol><p><strong>A.只有1</strong></p><p>B.只有2</p><p>C.1和2</p><p>D.1和3</p><h5 id="2-16-1"><a href="#2-16-1" class="headerlink" title="2-16"></a>2-16</h5><p>若无向图G =（V，E）中含7个顶点，要保证图G在任何情况下都是连通的，则需要的边数最少是：</p><p>(3分)</p><p>A.6</p><p>B.15</p><p><a href="https://www.nowcoder.com/questionTerminal/f71a61d49690436fade01028428c7a9c"><strong>C.16</strong></a></p><p>D.21</p><p>2-17</p><p>具有<em>N</em>（<em>N</em>&gt;0）个顶点的无向图至少有多少个连通分量？</p><p>A.0</p><p><strong>B.1</strong></p><p>C.<em>N</em>−1</p><p>D.<em>N</em></p><h5 id="2-18-1"><a href="#2-18-1" class="headerlink" title="2-18"></a>2-18</h5><p>用DFS遍历一个无环有向图，并在DFS算法退栈返回时打印相应的顶点，则输出的顶点序列是？</p><p>A.</p><p>无序的</p><p>B.</p><p>拓扑有序</p><p><strong>C.</strong></p><p><strong><a href="https://www.nowcoder.com/questionTerminal/e8ea0fb6aa5d417ea87ad8cea3ae1faa?toCommentId=613135">逆拓扑有序</a></strong></p><p>D.</p><p>以上都不对</p><h5 id="2-19"><a href="#2-19" class="headerlink" title="2-19"></a>2-19</h5><p>若要求在找到从<code>S</code>到其他顶点最短路的同时，还给出不同的最短路的条数，我们可以将Dijkstra算法略作修改，增加一个<code>count[]</code>数组：<code>count[V]</code>记录<code>S</code>到顶点<code>V</code>的最短路径有多少条。则<code>count[V]</code>应该被初始化为：</p><p>A.</p><p>对所有顶点都有<code>count[V]=1</code></p><p>B.</p><p>对所有顶点都有<code>count[V]=0</code></p><p><strong>C.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count[S]=1; `对于其他顶点`V`则令`count[V]=0</span><br></pre></td></tr></table></figure><p>D.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count[S]=0; `对于其他顶点`V`则令`count[V]=1</span><br></pre></td></tr></table></figure><h5 id="2-20-1"><a href="#2-20-1" class="headerlink" title="2-20"></a>2-20</h5><p>任何一个带权无向连通图的最小生成树——</p><p>A.</p><p>是唯一的</p><p>B.</p><p>是不唯一的</p><p><strong>C.</strong></p><p><strong>有可能不唯一</strong></p><p>D.</p><p>有可能不存在</p><h4 id="程序填空题-2"><a href="#程序填空题-2" class="headerlink" title="程序填空题"></a>程序填空题</h4><h4 id="函数题-3"><a href="#函数题-3" class="headerlink" title="函数题"></a>函数题</h4><h5 id="6-1-邻接矩阵存储图的深度优先遍历-20-分"><a href="#6-1-邻接矩阵存储图的深度优先遍历-20-分" class="headerlink" title="6-1 邻接矩阵存储图的深度优先遍历 (20 分)"></a><strong>6-1 邻接矩阵存储图的深度优先遍历 (20 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*void DFS( MGraph Graph, Vertex V, void (*Visit)(Vertex) )&#123;</span></span><br><span class="line"><span class="comment">    //cout &lt;&lt; vertex[v];</span></span><br><span class="line"><span class="comment">    Visit(V);</span></span><br><span class="line"><span class="comment">    Visited[V] = true;</span></span><br><span class="line"><span class="comment">for (int j = 0; j &lt; Graph-&gt;Nv; j++)</span></span><br><span class="line"><span class="comment">if (Graph-&gt;G[V][j] == 1 &amp;&amp; Visited[j] == false) DFS(Graph,j,Visit);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">( MGraph Graph, Vertex V, <span class="keyword">void</span> (*Visit)(Vertex) )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Visit</span>(V);</span><br><span class="line">    Visited[V]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Graph-&gt;Nv;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Graph-&gt;G[V][j]==<span class="number">1</span>&amp;&amp;Visited[j]==<span class="literal">false</span>)<span class="built_in">DFS</span>(Graph, j, Visit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-邻接表存储图的广度优先遍历-20-分"><a href="#6-2-邻接表存储图的广度优先遍历-20-分" class="headerlink" title="6-2 邻接表存储图的广度优先遍历 (20 分)"></a><strong>6-2 邻接表存储图的广度优先遍历 (20 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span> <span class="params">( LGraph Graph, Vertex S, <span class="keyword">void</span> (*Visit)(Vertex) )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w,j,Q[MaxVertexNum];</span><br><span class="line">    <span class="keyword">int</span> first=<span class="number">0</span>,late=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Visit</span>(S);</span><br><span class="line">    Visited[S]=<span class="literal">true</span>;</span><br><span class="line">    Q[late++]=S;</span><br><span class="line">    PtrToAdjVNode tmp;</span><br><span class="line">    <span class="keyword">while</span>(late!=first)</span><br><span class="line">    &#123;</span><br><span class="line">        w=Q[first++];</span><br><span class="line">       tmp=Graph-&gt;G[w].FirstEdge;</span><br><span class="line">       <span class="keyword">while</span>(tmp)</span><br><span class="line">       &#123;</span><br><span class="line">           Vertex pos=tmp-&gt;AdjV;</span><br><span class="line">           <span class="keyword">if</span>(!Visited[pos])</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">Visit</span>(pos);</span><br><span class="line">               Visited[pos]=<span class="literal">true</span>;</span><br><span class="line">               Q[late++]=pos;</span><br><span class="line">           &#125;</span><br><span class="line">           tmp=tmp-&gt;Next;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="编程题-4"><a href="#编程题-4" class="headerlink" title="编程题"></a>编程题</h4><h3 id="第七章-查找"><a href="#第七章-查找" class="headerlink" title="第七章 查找"></a><a href="https://blog.csdn.net/u011704764/article/details/104259673">第七章 查找</a></h3><h4 id="判断题（错题：1-1-1-4-1-6）"><a href="#判断题（错题：1-1-1-4-1-6）" class="headerlink" title="判断题（错题：1-1,1-4,1-6）"></a>判断题（错题：1-1,1-4,1-6）</h4><h5 id="1-1"><a href="#1-1" class="headerlink" title="1-1"></a>1-1</h5><p>在散列中，函数“插入”和“查找”具有同样的时间复杂度。T</p><p>1-2</p><p>当记录个数小于哈希表长度时，哈希查找平均查找长度必然为0。F</p><p>1-3</p><p>用向量和单链表表示的有序表均可使用折半查找方法来提高查找速度。F</p><h5 id="1-4-1"><a href="#1-4-1" class="headerlink" title="1-4"></a>1-4</h5><p>有n个数存放在一维数组A[1..n]中，在进行顺序查找时，这n个数的排列有序或无序其平均查找长度不同。F</p><p>1-5</p><p>折半查找法的查找速度一定比顺序查找法快。F</p><h5 id="1-6-1"><a href="#1-6-1" class="headerlink" title="1-6"></a>1-6</h5><p>就平均查找长度而言，分块查找最小，折半查找次之，顺序查找最大。F</p><p>1-7</p><p>hash表的平均查找长度与处理冲突的方法无关。F</p><h4 id="选择题-错题：2-9-2-10"><a href="#选择题-错题：2-9-2-10" class="headerlink" title="选择题(错题：2-9,2-10)"></a>选择题(错题：2-9,2-10)</h4><p>2-1</p><p>用二分查找从100个有序整数中查找某数，最坏情况下需要比较的次数是：</p><p>A.7</p><p>2-2</p><p>在有<em>n</em>（<em>n</em>&gt;1000）个元素的升序数组<code>A</code>中查找关键字<em>x</em>。查找算法的伪代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k = 0;</span><br><span class="line">while ( k&lt;n 且 A[k]&lt;x )  k = k+3;</span><br><span class="line">if ( k&lt;n 且 A[k]==x )  查找成功;</span><br><span class="line">else if ( k-1&lt;n 且 A[k-1]==x ) 查找成功;</span><br><span class="line">     else if ( k-2&lt;n 且 A[k-2]==x ) 查找成功;</span><br><span class="line">          else 查找失败;</span><br></pre></td></tr></table></figure><p>本算法与二分查找（折半查找）算法相比，有可能具有更少比较次数的情形是：</p><p>B.当<em>x</em>接近数组开头处</p><p>2-3</p><p>下列二叉树中，可能成为折半查找判定树（不含外部结点）的是：</p><p>A.</p><p><img src="https://images.ptausercontent.com/282" alt="img"></p><p>2-4</p><p>在顺序表（8,11,15,19,25,26,30,33,42,48,50）中，用二分（折半）法查找关键码值20，需做的关键码比较次数为( )。</p><p>B.4</p><p>2-5</p><p>顺序查找n个元素的顺序表，若查找成功，则比较关键字的次数最多为( )次。</p><p>(2分)</p><p>A.n</p><p><a href="https://blog.csdn.net/qq_45174763/article/details/109891184">2-6</a></p><p>输入一个正整数序列（53,17,12,66,58,70,87,25,56,60），按次序构造一棵二叉排序树BS为（ ）。</p><p>A.</p><p><img src="https://images.ptausercontent.com/8e806676-2e1b-4981-a92b-28688f1dbf41.png" alt="A.png"></p><p>2-7</p><p>在下列查找的方法中，平均查找长度与<a href="https://blog.csdn.net/qq_42270373/article/details/83758928">结点</a>个数无关的查找方法是：</p><p>C.利用哈希（散列）表</p><p>2-8</p><p>对哈希(HASH)函数H(k)= k MOD m, 一般来说,m应取</p><p>(2分)</p><p>A.素数</p><h5 id="2-9-1"><a href="#2-9-1" class="headerlink" title="2-9"></a>2-9</h5><p>将元素序列{18, 23, 4, 26, 31, 33, 17, 39}按顺序插入一个初始为空的、大小为13的散列表中。散列函数为：<em>H</em>(<em>Key</em>)=<em>Key</em>%13，采用线性探测法处理冲突。问：当第一次发现有冲突时，散列表的装填因子大约是多少？</p><p>C.0.31</p><h5 id="2-10-2"><a href="#2-10-2" class="headerlink" title="2-10"></a>2-10</h5><p>现有长度为 11 且初始为空的散列表 HT，散列函数是 <em>H</em>(<em>k**ey</em>)=<em>k**ey</em>%7，采用线性探查（线性探测再散列）法解决冲突。将关键字序列 87,40,30,6,11,22,98,20 依次插入到 HT 后，HT 查找失败的平均查找长度是：</p><p>C.6</p><p>2-11</p><p>设有一组关键字 { 29，01， 13，15，56，20，87，27，69，9，10，74 }，散列函数为 <em>H</em>(<em>k**ey</em>)=<em>k**ey</em>%17，采用线性探测方法解决冲突。试在 0 到 18 的散列地址空间中对该关键字序列构造散列表，则成功查找的平均查找长度为 __</p><p>D.1.33</p><p>2-12</p><p>设有一组关键字 { 29，01， 13，15，56，20，87，27，69，9，10，74 }，散列函数为 <em>H</em>(<em>k**ey</em>)=<em>k**ey</em>%17，采用平方探测方法解决冲突。试在 0 到 18 的散列地址空间中对该关键字序列构造散列表，则成功查找的平均查找长度为 __</p><p>C.1.25</p><h4 id="填空题（错题：4-1）"><a href="#填空题（错题：4-1）" class="headerlink" title="填空题（错题：4-1）"></a>填空题（错题：4-1）</h4><h5 id="4-1"><a href="#4-1" class="headerlink" title="4-1"></a>4-1</h5><p>执行以下程序，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main( )&#123;</span><br><span class="line">    int array[10]=&#123;2, 12, 24, 36, 48, 49, 2333, 6666, 23333, 99999&#125;;</span><br><span class="line">    int key=2333, flag=0, low=0, m, h=9, times=0;</span><br><span class="line">    while(low &lt;= h)&#123;</span><br><span class="line">        m = (low + h) / 2;</span><br><span class="line">        times++;</span><br><span class="line">        if(array[m] == key) &#123;</span><br><span class="line">            printf(&quot;Found-%d-%d&quot;, m, times);</span><br><span class="line">            flag = 1;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(array[m] &gt; key) h = m - 1;</span><br><span class="line">        else low = m + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag == 0) printf(&quot;Not Found!&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果（即：在屏幕上打印的内容）是<strong>Found-6-4</strong> 。 （注意：要严格按照程序打印的格式填写答案，包括字母的大小写、空格的多少、连字符<code>-</code>和叹号<code>!</code>的格式等，不得随意增加引号、空格等无关字符，否则不得分。例如<code>printf(&quot;hello World&quot;);</code>打印的内容就是<code>hello World</code>，而不是<code>&quot;hello World&quot;</code>。为防止格式书写错误，建议直接从上面的代码中复制部分相关内容。）</p><p>4-2</p><p>顺序查找算法的平均查找长度</p><p>在下面的线性表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( 15, 24, 32, 47, 50, 58, 62, 79, 83, 96 )</span><br></pre></td></tr></table></figure><p>若采用顺序查找算法，假设各元素的检索概率相同，则平均查找长度为  5.5</p><p>4-3</p><p>二分查找算法的最大查找长度</p><p>在下面的有序表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( 15, 24, 32, 47, 50, 58, 62, 79, 83, 96 )</span><br></pre></td></tr></table></figure><p>若采用二分查找算法，则最大查找长度为 4</p><h4 id="函数题-4"><a href="#函数题-4" class="headerlink" title="函数题"></a>函数题</h4><h5 id="6-1-二分查找-20-分"><a href="#6-1-二分查找-20-分" class="headerlink" title="6-1 二分查找 (20 分)"></a><strong>6-1 二分查找 (20 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">BinarySearch</span><span class="params">( List L, ElementType x )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> high=L-&gt;Last,low=<span class="number">1</span>,mid;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;L-&gt;Data[mid])high=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;L-&gt;Data[mid])low=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NotFound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-线性探测法的查找函数-20-分"><a href="#6-2-线性探测法的查找函数-20-分" class="headerlink" title="6-2 线性探测法的查找函数 (20 分)"></a><strong>6-2 线性探测法的查找函数 (20 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">( HashTable h, ElementType key )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p0,p;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    p=p0=<span class="built_in">Hash</span>(key,h-&gt;TableSize);</span><br><span class="line">    <span class="keyword">while</span>(h-&gt;Cells[p].Info!=Empty&amp;&amp;h-&gt;Cells[p].Data!=key)</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span>(num==MAXTABLESIZE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        p=(p0+num)%h-&gt;TableSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-有序数组的插入-20-分"><a href="#6-3-有序数组的插入-20-分" class="headerlink" title="6-3 有序数组的插入 (20 分)"></a><strong>6-3 有序数组的插入 (20 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*bool Insert( List L, ElementType X )</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(L -&gt; Last + 1 == MAXSIZE)//满了</span></span><br><span class="line"><span class="comment">        return false;</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt;= L -&gt; Last; i++ )</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (L -&gt; Data[i] == X) //已经有了</span></span><br><span class="line"><span class="comment">            return false;</span></span><br><span class="line"><span class="comment">        else if (L -&gt; Data[i] &lt; X)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            for (int j = L -&gt;Last; j &gt;= i; j -- )//i之后的后移一位</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                L -&gt; Data[j + 1] = L -&gt; Data[j];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            L-&gt;Data[i] = X;</span></span><br><span class="line"><span class="comment">            L-&gt;Last ++;</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else if (i==L-&gt;Last &amp;&amp; L-&gt;Data[i]&gt; X)//插在最后一位</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            L-&gt;Data[L-&gt;Last+1] = X;</span></span><br><span class="line"><span class="comment">            L-&gt;Last ++;</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return true;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">( List L, ElementType X )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;Last==MAXSIZE<span class="number">-1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> low=<span class="number">0</span>,high=L-&gt;Last,mid;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(L-&gt;Data[mid]&gt;X)low=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(L-&gt;Data[mid]&lt;X)high=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=L-&gt;Last;i&gt;high;i--)</span><br><span class="line">        L-&gt;Data[i+<span class="number">1</span>]=L-&gt;Data[i];</span><br><span class="line">    L-&gt;Data[high+<span class="number">1</span>]=X;</span><br><span class="line">    L-&gt;Last++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-4-创建哈希表及查找-拉链法-10-分"><a href="#6-4-创建哈希表及查找-拉链法-10-分" class="headerlink" title="6-4 创建哈希表及查找(拉链法) (10 分)"></a><strong>6-4 创建哈希表及查找(拉链法) (10 分)</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHash</span><span class="params">(HashTable HT[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,num;</span><br><span class="line">    HashNode *p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        num=x%P;</span><br><span class="line">        p=<span class="keyword">new</span> HashNode;</span><br><span class="line">        p-&gt;key = x;</span><br><span class="line">        <span class="keyword">if</span>(HT[num]==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            HT[num]=<span class="keyword">new</span> HashNode;</span><br><span class="line">            p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            HT[num]-&gt;next=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;next=HT[num]-&gt;next;</span><br><span class="line">            HT[num]-&gt;next=p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">ASL</span><span class="params">(HashTable HT[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HashNode *p;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;P;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(HT[i]==<span class="literal">NULL</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">            p=HT[i]-&gt;next;</span><br><span class="line">            <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=cnt;</span><br><span class="line">                cnt++;</span><br><span class="line">                len++;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> sum*<span class="number">1.0</span>/len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程题-5"><a href="#编程题-5" class="headerlink" title="编程题"></a>编程题</h4><p><strong>7-1 电话聊天狂人 (25 分)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt; m;</span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt;::iterator it;<span class="comment">//迭代器（指针）</span></span><br><span class="line"><span class="keyword">int</span> n, cnt = <span class="number">0</span>, people= <span class="number">1</span>;</span><br><span class="line">string s;<span class="comment">//s存手机号</span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i++) &#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">m[s]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) </span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;second &gt; cnt) &#123;<span class="comment">//第一个位置存储的second的大于人数，则</span></span><br><span class="line">people = <span class="number">1</span>;</span><br><span class="line">s = it-&gt;first;</span><br><span class="line">            cnt = it-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (it-&gt;second == cnt) &#123;<span class="comment">//电话狂人不唯一</span></span><br><span class="line">people++;<span class="comment">//电话狂人有几个</span></span><br><span class="line"><span class="keyword">if</span> (it-&gt;first &lt; s)<span class="comment">//找最小的号码</span></span><br><span class="line">s = it-&gt;first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cnt;</span><br><span class="line"><span class="keyword">if</span> (people != <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; people;</span><br><span class="line">&#125;<span class="comment">//map容器</span></span><br></pre></td></tr></table></figure><p><strong>7-2 愤怒的牛 (25 分)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">int</span> n,c;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*bool juge(int m)//判断距离m是否可以 </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int s = 0, last = 1;//记录上一个 </span></span><br><span class="line"><span class="comment">    for (int i = 2; i &lt;= n; i++)//依次枚举每个牛栏 </span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (a[i] - a[last]&lt;m)s++;//若此距离不满足当前答案，那么需要的牛栏数+1，即把当前牛放到下一个牛栏 </span></span><br><span class="line"><span class="comment">        else last = i;//否则就更新上一次的牛栏位置 ，即上一头牛放的位置 </span></span><br><span class="line"><span class="comment">        if (s&gt;n - c) return false;//若需要牛栏数大于最大牛栏数，此答案不可行 </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return true;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">juge</span><span class="params">(<span class="keyword">int</span> m)</span>              </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>, last = <span class="number">1</span>;           <span class="comment">//因为第一个牛一定要占据第一个隔间（这样能使本题的答案最优），所以ans初始化为1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] - a[last] &gt;= m)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++;           <span class="comment">//如果比最近距离要大的话，那么该隔间就放牛   </span></span><br><span class="line">            last = i;                                               </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt;= c)<span class="keyword">return</span> <span class="literal">true</span>;          <span class="comment">//如果所选取的隔间数量&gt;=c，则说明枚举的最近距离成立，但是不够大，所以return true,继续枚举更大的距离</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++)cin &gt;&gt; a[i];</span><br><span class="line">    l = <span class="number">1</span>; r = a[n] - a[<span class="number">1</span>];           <span class="comment">//右边界为n个隔间的总长度，最近距离一定小于等于这个数值</span></span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">while</span> (l &lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">juge</span>(mid))l = mid+<span class="number">1</span>;       <span class="comment">//如果当前枚举的最近距离符合，那么就让l=mid,看更大的距离是否也符合（因为要求最大的最近距离）</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; r&lt;&lt; endl;    <span class="comment">//由于最后l&lt;=r的时候还会运行一次，会让l-1(如果答案正确的话)，所以应该输出的是r</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第八章-排序"><a href="#第八章-排序" class="headerlink" title="第八章 排序"></a>第八章 排序</h3><h4 id="判断题-3"><a href="#判断题-3" class="headerlink" title="判断题"></a>判断题</h4><p>1-1</p><p>仅基于比较的算法能得到的最好的“最坏时间复杂度”是<em>O</em>(NlogN)。T</p><p>1-2</p><p>对<em>N</em>个记录进行简单选择排序，比较次数和移动次数分别为<em>O</em>(<em>N</em>2)和<em>O</em>(<em>N</em>)。T</p><p>1-3</p><p>对<em>N</em>个记录进行快速排序，在最坏的情况下，其时间复杂度是<em>O</em>(<em>Nl<strong>o</strong>gN</em>)。F</p><p>1-4</p><p>希尔排序是稳定的算法。F</p><p>1-5</p><p>堆排序是稳定的排序算法。F</p><p>1-6</p><p>在堆排序中，若要进行升序排序，则需要建立大根堆。T</p><p>1-7</p><p>排序算法中的比较次数与初始元素序列的排列无关。F</p><p>1-8</p><p>排序的稳定性是指排序算法中的比较次数保持不变，且算法能够终止。F</p><p>1-9</p><p>对于n个记录的集合进行冒泡排序，在最坏情况下需要的时间是<em>O</em>(<em>n</em>2)。T</p><p>1-10</p><p>直接选择排序的时间复杂度为<em>O</em>(<em>n</em>2)，不受数据初始排列的影响。T</p><h4 id="选择题-错题：2-6-2-11-2-12-2-13"><a href="#选择题-错题：2-6-2-11-2-12-2-13" class="headerlink" title="选择题(错题：2-6,2-11,2-12,2-13)"></a>选择题(错题：2-6,2-11,2-12,2-13)</h4><p>2-1</p><p>对<em>N</em>个不同的数据采用冒泡算法进行从大到小的排序，下面哪种情况下肯定交换元素次数最多？</p><p>A.从小到大排好的</p><p>2-2</p><p>在对<em>N</em>个元素进行排序时，基于比较的算法中，其“最坏时间复杂度”中最好的是：</p><p>C.<em>O</em>(<em>Nl<strong>o</strong>g**N</em>)</p><p>2-3</p><p>对<em>N</em>个记录进行归并排序，归并趟数的数量级是：</p><p>A.<em>O</em>(<em>l<strong>o</strong>g**N</em>)</p><p>2-4</p><p>有组记录的排序码为{ 46，79，56，38，40，84 }，则利用堆排序的方法建立的初始堆为：</p><p>D.84，79，56，38，40，46</p><p>2-5</p><p>采用递归方式对顺序表进行快速排序，下列关于递归次数的叙述中，正确的是：</p><p>C.递归次数与每次划分后得到的分区处理顺序无关</p><h5 id="2-6-1"><a href="#2-6-1" class="headerlink" title="2-6"></a>2-6</h5><p>有组记录的排序码为{46，79，56，38，40，84 }，采用快速排序（以位于最左位置的对象为基准而）得到的第一次划分结果为：</p><p>D.{40,38,46,56,79,84}</p><p>2-7</p><p>对于10个数的简单选择排序，最坏情况下需要交换元素的次数为：</p><p>A.9</p><p>将序列{ 2, 12, 16, 88, 5, 10, 34 }排序。若前2趟排序的结果如下：</p><ul><li>第1趟排序后：2, 12, 16, 10, 5, 34, 88</li><li>第2趟排序后：2, 5, 10, 12, 16, 34, 88</li></ul><p>则可能的排序算法是：</p><p>C.快速排序</p><p>2-9</p><p>对初始数据序列{ 8, 3, 9, 11, 2, 1, 4, 7, 5, 10, 6 }进行希尔排序。若第一趟排序结果为（ 1, 3, 7, 5, 2, 6, 4, 9, 11, 10, 8 ），第二趟排序结果为（ 1, 2, 6, 4, 3, 7, 5, 8, 11, 10, 9 ），则两趟排序采用的增量（间隔）依次是：</p><p>D.5, 3</p><p>2-10</p><p>下列排序算法中，占用辅助空间最多的是：( )</p><p>A.归并排序</p><h5 id="2-11"><a href="#2-11" class="headerlink" title="2-11"></a>2-11</h5><p>选择一个排序算法时，除算法的时空效率外，下列因素中，还需要考虑的是：</p><ul><li><p>I、数据的规模</p></li><li><p>II、数据的存储方式</p></li><li><p>III、算法的稳定性</p></li><li><p>IV、数据的初始状态</p></li></ul><p>D.I、II、III、IV</p><p>2-12</p><p>排序过程中，对尚未确定最终位置的所有元素进行一遍处理称为一“趟”。下列序列中，不可能是快速排序第二趟结果的是：</p><p>D.5, 2, 12, 28, 16, 32, 72, 60</p><p>2-13</p><p>对大部分元素已有序的数组进行排序时，直接插入排序比简单选择排序效率更高，其原因是：</p><ul><li><p>(I). 直接插入排序过程中元素之间的比较次数更少</p></li><li><p>(II). 直接插入排序过程中所需要的辅助空间更少</p></li><li><p>(III). 直接插入排序过程中元素的移动次数更少</p></li></ul><p>A.仅 I</p><p>2-14</p><p>下述几种排序方法中,( )是稳定的排序方法。</p><p>C.归并排序</p><h4 id="填空题-2"><a href="#填空题-2" class="headerlink" title="填空题"></a>填空题</h4><p>4-1</p><p>基于比较的排序方法，其最好的时间复杂度为<strong>O(nlogn)</strong></p><p>4-2</p><p>时间复杂度为O(nlogn)的排序算法有归并排序、堆排序和快速排序</p><h5 id="4-3-1"><a href="#4-3-1" class="headerlink" title="4-3"></a>4-3</h5><p>对包含10个记录的表r[1..10]进行简单选择排序，所需进行的关键字间的比较次数为<strong>45</strong></p><h4 id="函数题-5"><a href="#函数题-5" class="headerlink" title="函数题"></a>函数题</h4><h5 id="6-1-快速排序-15-分"><a href="#6-1-快速排序-15-分" class="headerlink" title="6-1 快速排序 (15 分)"></a><strong>6-1 快速排序 (15 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=low,j=high;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;L.r[i].key&lt;=L.r[j].key)j--;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;swap(L.r[i].key,L.r[j].key);i++;&#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;L.r[i].key&lt;=L.r[j].key)i++;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;swap(L.r[i].key,L.r[j].key);j--;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&gt;=high)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pivot=Partition(L,low,high);</span><br><span class="line">        QuickSort(L,low,pivot<span class="number">-1</span>);</span><br><span class="line">        QuickSort(L,pivot+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-冒泡排序-10-分"><a href="#6-2-冒泡排序-10-分" class="headerlink" title="6-2 冒泡排序 (10 分)"></a><strong>6-2 冒泡排序 (10 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])swap(&amp;arr[j],&amp;arr[j+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-简单选择排序-10-分"><a href="#6-3-简单选择排序-10-分" class="headerlink" title="6-3 简单选择排序 (10 分)"></a><strong>6-3 简单选择排序 (10 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">SelectSort</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,mini,temp;</span><br><span class="line">    <span class="keyword">int</span> n = L.Length;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mini=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n+<span class="number">1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(L.elem[mini]&gt;L.elem[j])mini=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mini!=i)&#123;temp=L.elem[i];L.elem[i]=L.elem[mini];L.elem[mini]=temp;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-4-堆排序-10-分"><a href="#6-4-堆排序-10-分" class="headerlink" title="6-4 堆排序 (10 分)"></a><strong>6-4 堆排序 (10 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">( HeapType  H, <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dad,son,last,temp;</span><br><span class="line">    dad=s;son=<span class="number">2</span>*dad,last=m;</span><br><span class="line">    <span class="keyword">while</span>(son&lt;=last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(son+<span class="number">1</span>&lt;=last&amp;&amp;H.elem[son]&lt;H.elem[son+<span class="number">1</span>])son++;</span><br><span class="line">        <span class="keyword">if</span>(H.elem[dad]&gt;H.elem[son])<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp=H.elem[son];</span><br><span class="line">            H.elem[son]=H.elem[dad];</span><br><span class="line">            H.elem[dad]=temp;</span><br><span class="line">            dad=son;</span><br><span class="line">            son=dad*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-5-归并排序-10-分"><a href="#6-5-归并排序-10-分" class="headerlink" title="6-5 归并排序 (10 分)"></a><strong>6-5 归并排序 (10 分)</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(SqList L,<span class="keyword">int</span> low,<span class="keyword">int</span> m,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Q[high-low+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> i=low,j=m+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m&amp;&amp;j&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.elem[i]&gt;=L.elem[j])</span><br><span class="line">        &#123;</span><br><span class="line">            Q[k++]=L.elem[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(L.elem[i]&lt;=L.elem[j])</span><br><span class="line">        &#123;</span><br><span class="line">            Q[k++]=L.elem[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=m)Q[k++]=L.elem[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=high)Q[k++]=L.elem[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=low,k=<span class="number">0</span>;i&lt;=high;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L.elem[i]=Q[k++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程题-6"><a href="#编程题-6" class="headerlink" title="编程题"></a>编程题</h4><p><strong>7-1 字符串的冒泡排序 (20 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="built_in">string</span> arr[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])swap(arr[j],arr[j+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==k<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>7-2 模拟EXCEL排序 (25 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment">struct Info</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    string id;</span></span><br><span class="line"><span class="comment">    string name;</span></span><br><span class="line"><span class="comment">    int score;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">     int n,c,mini;</span></span><br><span class="line"><span class="comment">     cin&gt;&gt;n&gt;&gt;c;</span></span><br><span class="line"><span class="comment">     Info arr[n];</span></span><br><span class="line"><span class="comment">     for(int i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="comment">     &#123;</span></span><br><span class="line"><span class="comment">         cin&gt;&gt;arr[i].id&gt;&gt;arr[i].name&gt;&gt;arr[i].score;</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">    if(c==1)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;n-1;i++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            mini=i;</span></span><br><span class="line"><span class="comment">            for(int j=i+1;j&lt;n;j++)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                if(arr[mini].id&gt;arr[j].id)mini=j;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(mini!=i)swap(arr[mini],arr[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else if(c==2)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int exchange,bound,temp;</span></span><br><span class="line"><span class="comment">        exchange=n-1;</span></span><br><span class="line"><span class="comment">        while(exchange)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            bound=exchange;exchange=0;</span></span><br><span class="line"><span class="comment">            for(int j=0;j&lt;bound;j++)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                if(arr[j].id&gt;arr[j+1].id)&#123;swap(arr[j],arr[j+1]);exchange=j;&#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        exchange=n-1;</span></span><br><span class="line"><span class="comment">        while(exchange)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            bound=exchange;exchange=0;</span></span><br><span class="line"><span class="comment">            for(int j=0;j&lt;bound;j++)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                if(arr[j].name&gt;arr[j+1].name)&#123;swap(arr[j],arr[j+1]);exchange=j;&#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else if(c==3)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int exchange,bound,temp;</span></span><br><span class="line"><span class="comment">        exchange=n-1;</span></span><br><span class="line"><span class="comment">        while(exchange)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            bound=exchange;exchange=0;</span></span><br><span class="line"><span class="comment">            for(int j=0;j&lt;bound;j++)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                if(arr[j].id&gt;arr[j+1].id)&#123;swap(arr[j],arr[j+1]);exchange=j;&#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        exchange=n-1;</span></span><br><span class="line"><span class="comment">        while(exchange)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            bound=exchange;exchange=0;</span></span><br><span class="line"><span class="comment">            for(int j=0;j&lt;bound;j++)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                if(arr[j].score&gt;arr[j+1].score)&#123;swap(arr[j],arr[j+1]);exchange=j;&#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;arr[i].id&lt;&lt;&quot; &quot;&lt;&lt;arr[i].name&lt;&lt;&quot; &quot;&lt;&lt;arr[i].score&lt;&lt;endl;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, c;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, sc;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">22</span>];</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(a.name, b.name) == <span class="number">0</span>) <span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.name, b.name) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.sc == b.sc) <span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">    <span class="keyword">return</span> a.sc &lt; b.sc;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//char s[22], t[22];</span></span><br><span class="line">    <span class="comment">//scanf(&quot;%s %s&quot;, s, t);</span></span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;, strcmp(s, t));</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %s %d&quot;</span>, &amp;a[i].id, a[i].name, &amp;a[i].sc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="number">1</span>) sort(a, a+n, cmp1);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="number">2</span>) sort(a, a+n, cmp2);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="number">3</span>) sort(a, a+n, cmp3);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.6d %s %d\n&quot;</span>, a[i].id, a[i].name, a[i].sc);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>7-3 悄悄关注 (25 分)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment">struct Info</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    string name;</span></span><br><span class="line"><span class="comment">    int zan;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n1,n2,avg=0;</span></span><br><span class="line"><span class="comment">    cin&gt;&gt;n1;</span></span><br><span class="line"><span class="comment">    string guanzhu[n1];</span></span><br><span class="line"><span class="comment">    for(int i=0; i&lt;n1; i++)</span></span><br><span class="line"><span class="comment">        cin&gt;&gt;guanzhu[i];</span></span><br><span class="line"><span class="comment">    cin&gt;&gt;n2;</span></span><br><span class="line"><span class="comment">    Info dianzan[n2],temp[n2];</span></span><br><span class="line"><span class="comment">    for(int i=0; i&lt;n2; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cin&gt;&gt;dianzan[i].name&gt;&gt;dianzan[i].zan;</span></span><br><span class="line"><span class="comment">        avg+=dianzan[i].zan;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    avg /= n2;</span></span><br><span class="line"><span class="comment">    int flag=1,k=0;</span></span><br><span class="line"><span class="comment">    for(int i=0; i&lt;n2; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(int j=0; j&lt;n1; j++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            if(guanzhu[j]==dianzan[i].name)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                flag=0;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(flag&amp;&amp;dianzan[i].zan&gt;avg)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            temp[k++]=dianzan[i];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        flag=1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(k==0)cout&lt;&lt;&quot;Bing Mei You&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;k-1; i++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            int mini=i;</span></span><br><span class="line"><span class="comment">            for(int j=i+1; j&lt;k; j++)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                if(temp[j].name&lt;temp[mini].name)mini=j;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if(mini!=i)swap(temp[mini],temp[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;k; i++)</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;temp[i].name&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;set&gt;</span></span><br><span class="line"><span class="comment">#include&lt;map&gt;</span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment">struct Info</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    string name;</span></span><br><span class="line"><span class="comment">    int zan;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">struct List</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    Info dianzan[10000];</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">int Partition(List &amp;l,int first,int last)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int i=first,j=last;</span></span><br><span class="line"><span class="comment">    while(i&lt;j)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        while(i&lt;j&amp;&amp;l.dianzan[i].name&lt;=l.dianzan[j].name)j--;</span></span><br><span class="line"><span class="comment">        if(i&lt;j)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            swap(l.dianzan[i],l.dianzan[j]);</span></span><br><span class="line"><span class="comment">            i++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        while(i&lt;j&amp;&amp;l.dianzan[i].name&lt;l.dianzan[j].name)i++;</span></span><br><span class="line"><span class="comment">        if(i&lt;j)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            swap(l.dianzan[i],l.dianzan[j]);</span></span><br><span class="line"><span class="comment">            j--;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">void quicksort(List&amp;l,int first,int last)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(first&gt;=last)return;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int mid=Partition(l,first,last);</span></span><br><span class="line"><span class="comment">        quicksort(l,first,mid-1);</span></span><br><span class="line"><span class="comment">        quicksort(l,mid+1,last);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int n1,n2,zan,sum=0,flag=1,k=0;</span></span><br><span class="line"><span class="comment">    string name;</span></span><br><span class="line"><span class="comment">    List l;</span></span><br><span class="line"><span class="comment">    set&lt;string&gt; guanzhu;</span></span><br><span class="line"><span class="comment">    cin&gt;&gt;n1;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n1;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cin&gt;&gt;name;</span></span><br><span class="line"><span class="comment">        guanzhu.insert(name);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cin&gt;&gt;n2;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n2;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cin&gt;&gt;name&gt;&gt;zan;</span></span><br><span class="line"><span class="comment">        sum+=zan;</span></span><br><span class="line"><span class="comment">        if(guanzhu.find(name)==guanzhu.end())</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            l.dianzan[k].name=name;</span></span><br><span class="line"><span class="comment">            l.dianzan[k++].zan=zan;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sum/=n2;</span></span><br><span class="line"><span class="comment">    quicksort(l,0,k);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;k;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if(l.dianzan[i].zan&gt;=sum)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;l.dianzan[i].name&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">            flag=0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(flag)cout&lt;&lt;&quot;Bing Mei You&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,i,j,k=<span class="number">0</span>,s=<span class="number">0</span>,f=<span class="number">0</span>,a,fag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;p;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;p1;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">p[s1]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> c[m];</span><br><span class="line"><span class="keyword">char</span> b[m][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s2&gt;&gt;a;</span><br><span class="line">s=s+a;</span><br><span class="line"><span class="keyword">if</span>(p.find(s2)==p.end())</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="keyword">sizeof</span>(s2);j++)</span><br><span class="line">     &#123;</span><br><span class="line">     b[k][j]=s2[j];</span><br><span class="line"> &#125;</span><br><span class="line"> c[k]=a;</span><br><span class="line"> k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p[s2]=a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s=s/m;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;s)</span><br><span class="line">&#123;</span><br><span class="line">    p1.insert(b[i]);</span><br><span class="line">    f++;</span><br><span class="line">fag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Bing Mei You&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it=p1.begin();it!=p1.end();it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一章-绪论&quot;&gt;&lt;a href=&quot;#第一章-绪论&quot; class=&quot;headerlink&quot; title=&quot;第一章 绪论&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pintia.cn/problem-sets?tab=1&quot;&gt;第一章 绪论&lt;/a&gt;&lt;/h3&gt;&lt;h4 id</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="https://zhang0224gz.github.io/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>静态博客的创建</title>
    <link href="https://zhang0224gz.github.io/2021/12/04/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BB%BA%E7%AB%8B/"/>
    <id>https://zhang0224gz.github.io/2021/12/04/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BB%BA%E7%AB%8B/</id>
    <published>2021-12-04T11:35:25.302Z</published>
    <updated>2021-12-11T07:50:01.476Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载node"><a href="#下载node" class="headerlink" title="下载node"></a>下载node</h4><p>​    D:\my app\nodejs</p><h4 id="github注册"><a href="#github注册" class="headerlink" title="github注册"></a>github注册</h4><p>​    -&gt;Zhang2002GZ.github.io（用户名.github.io）</p><h4 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h4><p>​    git for windows-&gt;cmd+r: git（D:\my app\Git）</p><h4 id="SHH配置"><a href="#SHH配置" class="headerlink" title="SHH配置"></a>SHH配置</h4><p> (1)git_bash打开:$ <strong>ssh-keygen -t rsa -C “<a href="mailto:&#50;&#x32;&#53;&#x31;&#55;&#x38;&#x37;&#57;&#x32;&#x33;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#50;&#x32;&#53;&#x31;&#55;&#x38;&#x37;&#57;&#x32;&#x33;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;</a>“</strong>-&gt;回车(4次)直至结束<br> 记住这行Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa) 括号里面的地址是后面要用到的<br> (2)打开github-&gt;setting-&gt;SHH:title:Zhang2002GZ ;key:粘贴文本文档<br>     user-&gt;zhangguozhi-&gt;.ssh-&gt;.pub<br> 在github上建秘钥</p><h4 id="hexo使用"><a href="#hexo使用" class="headerlink" title="hexo使用"></a>hexo使用</h4><p>​    -&gt;文档<br>   <strong>npm install hexo-cli -g</strong>   //安装<br>   <strong>hexo init blog</strong>   //初始化博客<br>   <strong>cd blog</strong><br>   <strong>npm install</strong><br>   //hexo server<br> 新建目录blog-&gt;cmd+r-&gt;D:-&gt;cd blog-&gt;npm install hexo-cli -g-&gt;hexo init myblog-&gt;cd myblog-&gt;npm install -&gt;hexo s -p 4000<br> 浏览器输入网址：localhost:4000</p><h4 id="sublime安装"><a href="#sublime安装" class="headerlink" title="sublime安装"></a>sublime安装</h4><p>​    -&gt;将博客目录直接拖进-&gt;## hello hexo</p><h4 id="hexo发布至github"><a href="#hexo发布至github" class="headerlink" title="hexo发布至github"></a>hexo发布至github</h4><p> hexo-&gt;文档-&gt;部署repo<br> sublime-&gt;_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">开头：</span><br><span class="line">  \# URL</span><br><span class="line">  \## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">  **url**: https://Zhang2002GZ.github.io</span><br><span class="line">末尾</span><br><span class="line">  \# Deployment</span><br><span class="line">  \## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">  deploy:</span><br><span class="line">      **type: git</span><br><span class="line">      repo: https://github.com/Zhang2002GZ/Zhang2002GZ.github.io.git</span><br><span class="line">      branch: master**</span><br></pre></td></tr></table></figure><p> hexo-&gt;文档-&gt;部署<br> <strong>hexo g-&gt;npm install hexo-deployer-git –save-&gt;hexo d</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line"> repository: https://github.com/zhang2002gz/zhang2002gz.github.io.git</span><br><span class="line"> branch: main</span><br></pre></td></tr></table></figure><p>hexo init( Start blogging with Hexo!)-&gt;静态生成本地的hexo页面hexo s(打开本地服务器：将<a href="http://localhost:4000可以看见博客；ctrl+c关闭服务器就看不见页面）">http://localhost:4000可以看见博客；ctrl+c关闭服务器就看不见页面）</a><br> -&gt;npm install hexo-deployer-git –save-&gt;生成页面hexo g-&gt;将本地文件上传github hexo d<br> （error10054:这个保错就执行git config –global http.sslVerify “false”）<br> **!**登入页面弹窗只在第一次创建的时候出现</p><h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><p> git clone <a href="https://github.com/theme-nexmoe/hexo-theme-nexmoe.git">https://github.com/theme-nexmoe/hexo-theme-nexmoe.git</a> themes/nexmoe<br> (git clone 改页面代码所在地址.git 存到themes目录下/新建的nexmoe)<br> sublime修改_config.yml:theme: nexmoe</p><p>也可以在release里下载压缩包将它解压到themes中</p><p> npm install –save hexo-renderer-pug<br> git clone <a href="https://github.com/liuyib/hexo-theme-stun.git">https://github.com/liuyib/hexo-theme-stun.git</a> themes/stun<br> theme: sbun<br> 清理一下hexo clean ,生成一下 hexo g,hexo s(打开服务器），hexo d(上传）</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"> git --version</span><br><span class="line"> npm -v</span><br><span class="line"> hexo -v</span><br><span class="line"></span><br><span class="line">ssh</span><br><span class="line"> $ ssh -T git@github.com</span><br><span class="line"> （Hi zhang2002gz! Yo<span class="string">u&#x27;ve successfully authenticated, but GitHub does not provide shell access.）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">查看npm安装hexo插件的情况 npm ls --depth 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">安装缺失的插件 npm install acorn --save</span></span><br></pre></td></tr></table></figure><p>万能三件套：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line"></span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure><h4 id="一些pure主题的配置"><a href="#一些pure主题的配置" class="headerlink" title="一些pure主题的配置"></a>一些pure主题的配置</h4><p><a href="https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md">hexo-theme-pure/README.cn.md at master · cofess/hexo-theme-pure (github.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">文章索引目录</span><br><span class="line">title: 文章标题</span><br><span class="line">categories:</span><br><span class="line">  - 文章分类</span><br><span class="line">tags:</span><br><span class="line">  - 文章标签</span><br><span class="line">toc: true # 是否启用内容索引</span><br><span class="line"></span><br><span class="line">sidebar侧边栏</span><br><span class="line">文章侧边栏默认为开启状态，如果某篇文章不想开启侧边栏，在文章开头配置加入“sidebar: none”即可：</span><br><span class="line">title: 文章标题</span><br><span class="line">categories:</span><br><span class="line">  - 文章分类</span><br><span class="line">tags:</span><br><span class="line">  - 文章标签</span><br><span class="line">sidebar: none # 是否启用sidebar侧边栏，none：不启用</span><br><span class="line"></span><br><span class="line">友情链接</span><br><span class="line">Name:</span><br><span class="line">    link: http://example.com</span><br><span class="line">    avatar: http://example.com/avatar.png</span><br><span class="line">    desc: &quot;这是一个描述&quot;</span><br><span class="line">    </span><br><span class="line">安装主题</span><br><span class="line">git clone https://github.com/cofess/hexo-theme-pure.git themes/pure</span><br><span class="line">更新主题</span><br><span class="line">cd themes/pure</span><br><span class="line">git pull</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="相关视频"><a href="#相关视频" class="headerlink" title="相关视频"></a>相关视频</h4><p><a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=5&spm_id_from=pageDriver">【2021最新版】保姆级Hexo+github搭建个人博客_哔哩哔哩_bilibili</a></p><p><a href="https://www.pianshen.com/article/10881955667/">Hexo博客开发之——WARN No layout index.html - 程序员大本营 (pianshen.com)</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Git 全局设置:</span><br><span class="line"> git config --global user.name <span class="string">&quot;zhang-guozhi&quot;</span></span><br><span class="line"> git config --global user.email <span class="string">&quot;10094335+zhang-guozhi@user.noreply.gitee.com&quot;</span></span><br><span class="line"> 创建 git 仓库:</span><br><span class="line"> mkdir zhang-guozhi</span><br><span class="line"> cd zhang-guozhi</span><br><span class="line"> git init</span><br><span class="line"> touch README.md</span><br><span class="line"> git add README.md</span><br><span class="line"> git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line"> git remote add origin https:<span class="comment">//gitee.com/zhang-guozhi/zhang-guozhi.git</span></span><br><span class="line"> git push -u origin master</span><br><span class="line"> 已有仓库?</span><br><span class="line"> cd existing_git_repo</span><br><span class="line"> git remote add origin https:<span class="comment">//gitee.com/zhang-guozhi/zhang-guozhi.git</span></span><br><span class="line"> git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;下载node&quot;&gt;&lt;a href=&quot;#下载node&quot; class=&quot;headerlink&quot; title=&quot;下载node&quot;&gt;&lt;/a&gt;下载node&lt;/h4&gt;&lt;p&gt;​    D:\my app\nodejs&lt;/p&gt;
&lt;h4 id=&quot;github注册&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="初始化" scheme="https://zhang0224gz.github.io/categories/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhang0224gz.github.io/2021/11/27/hello-world/"/>
    <id>https://zhang0224gz.github.io/2021/11/27/hello-world/</id>
    <published>2021-11-27T13:15:34.628Z</published>
    <updated>2021-11-27T13:15:34.628Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
