{"meta":{"title":"Hexo","subtitle":"","description":"","author":"zhang0224gz","url":"https://zhang0224gz.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"about/index.html","permalink":"https://zhang0224gz.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"books/index.html","permalink":"https://zhang0224gz.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"categories/index.html","permalink":"https://zhang0224gz.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":true,"path":"links/index.html","permalink":"https://zhang0224gz.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"tags/index.html","permalink":"https://zhang0224gz.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-12-04T10:33:16.481Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"repository/index.html","permalink":"https://zhang0224gz.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"PTA 数据结构","slug":"专业课/数据结构/图","date":"2021-12-09T05:52:57.914Z","updated":"2021-12-09T06:12:58.729Z","comments":true,"path":"2021/12/09/专业课/数据结构/图/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/09/%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/","excerpt":"","text":"定义 数据元素——顶点vertex 由顶点的有穷非空集合和顶点之间边的集合——图graph 边edge G=(V,E) 无向图 有向图 对边赋予的有意义的数值量——权weight 带权图/网图 术语 点与点–邻接 边依附于点和点 依附于该顶点的边的个数——度degree 无向图：TD(v)=2e 有向图：ID=OD=e 无向完全图 n*(n-1)/2 有向完全图 n*(n-1) 稀疏图 稠密图","categories":[],"tags":[]},{"title":"","slug":"英语/CET4--翻译","date":"2021-12-06T08:36:53.397Z","updated":"2021-12-06T08:46:06.099Z","comments":true,"path":"2021/12/06/英语/CET4--翻译/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E7%BF%BB%E8%AF%91/","excerpt":"","text":"1Hot pot has a history of over 2000 years in China.Initially,it was only popular in the coldest places,and subsequentlg became widely accepted in many other areas,where distinct regional variations developed.When eating a hot pot,family and friends sit around the table with a steaming hot pot at the center of it.People can put their preferred meal,seafood,vegetables and ingredients into the pot to cook their own food,and chat to their hearts&#x27; content over a good meal.","categories":[],"tags":[]},{"title":"四级--作文","slug":"英语/CET4--作文","date":"2021-12-06T02:20:39.278Z","updated":"2021-12-06T07:45:57.346Z","comments":true,"path":"2021/12/06/英语/CET4--作文/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E4%BD%9C%E6%96%87/","excerpt":"","text":"“use”类 栗子：the use of translation apps is becoming increasingly popular 开篇可概述翻译应用程序在生活中的应用越发广泛的趋势 主体部分应详述其应用情况：多种应用场景 + 积极影响/受欢迎的原因 结尾部分可总结其带来的益处，适当提及不足之处和未来的应用或发展趋势 123456789101112131415词汇：machine translation 机器翻译convert speech to text 将语音转换为文字voice/speech recognition 语音识别voice translator apps 语音翻译应用程序photo/camera translator apps 拍照翻译应用程序an offline multilingual dictionary 可离线使用的多语种词典translate text into multiplelanguages 将文本翻译为多种语言offer instant speech-to-speech translation 提供即使语音翻译foreign/overseas/international travel 出国游have a short conversation with locals 与当地人进行简短的交流bridge the information and communication gap 架起信息与沟通的桥梁keep in contact with clients/customers worldwide 与世界各地的客户保持联系conduct trade negotiations with foreign companies 与外国公司进行贸易洽谈","categories":[],"tags":[]},{"title":"四级--词汇","slug":"英语/CET4--词汇","date":"2021-12-06T01:41:11.803Z","updated":"2021-12-06T08:35:27.127Z","comments":true,"path":"2021/12/06/英语/CET4--词汇/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E8%AF%8D%E6%B1%87/","excerpt":"","text":"era n.souvenir n.stall n.fruit n.advance n.phrase bookintroduce v.indispensable adj.adequate adj.casual adj.lingual,linguistic adj.when it comes to …find the right way to deal with sthmake a big effort to do sthbe not as good as sb accessible adj.account v.adaptation n.appropriately adv.considerable adj.effective adj.ladder n.miseread v.nomination n.overlook v.promote v.senior n.submission n.suggest v.thankfullg adv.separate v.utter v.pioneering adj.pursuit n.in one’s lifetimeplay an importannt part/role in …higher educationadvance and promote gender equalityundergraduate n./adj.postgraduate n./adj.make upacademic staffat senior levelsstark adj.median adj. knit(knitting,knitter) v.(crocheter)stitch v.handiwork n.crafts n.throughout college prep.thereafter adv.hook v.on one’s way to doing sthrestore v./ renewal n.council n.swell the ranksin honer ofpioneer n.repetitive adj.induce a relaxed statebe associated withinitial learning curveheart ratetangible adj.self-esteem/self-respect n.singular adj.boost my spiritshundreds of thousands of …routinely adv.fulfillment n.a prematurely born babyintensive care unit(ICU)stick withcope withprompte v.go well adv.replace A with Bconduct v.heal for v.autoimmune adj.mindless adj.stiff agj.disorder n.significant improvementslessen their fearswellness n.therapeutic adi.respondent n.clinically adv.persistent adj.redirect their focus/ divert their attention from their painprocessat onceregister pain signalssample n.be engaged in …diminished adj.speculate v.nerve pathwaysintellectually adv.sustained adj.maximize v.like-minded adj.for onestay away from tobaccoenhance v.prolong one’s lifekeenly adv.relieve stresssuffer mild cognitive damage 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869vanish v.prospect n.there is almost no hard evidence for ... other than ...pilot adj.autopilot n.the bulk ofa shifting of gearsterrifying adj.a rebirth n.choose purpose over happinessgive priority tofar from gloomyphase v.identity n.built up your resourcesprecisely adv.foundation n.secure adj.sowing n.reap v.the runleap v.venture n.measured adj.haste n.energetic adj.presidential candidatelifespan n.narrativedescent cn.a turning pointtake full advantage ofmisrepresent real liferosy adj.burdensome adj.undergo(undergoes) v.turn offdone adj.science fictionincreasingly adv.absorb v.fragmented adj.bizarre adj.popular notionretain v.replay v.a neural virtual realityvivid adj.sleep disorderssleepwalk v.physical movementvideotape the subjectsdraw v.integrate ... into10-fold adj.respondent,candidate,subject,participantbedtime n.a napa study sessionodd n.intensified adj.systematize v.substitute ... with","categories":[],"tags":[]},{"title":"","slug":"专业课/数据结构/树与二叉树","date":"2021-12-05T14:05:20.243Z","updated":"2021-12-05T14:05:45.935Z","comments":true,"path":"2021/12/05/专业课/数据结构/树与二叉树/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/05/%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include&lt;iostream&gt;using namespace std;struct BiNode&#123; int data; BiNode *lchild,*rchild;&#125;;class BiTree&#123;public: BiTree() //构造 &#123; root=Creat(); &#125;; ~BiTree() //析构 &#123; Release(root); &#125;; void PreOrder() //前序遍历 &#123; PreOrder(root); &#125;; void InOrder() //中序遍历 &#123; InOrder(root); &#125;; void PostOrder() //后序遍历 &#123; PostOrder(root); &#125;; void LevelOrder() //层序遍历 &#123; LevelOrder(root); &#125;;private://调用 BiNode* Creat();//void Creat(BiNode* &amp;root); void Release(BiNode *bt); void PreOrder(BiNode *bt); void InOrder(BiNode *bt); void PostOrder(BiNode *bt); void LevelOrder(BiNode *bt); BiNode *root;&#125;;BiNode* BiTree::Creat()&#123; BiNode *bt; char ch; cin&gt;&gt;ch; if(ch==&#x27;#&#x27;)bt=NULL; else &#123; bt = new BiNode; bt-&gt;data = ch; bt-&gt;lchild = Creat(); bt-&gt;rchild = Creat(); &#125; return bt;&#125;void BiTree::Release(BiNode *bt)&#123; if(bt=NULL)return; else &#123; Release(bt-&gt;lchild); Release(bt-&gt;rchild); delete bt; &#125;&#125;void BiTree::PreOrder(BiNode *bt)&#123; if(bt==NULL)return; cout&lt;&lt;bt-&gt;data&lt;&lt;&quot; &quot;; PreOrder(bt-&gt;lchild); PreOrder(bt-&gt;rchild);&#125;void BiTree::InOrder(BiNode *bt)&#123; if(bt==NULL)return; InOrder(bt-&gt;lchild); cout&lt;&lt;bt-&gt;data&lt;&lt;&quot; &quot;; InOrder(bt-&gt;rchild);&#125;void BiTree::PostOrder(BiNode*bt)&#123; if(bt==NULL)return; PostOrder(bt-&gt;lchild); PostOrder(bt-&gt;rchild); cout&lt;&lt;bt-&gt;data&lt;&lt;&quot; &quot;;&#125;void BiTree::LevelOrder(BiNode *bt)&#123; BiNode *que[101],*t; int first=0,last=0; que[last++]=bt; while(last!=first) &#123; t = que[first++]; cout&lt;&lt;t-&gt;data&lt;&lt;&quot; &quot;; if(t-&gt;lchild)que[last++]=t-&gt;lchild; if(t-&gt;rchild)que[last++]=t-&gt;rchild; &#125;&#125;int main()&#123; BiTree bt; bt.PostOrder();&#125;","categories":[],"tags":[]},{"title":"PTA 数据结构","slug":"专业课/数据结构/PTA 数据结构","date":"2021-12-04T15:24:25.366Z","updated":"2021-12-09T15:31:42.829Z","comments":true,"path":"2021/12/04/专业课/数据结构/PTA 数据结构/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/04/%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/PTA%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"第一章 绪论判断题1-1 数据元素是数据的最小单位。F(数据项) 1-2 数据的逻辑结构是指数据的各数据项之间的逻辑关系。F（数据元素之间） 1-3 数据结构概念包括数据之间的逻辑结构、数据在计算机中的存储方式和数据的运算三个方面。T 1-4 数据结构的抽象操作的定义与具体实现有关。F 1-5 算法和程序没有区别，在数据结构中二者是通用的。F 1-6 数据结构包括数据对象集以及它们的逻辑结构和物理结构，还包括与数据对象相关联的操作集，以及实现这些操作的高效的算法。T 选择题（错题：2-9,2-13）2-1 在 Data_Structure = (D，R)中，D 是（ ）的有限集合。 A.数据元素 2-2 以下关于数据结构的说法中错误的是（ ）。 A.数据结构相同，对应的存储结构也相同 2-4 算法分析的目的是( ) C.分析算法的效率以求改进 2-5 算法分析的两个主要方面是( ) A.空间复杂度和时间复杂度 2-6 采用链结构存储线性表时，其地址（ ）。 B.连续不连续都可以 2-7 一个正确的算法应该具有 5 个特性，除输入、输出特性外，另外 3 个特性是（ ）。 A.确定性、可行性、有穷性 2-8 算法的时间复杂度取决于（ ） C.问题的规模和待处理数据的初态 2-9 以下数据结构中，哪一个是线性结构（ ） D.串 2-10 以下数据结构中，（ ）是非线性数据结构 B.字符串 2-11 算法的时间复杂度与（ ）有关。 A.问题规模 2-12 以下程序段的空间复杂度为 12345int a = 1, b = 1, i;for (i=0; i&lt;=10; i++) &#123; b += a; a = b - a;&#125; B.O(1) 2-13 下列程序段的时间复杂度是（ ）。 1234count=0;for(k=1;k&lt;=n;k*=2) for(j=1;j&lt;=n;j++) count++; C.O*(nlog2*n) 2-14 下面说法中，错误的是（ ）。 ⅰ.算法原地工作的含义是指不需要任何额外的辅助空间 ⅱ.在相同规模n下，复杂度为O(n)的算法在时间上总是优于复杂度为O(2n)的算法 ⅲ.所谓时间复杂度，是指最坏情况下估算算法执行时间的一个上界 ⅳ.同一个算法，实现语言的级别越高，执行效率越低 C.ⅰ,ⅳ 2-15 算法的计算量的大小称为算法的____。 B.复杂度 2-16 在下面的程序段中，对x的赋值语句的频度为（ ） 123for (i=1;i&lt;=n;i++) for (j=1;j&lt;=n;j++) x=x+1; C.O(n2) 2-17 下面程序段的时间复杂度是 ( ) 123i ＝ 0；while（i&lt;=n） i = i * 3； D.O(log3n) 填空题（错题：4-1, 4-4, 4-6，4-7，4-10）4-1 算法效率的比较 假设为解决某问题而设计的若干算法的时间复杂度分别为： A) O(n)B) O(n2)C) O(log2​n)D) O(nlog2​n)E) O(2n)F) O(n​)G) O(n!)H) O(1)I) O(n**n​)J) O(n**n) 这些算法按效率由高到低的顺序是 HCFADIBEGJ 4-2 基本术语 数据 是客观事物的符号表示，是所有能输入到计算机中并被计算机程序处理的符号的总称。 4-3 数据结构的数学定义 数据结构的数学定义为一个二元组： D**S=(D,R) 其中：D 是数据元素的有限集，R 是 D 上的关系 的有限集。 4-4 存储结构存储结构包括 的表示和 的表示。 4-5 基本术语 抽象数据类型 一般指由用户定义的、表示应用问题的数学模型，以及定义在该模型上的一组操作。 4-6 在数据结构中，数据的逻辑结构分为 和 。 4-7 数据结构由数据的 、 和 三部分组成。 4-8 算法的特性 一个算法必须满足以下五个重要特性： (1) 有穷性 一个算法必须总是在执行有穷步后结束，且每一步都可以有穷有时间内完成。 (2) 确定性 一个算法中每一条指令必须有确切的含义。 (3) 可行性 算法中的所有操作都可以通过已经实现的基本操作运算执行有限次来实现。 (4) 输入一个算法有零个或多个输入。 (5) 输出一个算法有一个或多个输出，它们是算法进行信息加工后得到的结果。 4-9 基本术语 数据元素是数据的基本单位，数据项是数据的不可分割最小单位。其中：前者在计算机中通常作为一个整体进行考虑和处理，它可以由一个或多个后者组成。 4-10 数据的实例 观察下面的表格： 学号 姓名 性别 语文 数学 物理 化学 英语 总分 15160101 王克强 男 87 95 93 76 84 435 15160102 刘铭志 男 77 82 80 97 95 431 15160103 孙勇 男 78 85 87 86 65 401 15160104 李瀚东 男 93 82 72 75 95 417 15160105 赵敏 女 95 90 88 82 96 451 15160106 张毅 男 78 76 65 81 80 380 15160107 柳青 女 82 91 82 84 85 424 15160108 蔡文婷 女 85 78 80 86 95 424 整张表格称为一个 数据对象，其中每一行称为一个 数据元素，任意一行中的每一个栏目称为一个数据项。 4-11 沃斯的名言 瑞士科学家尼古拉斯·沃斯(Niklaus Wirth)有一句在计算机领域里人尽皆知的名言： 算法 + 数据结构 = 程序 编程题7-1 求最小值和次小值 (25 分) 123456789101112131415161718192021222324252627282930313233343536#include&lt;iostream&gt;using namespace std;int main()&#123; int n,x; cin&gt;&gt;n; cin&gt;&gt;x; if(n&gt;1)&#123; int mini = x; int mini2 = x; int a[n]=&#123;x&#125;; for(int i=1;i&lt;n;i++) &#123; cin&gt;&gt;a[i]; if(mini&gt;a[i])mini=a[i]; &#125; for(int i=0;i&lt;n;i++) &#123; if(a[i]==mini)continue; if(mini2==mini)mini2=a[i]; if(mini2&gt;a[i])mini2=a[i]; &#125; if(mini==mini2) cout&lt;&lt;&quot;There is no second smallest element&quot;&lt;&lt;endl; else cout&lt;&lt;mini&lt;&lt;&quot; &quot;&lt;&lt;mini2; &#125; else &#123; cout&lt;&lt;&quot;Invalid Input&quot;&lt;&lt;endl; &#125; return 0;&#125; 7-2 求素数个数 (30 分) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;iostream&gt;using namespace std;int main()&#123; int n,num=0; cin&gt;&gt;n; int *a=new int[n+1]; for(int i=2;i&lt;=n;i++) a[i]=1; a[0]=a[1]=0; for(int i=2;i*i&lt;=n;i++) &#123; if(a[i]) &#123; for(int j=2*i;j&lt;=n;j+=i) a[j]=0; &#125; &#125; for(int i=2;i&lt;=n;i++) &#123; if(a[i])num++; &#125; cout&lt;&lt;num&lt;&lt;endl; return 0;&#125;/*#include&lt;iostream&gt;using namespace std;int main()&#123; int n,num=1,flag=1; cin&gt;&gt;n; if(n==1)cout&lt;&lt;&quot;0&quot;&lt;&lt;endl; else if(n==2)cout&lt;&lt;&quot;1&quot;&lt;&lt;endl; else &#123; for(int i=3;i&lt;=n;i+=2) &#123; for(int j=3;j*j&lt;=i;j+=2) &#123; if(i%j==0) &#123; flag=0; break; &#125; &#125; if(flag) num++; flag=1; &#125; cout&lt;&lt;num&lt;&lt;endl; &#125; return 0;&#125;*//*#include&lt;iostream&gt;using namespace std;int main()&#123; int n,num=0,flag=1; cin&gt;&gt;n; for(int i=2;i&lt;=n;i++) &#123; for(int j=2;j*j&lt;=i;j++) &#123; if(i%j==0) &#123; flag=0; break; &#125; &#125; if(flag) &#123; num++; &#125; flag=1; &#125; cout&lt;&lt;num&lt;&lt;endl; return 0;&#125;*/ 第三章 栈和列表判断题（错题：1-10）1-1 若一个栈的输入序列为1，2，3，…，N，输出序列的第一个元素是i，则第j个输出元素是j−i−1。F 1-2 所谓“循环队列”是指用单向循环链表或者循环数组表示的队列。F 1-3 在对不带头结点的链队列作出队操作时，不会改变头指针的值。F 1-4 不论是入队列操作还是入栈操作,在顺序存储结构上都需要考虑”溢出”情况。T 1-5 队列和栈都是运算受限的线性表，只允许在表的两端进行运算。F 1-6 栈和队列的存储方式，既可以是顺序方式，也可以是链式方式。T 1-7 循环队列也存在着空间溢出问题。T 1-8 循环队列执行出队操作时会引起大量元素的移动。F 1-9 栈是插入和删除只能在一端进行的线性表；队列是插入在一端进行，删除在另一端进行的线性表。T 1-10 在n个元素连续进栈以后，它们的出栈顺序和进栈顺序一定正好相反。T 1-11 环形队列中有多少个元素可以根据队首指针和队尾指针的值来计算。T 1-12 栈和队列的插入和删除操作特殊，所以，栈和队列是非线性结构。F 1-13 序列{1,2,3,4,5}依次入栈，则不可能得到{3,4,1,2,5}的出栈序列。 T 1-14 队列中允许插入的一端叫队头，允许删除的一端叫队尾。F 单选题（错题：2-2、2-18）2-1 若用大小为6的数组来实现循环队列，且当前front和rear的值分别为0和4。当从队列中删除两个元素，再加入两个元素后，front和rear的值分别为多少？ A.2和0 2-2 如果循环队列用大小为m的数组表示，且用队头指针front和队列元素个数size代替一般循环队列中的front和rear指针来表示队列的范围，那么这样的循环队列可以容纳的元素个数最多为： 不知道 2-3 以下数据结构中，（ ）是非线性数据结构。 A.树 2-4 设栈S和队列Q的初始状态均为空，元素{1, 2, 3, 4, 5, 6, 7}依次进入栈S。若每个元素出栈后立即进入队列Q，且7个元素出队的顺序是{2, 5, 6, 4, 7, 3, 1}，则栈S的容量至少是： D.4 2-5 线性表、堆栈、队列的主要区别是什么？ B.堆栈和队列都是插入、删除受到约束的线性表 2-6 栈和队列的共同点( )。 C.只允许在端点处插入和删除元素 2-7 下列关于线性表,栈和队列叙述,错误的是( )。 A.线性表是给定的n(n必须大于零)个元素组成的序列 2-8 设用一个数组A[1……N]来存储一个栈，令A[N]为栈底，用整型变量T指示当前栈顶位置，A[T]为栈顶元素。当从栈中弹出一个元素时，变量T的变化为（ ）。 A.T=T+1 2-9 链式栈与顺序栈相比，一个比较明显的优点是（ ）。 B.通常不会出现栈满的情况 2-10 (neuDS)在循环顺序队列中，假设以少用一个存储单元的方法来区分队列判满和判空的条件，front和rear分别为队首和队尾指针，它们分别指向队首元素和队尾元素的下一个存储单元，队列的最大存储容量为maxSize，则队列的长度是（ ）。 C.(rear-front+maxSize)%maxSize 2-11 (nueDS_C++)设栈S和队列Q的初始状态为空，元素e1、e2、e3、e4、e5、e6依次通过栈S，一个元素出栈后即进入队列Q，若6个元素出队的顺序是e2、e4、e3、e6、e5、e1，则栈S的容量至少应该是（ ）。提示：对于栈，可以全进再依次出；也可以进一个出一个；也可以进一部分，出一个，再进一部分；但是出栈之后，不能再入栈。 A.3 2-12 关于栈和队列的下列说法正确的是（） B.栈是后进先出的结构，出栈时除了栈顶元素，其余元素无需移动； 2-13 一个栈的入栈序列是a,b,c,d,e，则栈的出栈序列不可能的是（ ）。 C.dceab 2-14 在一个链表表示的队列中， f和r分别指向队列的头和尾。下列哪个操作能正确地将s结点插入到队列中： B.r-&gt;next=s; r=s; 2-15 栈和队列具有相同的。 B.逻辑结构 2-16 假定利用数组a[n]顺序存储一个栈，用top表示栈顶指针，用top==-1表示栈空，并已知栈未满，当元素x进栈时所执行的操作为（ ）。 C.a[++top]=x 2-17 队列的“先进先出”特性是指（ ）。 Ⅰ.最后插入队列中的元素总是最后被删除Ⅱ.当同时进行插入、删除操作时，总是插入操作优先Ⅲ.每当有删除操作时，总要先做一次插入操作Ⅳ.每次从队列中删除的总是最早插入的元素 B.Ⅰ、Ⅳ 2-18 已知循环队列存储在一维数组A[0…n-1]中，且队列非空时front和rear分别指向队头元素和队尾元素。若初始时队列为空，且要求第一个进入队列的元素存储在A[0]处，则初始时front和rear的值分别是（ ）。 B.0,n-1（原因：……） 2-19 执行函数时，其局部变量一般采用（ ）进行存储。 C.栈结构 2-20 对空栈 S 进行 Push 和 Pop 操作，入栈序列为 a, b, c, d, e，经过 Push, Push, Pop, Push, Pop, Push, Push, Pop 操作后，得到的出栈序列是： D.b, c, e 2-21 用S表示入栈操作，X表示出栈操作，若元素入栈的顺序为1234，为了得到1342出栈顺序，相应的S和X的操作串为( )。 D.SXSSXSXX 填空题（错题：4-3）4-1 栈的运算遵循 后进先出 的原则。 4-2 以下运算实现在链队上的入队列，请在空白处用适当句子予以填充。 12345678void EnQueue(QueptrTp *lq,DataType x)&#123; LqueueTp *p; p=(LqueueTp *)malloc(sizeof(LqueueTp)); p-&gt;data=x; p-&gt;next=NULL; (lq-&gt;rear)-&gt;next=p; lq-&gt;rear=p; &#125; 4-3 以下运算实现在链栈上的初始化，请在空白处用请适当句子予以填充。 12345typedef struct Node&#123; DataType data; struct Node *next;&#125;StackNode,*LStackTp;void InitStack(LStackTp &amp;ls)&#123; 不知……;&#125;。 函数题6-3 jmu-ds-舞伴问题 (20 分) 12345678910111213141516171819202122232425262728293031323334353637383940int QueueLen(SqQueue Q)&#123; return (Q-&gt;rear-Q-&gt;front+MAXQSIZE)%MAXQSIZE;&#125;int EnQueue(SqQueue &amp;Q, Person e)&#123; Q-&gt;rear = (Q-&gt;rear+1)%MAXQSIZE; Q-&gt;data[Q-&gt;rear] = e; return 0;&#125;int QueueEmpty(SqQueue &amp;Q)&#123; if(Q-&gt;rear==Q-&gt;front)return 1; else return 0;&#125;int DeQueue(SqQueue &amp;Q, Person &amp;e)&#123; Q-&gt;front = (Q-&gt;front+1)%MAXQSIZE; e = Q-&gt;data[Q-&gt;front]; return 0;&#125;void DancePartner(Person dancer[], int num)&#123; for(int i=0;i&lt;num;i++) &#123; if(dancer[i].sex==&#x27;M&#x27;) EnQueue(Mdancers,dancer[i]); else EnQueue(Fdancers,dancer[i]); &#125; while(!QueueEmpty(Mdancers)&amp;&amp;!QueueEmpty(Fdancers)) &#123; Person x,y; DeQueue(Mdancers,x); DeQueue(Fdancers,y); cout&lt;&lt;y.name&lt;&lt;&quot; &quot;&lt;&lt;x.name&lt;&lt;endl; &#125;&#125; 6-4 十进制转二进制（顺序栈设计和应用） (10 分) 12345678910111213141516171819202122232425bool isEmpty()&#123; if(top==-1)return 1; else return 0;&#125;/* 元素x入栈 */void Push(int x)&#123; //if(x==MaxSize)cout&lt;&lt;&quot;上溢&quot;&lt;&lt;endl; //else mystack[++top]=x;&#125;/* 取栈顶元素 */int getTop()&#123; return mystack[top];&#125;/* 删除栈顶元素 */void Pop()&#123; top--;&#125; 编程题7-1 银行业务队列简单模拟 (25 分) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;using namespace std;int arr[1000];int main()&#123; int n; int flag1=0,flag2=0; int top1=0,top2=0,top=0; cin&gt;&gt;n; int a1[n+1],a2[n+1],a[n+1]; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;arr[i]; if(arr[i]%2!=0)a1[top1++]=arr[i]; else a2[top2++]=arr[i]; &#125; int t1=0,t2=0; for(int i=0;i&lt;n;i++) &#123; if(arr[i]%2==0)flag2++; else flag1++; if(flag2%2==0&amp;&amp;flag1%4==0) &#123; a[top++]=a1[t1++]; a[top++]=a1[t1++]; a[top++]=a2[t2++]; &#125;else&#123; if(t1!=top1&amp;&amp;(flag1%2==0||t2==top2)) &#123; a[top++]=a1[t1++]; a[top++]=a1[t1++]; &#125; if(t2!=top2&amp;&amp;(flag2%2==0||t1==top1||flag1%2==0)) &#123; a[top++]=a2[t2++]; &#125; &#125; if(top==n)break; &#125; for(int i=0;i&lt;n-1;i++) cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;; cout&lt;&lt;a[n-1]&lt;&lt;endl; return 0;&#125; 7-2 堆栈操作合法性 (20 分) 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; int N,M; string str; int n,x=0; cin&gt;&gt;N&gt;&gt;M; for(int i=0; i&lt;N; i++) &#123; cin&gt;&gt;str; n = str.size(); for(int j=0; j&lt;n; j++) &#123; if(str[j]==&#x27;S&#x27;) &#123; x++; if(x&gt;M)break; &#125; else if(str[j]==&#x27;X&#x27;) &#123; x--; if(x&lt;0)break; &#125; &#125; if(x==0)cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl; else cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl; x=0; &#125; return 0;&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"PTA","slug":"PTA","permalink":"https://zhang0224gz.github.io/tags/PTA/"}]},{"title":"静态博客的创建","slug":"静态博客的建立","date":"2021-12-04T11:35:25.302Z","updated":"2021-12-09T15:32:01.322Z","comments":true,"path":"2021/12/04/静态博客的建立/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/04/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BB%BA%E7%AB%8B/","excerpt":"","text":"1.下载node​ D:\\my app\\nodejs 2.github注册​ -&gt;Zhang2002GZ.github.io（用户名.github.io） 3.下载git​ git for windows-&gt;cmd+r: git（D:\\my app\\Git） 4.SHH配置 (1)git_bash打开:$ ssh-keygen -t rsa -C “&#x32;&#x32;&#53;&#49;&#55;&#56;&#x37;&#x39;&#50;&#51;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;“-&gt;回车(4次)直至结束 记住这行Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa) 括号里面的地址是后面要用到的 (2)打开github-&gt;setting-&gt;SHH:title:Zhang2002GZ ;key:粘贴文本文档 user-&gt;zhangguozhi-&gt;.ssh-&gt;.pub 在github上建秘钥 5.hexo使用​ -&gt;文档 npm install hexo-cli -g //安装 hexo init blog //初始化博客 cd blog npm install //hexo server 新建目录blog-&gt;cmd+r-&gt;D:-&gt;cd blog-&gt;npm install hexo-cli -g-&gt;hexo init myblog-&gt;cd myblog-&gt;npm install -&gt;hexo s -p 4000 浏览器输入网址：localhost:4000 6.sublime安装​ -&gt;将博客目录直接拖进-&gt;## hello hexo 7.hexo发布至github hexo-&gt;文档-&gt;部署repo sublime-&gt;_config.yml 开头： # URL ## Set your site url here. For example, if you use GitHub Page, set url as ‘https://username.github.io/project&#39; url: https://Zhang2002GZ.github.io 末尾 # Deployment ## Docs: https://hexo.io/docs/one-command-deployment deploy: type: git repo: https://github.com/Zhang2002GZ/Zhang2002GZ.github.io.git branch: master hexo-&gt;文档-&gt;部署 hexo g-&gt;npm install hexo-deployer-git –save-&gt;hexo d type: git repository: https://github.com/zhang2002gz/zhang2002gz.github.io.git branch: main hexo init( Start blogging with Hexo!)-&gt;静态生成本地的hexo页面hexo s(打开本地服务器：将http://localhost:4000可以看见博客；ctrl+c关闭服务器就看不见页面） -&gt;npm install hexo-deployer-git –save-&gt;生成页面hexo g-&gt;将本地文件上传github hexo d （error10054:这个保错就执行git config –global http.sslVerify “false”） **!**登入页面弹窗只在第一次创建的时候出现 7.美化 git clone https://github.com/theme-nexmoe/hexo-theme-nexmoe.git themes/nexmoe (git clone 改页面代码所在地址.git 存到themes目录下/新建的nexmoe) sublime修改_config.yml:theme: nexmoe 也可以在release里下载压缩包将它解压到themes中 npm install –save hexo-renderer-pug git clone https://github.com/liuyib/hexo-theme-stun.git themes/stun theme: sbun 清理一下hexo clean ,生成一下 hexo g,hexo s(打开服务器），hexo d(上传） 8.其他检查： 123456789101112node -v git --version npm -v hexo -vssh $ ssh -T git@github.com （Hi zhang2002gz! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.）查看npm安装hexo插件的情况 npm ls --depth 0安装缺失的插件 npm install acorn --save 万能三件套： 12345git config --global --unset http.proxygit config --global --unset https.proxygit config --global http.sslVerify &quot;false&quot; 9.一些pure主题的配置 hexo-theme-pure/README.cn.md at master · cofess/hexo-theme-pure (github.com) 1234567891011121314151617181920212223242526272829文章索引目录title: 文章标题categories: - 文章分类tags: - 文章标签toc: true # 是否启用内容索引sidebar侧边栏文章侧边栏默认为开启状态，如果某篇文章不想开启侧边栏，在文章开头配置加入“sidebar: none”即可：title: 文章标题categories: - 文章分类tags: - 文章标签sidebar: none # 是否启用sidebar侧边栏，none：不启用友情链接Name: link: http://example.com avatar: http://example.com/avatar.png desc: &quot;这是一个描述&quot; 安装主题git clone https://github.com/cofess/hexo-theme-pure.git themes/pure更新主题cd themes/puregit pull 【2021最新版】保姆级Hexo+github搭建个人博客_哔哩哔哩_bilibili Hexo博客开发之——WARN No layout index.html - 程序员大本营 (pianshen.com) 12345678910111213141516Git 全局设置: git config --global user.name &quot;zhang-guozhi&quot; git config --global user.email &quot;10094335+zhang-guozhi@user.noreply.gitee.com&quot; 创建 git 仓库: mkdir zhang-guozhi cd zhang-guozhi git init touch README.md git add README.md git commit -m &quot;first commit&quot; git remote add origin https://gitee.com/zhang-guozhi/zhang-guozhi.git git push -u origin master 已有仓库? cd existing_git_repo git remote add origin https://gitee.com/zhang-guozhi/zhang-guozhi.git git push -u origin master","categories":[{"name":"初始化","slug":"初始化","permalink":"https://zhang0224gz.github.io/categories/%E5%88%9D%E5%A7%8B%E5%8C%96/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://zhang0224gz.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-11-27T13:15:34.628Z","updated":"2021-11-27T13:15:34.628Z","comments":true,"path":"2021/11/27/hello-world/","link":"","permalink":"https://zhang0224gz.github.io/2021/11/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"初始化","slug":"初始化","permalink":"https://zhang0224gz.github.io/categories/%E5%88%9D%E5%A7%8B%E5%8C%96/"}],"tags":[{"name":"PTA","slug":"PTA","permalink":"https://zhang0224gz.github.io/tags/PTA/"},{"name":"博客","slug":"博客","permalink":"https://zhang0224gz.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}