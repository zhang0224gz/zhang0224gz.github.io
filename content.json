{"meta":{"title":"Hexo","subtitle":"","description":"","author":"zhang0224gz","url":"https://zhang0224gz.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"about/index.html","permalink":"https://zhang0224gz.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"books/index.html","permalink":"https://zhang0224gz.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":true,"path":"links/index.html","permalink":"https://zhang0224gz.github.io/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"categories/index.html","permalink":"https://zhang0224gz.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-12-04T10:33:16.481Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"repository/index.html","permalink":"https://zhang0224gz.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-12-04T09:57:19.826Z","updated":"2021-12-04T09:57:19.826Z","comments":false,"path":"tags/index.html","permalink":"https://zhang0224gz.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"数据结构/KMP","date":"2021-12-11T07:51:52.920Z","updated":"2021-12-11T08:00:36.673Z","comments":true,"path":"2021/12/11/数据结构/KMP/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP/","excerpt":"","text":"i 0 1 2 3 4 5 6 char[i] a b a b a b c next -1 0 0 1 2 3 4 nextval -1 0 -1 0 -1 0 4 一、过程： 求next值： 1.两个固定值：char[0]_next=-1; char[1]_next=0（一个，没有匹配的，长度为0） 2.开始求：char[2]匹配出错，前面a!=b（两组字符不同），故next=0(重头开始） char[3]匹配出错，前面有aba, a(char[3]前面的a)和a（匹配必从第一个开始）相同，字符a长度为1，故next=1 char[4]匹配出错，前面有abab,ab和ab相同，长度为2，故next=2 char[5]匹配出错，前面有ababa，aba和aba(123和345)相同，长度为3，故next=3 char[6]匹配出错，前面有ababab,abab和abab(1234和3456)相同,长度为4，故next=4 求nextval值： 1.一个固定值：char[0]_nextval=-1 2.开始求：char[1]_next=0(char[0]=a), a!=b,所以nextval=char[1]_next char[2]_next=0(char[0]=a),a==a,所以nextval=char[0]_nextval 同理可得…… 二、总结： 求next的值： 看当前字符的前面的一组字符是否有相似的一组字符（开头开始）与之相同，取其最大长度作为next的值 求nextval值（修正值）： 当前字符的next值(索引值)所指向的字符是否和当前字符相同：相同则修正值为当前字符的next值所指向的字符的修正值；不同则去当前字符的next值 三、例子再来一个： 0 1 2 3 4 5 6 7 8 9 a b c a b c a b a a next -1 0 0 0 1 2 3 4 5 1 nextval -1 0 0 -1 0 0 -1 0 5 1 求next值：next0=-1,next1=0 a!=b,next2=0; abc不可能(ab!=bc),next3=0; 0==3,next4=1; 01==34,next5=2;012==345,next6=3; abca==abca(1234==3456),next7=4; 01234==34567,next8=5 1==8,next9=1 求nextval值：nextval0=-1 b!=char[next1]=a, nextval=next1=0 c!=char[next2]=a, nextval=next2=0 a==char[next3]=a,nextval=nextval0=-1 同理可得…… 这个思路也可以： (7条消息) KMP算法中计算next值和nextval的值_threecat.up的博客-CSDN博客_kmp算法next修正值计算方法https://blog.csdn.net/qq_43919400/article/details/103736457","categories":[],"tags":[]},{"title":"图","slug":"数据结构/图","date":"2021-12-09T05:52:57.914Z","updated":"2021-12-11T07:49:13.886Z","comments":true,"path":"2021/12/09/数据结构/图/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/","excerpt":"","text":"定义 数据元素——顶点vertex 由顶点的有穷非空集合和顶点之间边的集合——图graph 边edge G=(V,E) 无向图 有向图 对边赋予的有意义的数值量——权weight 带权图/网图 术语 点与点–邻接 边依附于点和点 依附于该顶点的边的个数——度degree 无向图：TD(v)=2e 有向图：ID=OD=e 无向完全图 n*(n-1)/2 有向完全图 n*(n-1) 稀疏图 稠密图","categories":[],"tags":[]},{"title":"","slug":"英语/CET4--翻译","date":"2021-12-06T08:36:53.397Z","updated":"2021-12-06T08:46:06.099Z","comments":true,"path":"2021/12/06/英语/CET4--翻译/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E7%BF%BB%E8%AF%91/","excerpt":"","text":"1Hot pot has a history of over 2000 years in China.Initially,it was only popular in the coldest places,and subsequentlg became widely accepted in many other areas,where distinct regional variations developed.When eating a hot pot,family and friends sit around the table with a steaming hot pot at the center of it.People can put their preferred meal,seafood,vegetables and ingredients into the pot to cook their own food,and chat to their hearts&#x27; content over a good meal.","categories":[],"tags":[]},{"title":"四级--作文","slug":"英语/CET4--作文","date":"2021-12-06T02:20:39.278Z","updated":"2021-12-13T03:25:42.209Z","comments":true,"path":"2021/12/06/英语/CET4--作文/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E4%BD%9C%E6%96%87/","excerpt":"","text":"“use”类栗子：the use of translation apps is becoming increasingly popular 开篇可概述翻译应用程序在生活中的应用越发广泛的趋势 主体部分应详述其应用情况：多种应用场景 + 积极影响/受欢迎的原因 结尾部分可总结其带来的益处，适当提及不足之处和未来的应用或发展趋势 1The use of translation apps is becoming increasely popular.They play a critical role in removing the language barrier in this globalized era(全球化的时代). 12These technology tools are especially helpful for both leisure(闲暇，业余时间；休闲活动) and business travelers. 1With the ever-increasing input of linguistic data,these apps will be smarter and thus applied in broader fields.As a result,more people will enjoy the fruits of this technological advance. 123456789101112131415词汇：machine translation 机器翻译convert speech to text 将语音转换为文字voice/speech recognition 语音识别voice translator apps 语音翻译应用程序photo/camera translator apps 拍照翻译应用程序an offline multilingual dictionary 可离线使用的多语种词典translate text into multiplelanguages 将文本翻译为多种语言offer instant speech-to-speech translation 提供即使语音翻译foreign/overseas/international travel 出国游have a short conversation with locals 与当地人进行简短的交流bridge the information and communication gap 架起信息与沟通的桥梁keep in contact with clients/customers worldwide 与世界各地的客户保持联系conduct trade negotiations with foreign companies 与外国公司进行贸易洽谈 “changes of ways”类栗子：Changes in the way of education 开篇可铺陈背景，引入对“教育方式发生改变”的探讨，或开门见山，直接概述教育领域发生的变化 主体部分应详细阐述具体变化（今昔对比/当下变化）+ 这些变化的成因/影响 结尾部分可对这些变化简要作评，或展望未来的发展趋势并呼吁人们做好准备 1The past decades have witnessed a surge of technological innovations.Irresistibly useful and convenient,tools resulting from these innovations have prompted(促使，导致) radical changes in our lifestyle.Among them,changes in the way of education are some of the most noticeable ones. 12Nowadays,the computer and projector(投影仪) have become indispensable(不可或缺的) in every classroom.Compared with old-fashioned chalk and talk(板书口授),multimedia-based teaching enables teachers to demonstrate what they found hard or even impossible in the past,such as abstract geometric(几何的) concepts and bizarre lanscapes.The trend of distance learning is another significant change.With a wide array of(大量各式各样的) online courses to choose from,teaching and learning are no longer confined(局限) to the classroom or school day.Students now can attend lectures by prominent(著名的，卓越的) professors in far-away locations in their own bedroom anytime they want.And all this happens just within a few clicks. 1Although these changes are by and large(大体上) constructive,they do have a couple of unintended(无意地的，意想不到的) negative consequences.For instance,distance learning is likely to lead to a detached(冷淡的，疏远的) relationship between the student and the teacher. “importance of quality”类栗子：Self-confidence:an importance factor for success 开篇可概述没有自信的危害来强调自信的重要性 主体部分：自信的定义+例子论证自信是成功的必要因素 结尾部分总结其带来的益处 1If we don&#x27;t feel self-confident about our ability,we will not be able to take up a task and get it done.If we dont&#x27;t have confidence in our competence,we won&#x27;t be courageous enough to face up to a challenge.Only when we think we are capable of doing something,will we be able to succeed in doing that. 12Self-confidence is different from complacency(自满).It is solidly(坚固地，坚硬地) based on our knowledge,judgement,abilities and skills.To develop it takes years of learning and to consolidate(巩固) it takes years of practicing.Self-confidence means more than mental preparedness(准备就绪).It serves as an indication(象征，暗示，迹象) of professional readiness(敏捷；准备就绪).It is also an expression of intellectual maturity. 1With self-confidence,we are able to firmly take each step in our journey of life(坚定地迈出人生旅途中的每一步) and it is self-confidencet that has been paving the way to the ultimate(最终的，最后的) goal of our professional career(为我们职业生涯的终极目标铺路). 单词1234567副词应用：solidly(坚固地，坚硬地)/firmlymore than + n./no longer/by and largeincreaselyespeciallyAs a result/For instanceIrresistibly 12345同义转换：feel self-confident about our ability/have confidence in our competencetake up a task/face up to a challengeare capable of doing/be able to take/be courageous enough to facemean/ an indication(象征，暗示，迹象) of/an expression of","categories":[],"tags":[]},{"title":"四级--词汇","slug":"英语/CET4--词汇","date":"2021-12-06T01:41:11.803Z","updated":"2021-12-14T00:53:53.922Z","comments":true,"path":"2021/12/06/英语/CET4--词汇/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/06/%E8%8B%B1%E8%AF%AD/CET4--%E8%AF%8D%E6%B1%87/","excerpt":"","text":"2021/12/13 airline,carrier,aviation,aircraft,cabin seat n.航空公司，航线；客运航空公司；航空；飞机；机舱座位 definitely，alternatively，incredibly,possibly adv.肯定，当然，确实；确切地，明确地，清楚地 adv.或者，要么 adv.极端的，及其；难以置信地 adv.可能，或许；尽可能，尽量 budget adj.廉价的 v.安排开支，编制预算 across the globe 全球 integrate various shades/tones of blue 融合(v.合并,成为一体;加入,融入群体)各种色调(n.)的蓝 aircraft interior n.内部，室内设计 reinforce v.加固，强化 induce/endure v.引起，诱导/忍耐，忍受 bold adj.大胆的 the principal aim adj.最重要的，主要的 n.大学校长，学院院长；本金，资本；主角 domestic，earthy adj.家庭的；朴实的 become the color of choice 首选的，广受欢迎的 to the point of complete inaction 达到完全不作为的程度 imitate v.模仿，效仿 rebell v.反叛；叛逆；反对（rebell against） indication n.表明，显示；象征 be unable and unprepared to endure the long haul 无法或不愿意忍受长期的煎熬 adj.不愿意的，不甘心的，未准备好的 长期艰巨的任务。 inaction n.不行动，不采取措施；无作为 destructive adj.破坏性的，毁灭性的 proposition n.提议；主张，观点；（美国）法律修正议案；事情，问题，任务 coincidence n.（令人吃惊的）巧合，巧事；同时存在；（意见）相同，一致 credit card,debt,loan,mortgage,financial difficulty,financial stress n.信用卡；债务；贷款；按揭贷款，房屋抵押贷款；经济困难 trust,efficiency,quietness,coolness,reflection,calm n.信任；高效；平静；冷静；沉思；沉着 domestic,natural,earthy adj.居家，自然，质朴 conservative,agreeable,corporate adj.保守的；令人愉快的；公司的 trustworthy adj.可靠的，值得信赖的 natural adj.天然的，自然地；正常的，意料之中的；天生的，本能的 n.有天赋的人，擅长做某事的人 associated v.-ed 联想，联系；交往；表明支持，表示同意 adj.相关的；有联系的；联合的 psychology n.心理学，心理课堂 leading adj.杰出的 brand n.品牌 recognizable adj.易于识别的，可承认的 primary concern maximize v.使增加到最大限度；充分利用 softened adj.柔和的 traditional adj.传统的，习俗的，惯例地；守旧地 simply stick 就这么沿用下来 adv.仅仅，不过；确实，简直；简单地，简朴地；不过，只是 v.经久驻留 symbolize v.象征，代表 encounter v.遭遇，遇到 convince v.坚信，深信，确信 argue v.争吵，争辩（argue with sb about/over sth)；论证，说理（argue for/against sth) the normal ups and downs of investment markets 投资市场正常的涨涨跌跌 adj.正常的，一般的；精神正常的，意识健全的 n.常态，通常标准，一般水平 起伏，涨跌，兴衰 gateway，household，pattern n.大门入口，途径;家庭，一家人;模式 statement n.声明，陈述；结算单，报表（financial statement财务报表） era n.souvenir n.stall n.fruit n.advance n.phrase bookintroduce v.indispensable adj.adequate adj.casual adj.lingual,linguistic adj.when it comes to …find the right way to deal with sthmake a big effort to do sthbe not as good as sb accessible adj.account v.adaptation n.appropriately adv.considerable adj.effective adj.ladder n.miseread v.nomination n.overlook v.promote v.senior n.submission n.suggest v.thankfullg adv.separate v.utter v.pioneering adj.pursuit n.in one’s lifetimeplay an importannt part/role in …higher educationadvance and promote gender equalityundergraduate n./adj.postgraduate n./adj.make upacademic staffat senior levelsstark adj.median adj. knit(knitting,knitter) v.(crocheter)stitch v.handiwork n.crafts n.throughout college prep.thereafter adv.hook v.on one’s way to doing sthrestore v./ renewal n.council n.swell the ranksin honer ofpioneer n.repetitive adj.induce a relaxed statebe associated withinitial learning curveheart ratetangible adj.self-esteem/self-respect n.singular adj.boost my spiritshundreds of thousands of …routinely adv.fulfillment n.a prematurely born babyintensive care unit(ICU)stick withcope withprompte v.go well adv.replace A with Bconduct v.heal for v.autoimmune adj.mindless adj.stiff agj.disorder n.significant improvementslessen their fearswellness n.therapeutic adi.respondent n.clinically adv.persistent adj.redirect their focus/ divert their attention from their painprocessat onceregister pain signalssample n.be engaged in …diminished adj.speculate v.nerve pathwaysintellectually adv.sustained adj.maximize v.like-minded adj.for onestay away from tobaccoenhance v.prolong one’s lifekeenly adv.relieve stresssuffer mild cognitive damage 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869vanish v.prospect n.there is almost no hard evidence for ... other than ...pilot adj.autopilot n.the bulk ofa shifting of gearsterrifying adj.a rebirth n.choose purpose over happinessgive priority tofar from gloomyphase v.identity n.built up your resourcesprecisely adv.foundation n.secure adj.sowing n.reap v.the runleap v.venture n.measured adj.haste n.energetic adj.presidential candidatelifespan n.narrativedescent cn.a turning pointtake full advantage ofmisrepresent real liferosy adj.burdensome adj.undergo(undergoes) v.turn offdone adj.science fictionincreasingly adv.absorb v.fragmented adj.bizarre adj.popular notionretain v.replay v.a neural virtual realityvivid adj.sleep disorderssleepwalk v.physical movementvideotape the subjectsdraw v.integrate ... into10-fold adj.respondent,candidate,subject,participantbedtime n.a napa study sessionodd n.intensified adj.systematize v.substitute ... with","categories":[],"tags":[]},{"title":"PTA 数据结构","slug":"数据结构/树与二叉树","date":"2021-12-05T14:05:20.243Z","updated":"2021-12-11T07:48:51.064Z","comments":true,"path":"2021/12/05/数据结构/树与二叉树/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include&lt;iostream&gt;using namespace std;struct BiNode&#123; int data; BiNode *lchild,*rchild;&#125;;class BiTree&#123;public: BiTree() //构造 &#123; root=Creat(); &#125;; ~BiTree() //析构 &#123; Release(root); &#125;; void PreOrder() //前序遍历 &#123; PreOrder(root); &#125;; void InOrder() //中序遍历 &#123; InOrder(root); &#125;; void PostOrder() //后序遍历 &#123; PostOrder(root); &#125;; void LevelOrder() //层序遍历 &#123; LevelOrder(root); &#125;;private://调用 BiNode* Creat();//void Creat(BiNode* &amp;root); void Release(BiNode *bt); void PreOrder(BiNode *bt); void InOrder(BiNode *bt); void PostOrder(BiNode *bt); void LevelOrder(BiNode *bt); BiNode *root;&#125;;BiNode* BiTree::Creat()&#123; BiNode *bt; char ch; cin&gt;&gt;ch; if(ch==&#x27;#&#x27;)bt=NULL; else &#123; bt = new BiNode; bt-&gt;data = ch; bt-&gt;lchild = Creat(); bt-&gt;rchild = Creat(); &#125; return bt;&#125;void BiTree::Release(BiNode *bt)&#123; if(bt=NULL)return; else &#123; Release(bt-&gt;lchild); Release(bt-&gt;rchild); delete bt; &#125;&#125;void BiTree::PreOrder(BiNode *bt)&#123; if(bt==NULL)return; cout&lt;&lt;bt-&gt;data&lt;&lt;&quot; &quot;; PreOrder(bt-&gt;lchild); PreOrder(bt-&gt;rchild);&#125;void BiTree::InOrder(BiNode *bt)&#123; if(bt==NULL)return; InOrder(bt-&gt;lchild); cout&lt;&lt;bt-&gt;data&lt;&lt;&quot; &quot;; InOrder(bt-&gt;rchild);&#125;void BiTree::PostOrder(BiNode*bt)&#123; if(bt==NULL)return; PostOrder(bt-&gt;lchild); PostOrder(bt-&gt;rchild); cout&lt;&lt;bt-&gt;data&lt;&lt;&quot; &quot;;&#125;void BiTree::LevelOrder(BiNode *bt)&#123; BiNode *que[101],*t; int first=0,last=0; que[last++]=bt; while(last!=first) &#123; t = que[first++]; cout&lt;&lt;t-&gt;data&lt;&lt;&quot; &quot;; if(t-&gt;lchild)que[last++]=t-&gt;lchild; if(t-&gt;rchild)que[last++]=t-&gt;rchild; &#125;&#125;int main()&#123; BiTree bt; bt.PostOrder();&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[]},{"title":"PTA 数据结构","slug":"数据结构/PTA 数据结构","date":"2021-12-04T15:24:25.366Z","updated":"2021-12-12T12:21:44.321Z","comments":true,"path":"2021/12/04/数据结构/PTA 数据结构/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/PTA%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"第一章 绪论判断题1-1 数据元素是数据的最小单位。F(数据项) 1-2 数据的逻辑结构是指数据的各数据项之间的逻辑关系。F（数据元素之间） 1-3 数据结构概念包括数据之间的逻辑结构、数据在计算机中的存储方式和数据的运算三个方面。T 1-4 数据结构的抽象操作的定义与具体实现有关。F 1-5 算法和程序没有区别，在数据结构中二者是通用的。F 1-6 数据结构包括数据对象集以及它们的逻辑结构和物理结构，还包括与数据对象相关联的操作集，以及实现这些操作的高效的算法。T 选择题（错题：2-9,2-13）2-1 在 Data_Structure = (D，R)中，D 是（ ）的有限集合。 A.数据元素 2-2 以下关于数据结构的说法中错误的是（ ）。 A.数据结构相同，对应的存储结构也相同 2-4 算法分析的目的是( ) C.分析算法的效率以求改进 2-5 算法分析的两个主要方面是( ) A.空间复杂度和时间复杂度 2-6 采用链结构存储线性表时，其地址（ ）。 B.连续不连续都可以 2-7 一个正确的算法应该具有 5 个特性，除输入、输出特性外，另外 3 个特性是（ ）。 A.确定性、可行性、有穷性 2-8 算法的时间复杂度取决于（ ） C.问题的规模和待处理数据的初态 2-9 以下数据结构中，哪一个是线性结构（ ） D.串 2-10 以下数据结构中，（ ）是非线性数据结构 B.字符串 2-11 算法的时间复杂度与（ ）有关。 A.问题规模 2-12 以下程序段的空间复杂度为 12345int a = 1, b = 1, i;for (i=0; i&lt;=10; i++) &#123; b += a; a = b - a;&#125; B.O(1) 2-13 下列程序段的时间复杂度是（ ）。 1234count=0;for(k=1;k&lt;=n;k*=2) for(j=1;j&lt;=n;j++) count++; C.O*(nlog2*n) 2-14 下面说法中，错误的是（ ）。 ⅰ.算法原地工作的含义是指不需要任何额外的辅助空间 ⅱ.在相同规模n下，复杂度为O(n)的算法在时间上总是优于复杂度为O(2n)的算法 ⅲ.所谓时间复杂度，是指最坏情况下估算算法执行时间的一个上界 ⅳ.同一个算法，实现语言的级别越高，执行效率越低 C.ⅰ,ⅳ 2-15 算法的计算量的大小称为算法的____。 B.复杂度 2-16 在下面的程序段中，对x的赋值语句的频度为（ ） 123for (i=1;i&lt;=n;i++) for (j=1;j&lt;=n;j++) x=x+1; C.O(n2) 2-17 下面程序段的时间复杂度是 ( ) 123i ＝ 0；while（i&lt;=n） i = i * 3； D.O(log3n) 填空题（错题：4-1, 4-4, 4-6，4-7，4-10）4-1 算法效率的比较 假设为解决某问题而设计的若干算法的时间复杂度分别为： A) O(n)B) O(n2)C) O(log2​n)D) O(nlog2​n)E) O(2n)F) O(n​)G) O(n!)H) O(1)I) O(n**n​)J) O(n**n) 这些算法按效率由高到低的顺序是 HCFADIBEGJ 4-2 基本术语 数据 是客观事物的符号表示，是所有能输入到计算机中并被计算机程序处理的符号的总称。 4-3 数据结构的数学定义 数据结构的数学定义为一个二元组： D**S=(D,R) 其中：D 是数据元素的有限集，R 是 D 上的关系 的有限集。 4-4 存储结构存储结构包括数据元素的表示和关系的表示。 4-5 基本术语 抽象数据类型 一般指由用户定义的、表示应用问题的数学模型，以及定义在该模型上的一组操作。 4-6 在数据结构中，数据的逻辑结构分为线性结构和非线性结构 。 4-7 数据结构由数据的逻辑结构、存储结构 和运算|操作三部分组成。 4-8 算法的特性 一个算法必须满足以下五个重要特性： (1) 有穷性 一个算法必须总是在执行有穷步后结束，且每一步都可以有穷有时间内完成。 (2) 确定性 一个算法中每一条指令必须有确切的含义。 (3) 可行性 算法中的所有操作都可以通过已经实现的基本操作运算执行有限次来实现。 (4) 输入一个算法有零个或多个输入。 (5) 输出一个算法有一个或多个输出，它们是算法进行信息加工后得到的结果。 4-9 基本术语 数据元素是数据的基本单位，数据项是数据的不可分割最小单位。其中：前者在计算机中通常作为一个整体进行考虑和处理，它可以由一个或多个后者组成。 4-10 数据的实例 观察下面的表格： 学号 姓名 性别 语文 数学 物理 化学 英语 总分 15160101 王克强 男 87 95 93 76 84 435 15160102 刘铭志 男 77 82 80 97 95 431 15160103 孙勇 男 78 85 87 86 65 401 15160104 李瀚东 男 93 82 72 75 95 417 15160105 赵敏 女 95 90 88 82 96 451 15160106 张毅 男 78 76 65 81 80 380 15160107 柳青 女 82 91 82 84 85 424 15160108 蔡文婷 女 85 78 80 86 95 424 整张表格称为一个 数据对象，其中每一行称为一个 数据元素，任意一行中的每一个栏目称为一个数据项。 4-11 沃斯的名言 瑞士科学家尼古拉斯·沃斯(Niklaus Wirth)有一句在计算机领域里人尽皆知的名言： 算法 + 数据结构 = 程序 编程题7-1 求最小值和次小值 (25 分) 123456789101112131415161718192021222324252627282930313233343536#include&lt;iostream&gt;using namespace std;int main()&#123; int n,x; cin&gt;&gt;n; cin&gt;&gt;x; if(n&gt;1)&#123; int mini = x; int mini2 = x; int a[n]=&#123;x&#125;; for(int i=1;i&lt;n;i++) &#123; cin&gt;&gt;a[i]; if(mini&gt;a[i])mini=a[i]; &#125; for(int i=0;i&lt;n;i++) &#123; if(a[i]==mini)continue; if(mini2==mini)mini2=a[i]; if(mini2&gt;a[i])mini2=a[i]; &#125; if(mini==mini2) cout&lt;&lt;&quot;There is no second smallest element&quot;&lt;&lt;endl; else cout&lt;&lt;mini&lt;&lt;&quot; &quot;&lt;&lt;mini2; &#125; else &#123; cout&lt;&lt;&quot;Invalid Input&quot;&lt;&lt;endl; &#125; return 0;&#125; 7-2 求素数个数 (30 分) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;iostream&gt;using namespace std;int main()&#123; int n,num=0; cin&gt;&gt;n; int *a=new int[n+1]; for(int i=2;i&lt;=n;i++) a[i]=1; a[0]=a[1]=0; for(int i=2;i*i&lt;=n;i++) &#123; if(a[i]) &#123; for(int j=2*i;j&lt;=n;j+=i) a[j]=0; &#125; &#125; for(int i=2;i&lt;=n;i++) &#123; if(a[i])num++; &#125; cout&lt;&lt;num&lt;&lt;endl; return 0;&#125;/*#include&lt;iostream&gt;using namespace std;int main()&#123; int n,num=1,flag=1; cin&gt;&gt;n; if(n==1)cout&lt;&lt;&quot;0&quot;&lt;&lt;endl; else if(n==2)cout&lt;&lt;&quot;1&quot;&lt;&lt;endl; else &#123; for(int i=3;i&lt;=n;i+=2) &#123; for(int j=3;j*j&lt;=i;j+=2) &#123; if(i%j==0) &#123; flag=0; break; &#125; &#125; if(flag) num++; flag=1; &#125; cout&lt;&lt;num&lt;&lt;endl; &#125; return 0;&#125;*//*#include&lt;iostream&gt;using namespace std;int main()&#123; int n,num=0,flag=1; cin&gt;&gt;n; for(int i=2;i&lt;=n;i++) &#123; for(int j=2;j*j&lt;=i;j++) &#123; if(i%j==0) &#123; flag=0; break; &#125; &#125; if(flag) &#123; num++; &#125; flag=1; &#125; cout&lt;&lt;num&lt;&lt;endl; return 0;&#125;*/ 第二章 线性表判断题（错题：1-2,1-4,1-15,1-17）1-1 顺序存储方式只能用于存储线性结构。F 1-2在顺序表中取出第i个元素所花费的时间与i成正比。F 1-3 线性表的顺序存储表示优于链式存储表示。F 1-4带头结点的单循环链表中，任一结点的后继结点的指针域均不空。T 1-5 顺序表 - 存储结构 顺序表中逻辑上相邻的元素，其物理位置也一定相邻。T 1-6 链式存储的优点是插入、删除元素时不会引起后续元素的移动，缺点是只能顺序访问各元素。T 1-7 线性表若采用链式存储结构时，要求内存中可用存储单元的地址一定不连续。F 1-8 链表是采用链式存储结构的线性表,进行插入、删除操作时，在链表中比在顺序存储结构中效率高。T 1-9 若某线性表最常用的操作是存取任一指定序号的元素和在最后进行插入和删除运算，则利用顺序表存储最节省时间。T 1-10 对于顺序存储的长度为N的线性表，删除第一个元素和插入最后一个元素的时间复杂度分别对应为O(1)和O(N)。F 1-11 在线性表的顺序存储结构中，插入和删除元素时，移动元素的个数与该元素的位置有关。T 1-12 顺序存储方式的优点是存储密度大，且插入、删除运算效率高。F 1-13 在具有N个结点的单链表中，访问结点和增加结点的时间复杂度分别对应为O(1)和O(N)。F 1-14 线性表采用链式存储表示时，所有结点之间的存储单元地址可以连续也可以不连续。T 1-15在单链表中，要访问某个结点，只要知道该结点的指针即可。因此，单链表是一种随机存取结构。F 1-16 在具有头结点的链式存储结构中，头指针指向链表中的第一个元素结点。F 1-17在一个设有头指针和尾指针的单链表中，执行删除该单链表中最后一个元素的操作与链表的长度无关。F 1-18 循环链表可以做到从任一结点出发，访问到链表的全部结点。T 1-19 在单链表中，逻辑上相邻的元素，其物理位置必定相邻。F 1-20 在双向链表中，可以从当前结点出发访问到任何一个结点。T 选择题(错题：2-10,2-13,2-16,2-20)2-1 在一个长度为n的顺序表中，向第i个元素(1≤i≤n+1)位置插入一个新元素时需要从后向前移动多少个元素。 B.n-i+1 2-2 对于线性表，在顺序存储结构和链式存储结构中查找第k个元素，其时间复杂性分别是多少？ D.O(1)和O(k) 2-3 在顺序结构表示的线性表中，删除第i个元素（数组下标为i-1)，需要把后面的所有元素都往前挪一位，相应的语句是： 12for (___________ ) PtrL-&gt;Data[j-1]=PtrL-&gt;Data[j]; 其中空缺部分的内容应该是 A.j = i; j&lt; = PtrL-&gt;Last; j++ 2-4 向一个有127个元素的顺序表中插入一个新元素并保持原来顺序不变，平均要移动的元素个数为（ ） B.63.5 2-5 顺序表是线性表的( ) B.顺序存储结构 2-6 以下说法错误的是 ( )。 C.在链表上实现读表元运算的平均时间复杂度为O（1） 2-7 哪个选项不是线性表的链式存储结构（ ） B.顺序表 2-8 在向表中第i个元素（1≤i≤n+1）位置插入一个新元素时，为保持插入后表中原有元素的相对次序不变，需要从后向前依次后移（ ）个元素。 B.n-i+1 2-9 在删除表中第i个元素时，同样地，为保持删除后表中原有元素的相对次序不变，需要从前向后依次前移（ ）个元素。 A.n-i 2-10与单链表相比，双链表的优点之一是（）。 D.顺序访问相邻结点更加灵活 2-11 在单链表中，要删除某一指定结点，必须先找到该结点的（）。 A.直接前驱 2-12 循环链表的主要优点是（）。 D.从表中的任意结点出发都能扫描到整个链表 2-13若某表最常用的操作是在最后一个结点之后插入一个结点或删除最后一个结点，则采用（）存储方式最节省运算时间。 D.带表头附加结点的双循环链表 2-14 单链表又称为线性链表，在单链表上实施插入和删除操作（ ）。 B.不需移动结点，只需改变结点指针 2-15 链表不具有的特点是( )。 A.可随机访问任一个元素 2-16下面关于线性表的叙述中，错误的是____。 B.线性表采用顺序存储，便于进行插入和删除操作。 2-17 单链表L（带头结点）为空的判断条件是____。 B.L-&gt;next==NULL 2-18 在单链表指针为p的结点之后插入指针为s的结点，正确的操作是：（ ）。 B.s-&gt;next=p-&gt;next;p-&gt;next=s 2-19 对于一个头指针为head的带头结点的单链表，判定该表为空表的条件是（ ） B.head→next==NULL 2-20设一个链表最常用的操作是在末尾插入结点和删除尾结点，则选用( )最节省时间。 D.带头结点的双循环链表 填空题4-1 顺序表 - 地址计算 假设顺序表第 1 个元素的内存地址是 100，每个元素占用 2 字节内存空间，则第 5 个元素的内存地址是 108 4-2 在有n个元素的顺序表中删除任意一个元素所需移动元素的平均次数为 （n-1)/2 4-3 在有n个元素的顺序表中的任意位置插入一个元素所需移动元素的平均次数为 n/2 4-4 在长度为n的顺序表L中将所有值为x的元素替换成y，该算法的时间复杂度为 O(n) 4-5 在顺序表中，逻辑上相邻的元素，其物理位置 一定 相邻。在单链表中，逻辑上相邻的元素，其物理位置 不一定 相邻。 4-6 对于顺序表的插入算法insert_sqlist来说，若以结点移动为标准操作，则插入算法的在最坏情况下的移动次数为 n ，时间复杂度是 **O(n)**。在平均情况下的移动次数为 n/2 ，时间复杂度是 **O(n)**。 4-7 线性表L=(a1, a2, … , an)用数组表示，假定删除表中任一元素的概率相同，则删除一个元素平均需要移动元素的个数是 (n-1)/2 程序填空题5-1 顺序表删除操作。 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;using namespace std;#define OK 1#define ERROR 0#define MAXSIZE 100typedef int datatype;typedef struct &#123; datatype *elem; int length;&#125; SqList;int ListDelete_Sq(SqList &amp;L, int i) &#123; if ((i &lt; 1) || (i &gt; L.length)) return ERROR; for (int j = i; j &lt;= L.length; j++) ; (2&#x27;) --L.length; return OK;&#125;int main() &#123; SqList L; int i = 0, n,a; datatype e; L.elem = new datatype[MAXSIZE]; L.length = 0; cin &gt;&gt; n; for (i=0;i&lt;n;i++) cin &gt;&gt; L.elem[i]; L.length = i; cin &gt;&gt; a; if (ListDelete_Sq(L, a)) &#123; for (i = 0; i &lt; L.length; i++) if(i==0) cout &lt;&lt; L.elem[i]; else cout &lt;&lt; &quot; &quot; &lt;&lt; L.elem[i]; &#125; else cout &lt;&lt; &quot;ERROR&quot;; return 0;&#125; 5-2单链表删除操作。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;iostream&gt;using namespace std;#define OK 1#define ERROR 0typedef int ElemType;typedef struct LNode &#123; ElemType data; struct LNode *next; &#125; LNode, *LinkList; void CreateList(LinkList &amp;L, int n) ;//该函数未显示细节 int ListDelete_L(LinkList &amp;L, int i) &#123; LinkList p, q; int j; p = L; j = 0; while((p-&gt;next) &amp;&amp; (j &lt;i)) (2&#x27;) &#123; p = p-&gt;next; ++j; &#125; if (!(p-&gt;next) || (j &gt; i - 1)) return ERROR; q = p-&gt;next; p-&gt;next=q-&gt;next;(2&#x27;) delete q; return OK;&#125; void print(LinkList &amp;L)&#123; LinkList p; int flag=1; p = L-&gt;next; while (p) &#123; if(flag) cout &lt;&lt; p-&gt;data; else cout &lt;&lt; &quot; &quot;&lt;&lt; p-&gt;data; flag=0; p = p-&gt;next; &#125;&#125;int main() &#123; LinkList L; ElemType e; int length; int i; cin &gt;&gt; length; CreateList(L, length); cin &gt;&gt; i; ListDelete_L(L,i); print(L); return 0;&#125; 函数题6-1 求顺序表最大值 (10 分) 123456789int GetMax(SqList L)&#123; int maxi=0; for(int i=0;i&lt;L.length;i++) &#123; if(maxi&lt;L.elem[i])maxi=L.elem[i]; &#125; return maxi;&#125; 6-2 单链表逆置* (10 分) 1234567891011121314void Reverse(NODE *head)&#123; NODE *p,*p1,*p2,*p3; p = head-&gt;next; p1 = head; p1-&gt;next = NULL; while(p!=NULL) &#123; p2 = p; p = p-&gt;next; p2-&gt;next = p1-&gt;next; p1-&gt;next = p2; &#125;&#125; 6-3 单链表统计正数个数 (6 分) 123456789101112int PositiveInt(LinkList L)&#123; LNode *p; int n=0; p = L-&gt;next; while(p!=NULL) &#123; if(p-&gt;data&gt;0)n++; p = p-&gt;next; &#125; return n;&#125; 编程题7-1 学生顺序表的建立 (10 分) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576法一：#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;iomanip&gt;using namespace std;struct Node&#123; int id; string name; float s1,s2,s3; Node *next;&#125;;int main()&#123; int n; int id; string name; float s1,s2,s3; Node *p,*first,*last=NULL; last = new Node; first = last; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;id&gt;&gt;name&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3; p = new Node; p-&gt;id = id; p-&gt;name = name; p-&gt;s1 = s1; p-&gt;s2 = s2; p-&gt;s3 = s3; last-&gt;next = p; last = p; &#125; last-&gt;next = NULL; p = first-&gt;next; while(p!=NULL) &#123; cout&lt;&lt;p-&gt;id&lt;&lt;&quot; &quot;&lt;&lt;fixed&lt;&lt;setprecision(1)&lt;&lt;p-&gt;name&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;s1&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;s2&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;s3&lt;&lt;endl; p = p-&gt;next; &#125; return 0;&#125;法二：#include &lt;iostream&gt;#include &lt;iomanip&gt;using namespace std;struct Students&#123; int ID; string name; double score1; double score2; double score3; &#125;students[5];int main()&#123; int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;students[i].ID&gt;&gt;students[i].name&gt;&gt;students[i].score1&gt;&gt;students[i].score2&gt;&gt;students[i].score3; &#125; cout.precision(1); for(int i=0;i&lt;n;i++) &#123; cout&lt;&lt;students[i].ID&lt;&lt;&quot; &quot;&lt;&lt;students[i].name&lt;&lt;&quot; &quot;&lt;&lt;fixed&lt;&lt;students[i].score1&lt;&lt;&quot; &quot;&lt;&lt;fixed&lt;&lt;students[i].score2&lt;&lt;&quot; &quot;&lt;&lt;fixed&lt;&lt;students[i].score3; if(i!=n-1) cout&lt;&lt;endl; &#125; return 0;&#125; 7-2 求两个一元多项式的和 (20 分)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129法一：链表#include&lt;iostream&gt;using namespace std;struct Node&#123; int coef,exp; Node *next;&#125;;int main()&#123; int n,coef,exp; Node *p,*p1,*q,*q1,*temp; Node *first1,*first2,*last; last = new Node; first1=last; cin&gt;&gt;n; for(int i=0; i&lt;n; i++) &#123; cin&gt;&gt;coef&gt;&gt;exp; p=new Node; p-&gt;coef = coef; p-&gt;exp = exp; last-&gt;next=p; last = p; &#125; last-&gt;next = NULL; last = new Node; first2=last; cin&gt;&gt;n; for(int i=0; i&lt;n; i++) &#123; cin&gt;&gt;coef&gt;&gt;exp; p=new Node; p-&gt;coef = coef; p-&gt;exp = exp; last-&gt;next=p; last = p; &#125; last-&gt;next = NULL; p=first1-&gt;next; p1=first1; q=first2-&gt;next; while(p!=NULL&amp;&amp;q!=NULL) &#123; if(p-&gt;exp&gt;q-&gt;exp) &#123; p=p-&gt;next; p1=p1-&gt;next; &#125; else if(p-&gt;exp&lt;q-&gt;exp) &#123; temp=q-&gt;next; p1-&gt;next=q; q-&gt;next=p; q = temp; &#125; else &#123; p-&gt;coef+=q-&gt;coef; if(p-&gt;coef==0) &#123; p1-&gt;next=p-&gt;next; delete p; p=p1-&gt;next; &#125; else &#123; p=p-&gt;next; p1=p1-&gt;next; &#125; q = q-&gt;next; &#125; &#125; if(q!=NULL)p1-&gt;next=q; p=first1-&gt;next; if(p!=NULL) &#123; while(p-&gt;next!=NULL) &#123; cout&lt;&lt;p-&gt;coef&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;exp&lt;&lt;&quot; &quot;; p=p-&gt;next; &#125; cout&lt;&lt;p-&gt;coef&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;exp&lt;&lt;endl; &#125; else cout&lt;&lt;0&lt;&lt;&quot; &quot;&lt;&lt;0&lt;&lt;endl; return 0;&#125;法二：数组#include&lt;iostream&gt;using namespace std;int a[1001]=&#123;0&#125;;int main()&#123; int n,coef,exp; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;coef&gt;&gt;exp; a[exp]=coef; &#125; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;coef&gt;&gt;exp; a[exp]+=coef; &#125; n=0; for(int i=1000;i&gt;-1;i--) &#123; if(n==0&amp;&amp;a[i]) &#123; cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;&lt;&lt;i; n=1; &#125; else if(a[i]) cout&lt;&lt;&quot; &quot;&lt;&lt;a[i]&lt;&lt;&quot; &quot;&lt;&lt;i; &#125; if(n)cout&lt;&lt;endl; else cout&lt;&lt;0&lt;&lt;&quot; &quot;&lt;&lt;0&lt;&lt;endl;&#125; 7-3 两个有序链表合并（新表不含重复元素） (20 分) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242法一：刘俊兄弟的代码……emm……#include&lt;iostream&gt;using namespace std;int main()&#123; int a[1000], b[1000]; int flog = 1; int lengtha = 0, lengthb = 0; while (flog) &#123; int c; cin &gt;&gt; c; if (c == -1) flog = 0; else &#123; a[lengtha++] = c; &#125; &#125; flog = 1; while (flog) &#123; int c; cin &gt;&gt; c; if (c == -1) flog = 0; else &#123; b[lengthb++] = c; &#125; &#125; int j = 0; for (int i = lengtha ; i &lt; lengtha + lengthb; i++) &#123; a[i] = b[j++]; &#125; if (lengtha + lengthb == 0) &#123; cout &lt;&lt; &quot;NULL&quot;; &#125; int n = lengtha + lengthb; for (int i = 0; i &lt; n-1; i++) //冒泡循环 &#123; for (int j = i + 1; j &lt; n; j++)//从i后的一个元素一直往len-1位置寻找 &#123; if (a[j] == a[i]) //如果发现重复 &#123; for (int k = j + 1; k &lt; n; k++)//j+1的位置到len-1的位置 &#123; a[k - 1] = a[k]; //将后面的数依次赋值给前一个位置 &#125; n--; //数组长度-1 j--; //重复点再次进行查重 &#125; &#125; &#125; for(int i=0;i&lt;n-1;i++) &#123; for (int j = 0; j &lt; n - i-1; j++) &#123; if (a[j] &gt; a[j + 1]) &#123; int temp = a[j]; a[j] = a[j + 1]; a[j + 1] = temp; &#125; &#125; &#125; for (int i = 0; i &lt; n-1; i++) &#123; cout &lt;&lt; a[i]&lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; a[n - 1]&lt;&lt;endl; return 0;&#125;法二：数组#include&lt;iostream&gt;using namespace std;int a1[10000];int a2[10000];int main()&#123; int x,n=0; while(1) &#123; cin&gt;&gt;x; if(x == -1)break; a1[n++] = x; &#125; while(1) &#123; cin&gt;&gt;x; if(x == -1)break; a1[n++] = x; &#125; for(int i=0;i&lt;n-1;i++) &#123; int mini=i; for(int j=i+1;j&lt;n;j++) &#123; if(a1[mini]&gt;a1[j])mini=j; &#125; if(mini!=i)swap(a1[mini],a1[i]); &#125; int flag=0; for(int i=0;i&lt;n;i++) &#123; if(a1[i]==flag)a1[i]=0; else flag = a1[i];//? &#125; int n1=0; for(int i=0;i&lt;n;i++) &#123; if(a1[i]) a2[n1++]=a1[i]; &#125; for (int i = 0; i &lt; n1-1; i++) &#123; cout &lt;&lt; a2[i]&lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; a2[n1 - 1]&lt;&lt;endl; return 0;&#125;法三：链表#include&lt;iostream&gt;using namespace std;struct Node&#123; int data; Node *next;&#125;;int main()&#123; int x,flag=-1; Node *first1,*first2,*first3,*p,*p1,*p2,*last; last=new Node; first1 = last; while(1) &#123; cin&gt;&gt;x; if(x == -1)break; if(x == flag)continue; p = new Node; p-&gt;data = x; flag = x; last-&gt;next = p; last = p; &#125; last-&gt;next = NULL; last=new Node; first2 = last; flag = -1; while(1) &#123; cin&gt;&gt;x; if(x == -1)break; if(x == flag)continue; p = new Node; p-&gt;data = x; flag = x; last-&gt;next = p; last = p; &#125; last-&gt;next = NULL; last = new Node; first3 = last; p1 = first1-&gt;next; p2 = first2-&gt;next; while(p1!=NULL||p2!=NULL) &#123; if(p1!=NULL&amp;&amp;p2!=NULL) &#123; if(p2-&gt;data&gt;p1-&gt;data) &#123; p= new Node; p-&gt;data = p1-&gt;data; last-&gt;next = p; last = p; p1=p1-&gt;next; &#125; else if(p2-&gt;data&lt;p1-&gt;data) &#123; p= new Node; p-&gt;data = p2-&gt;data; last-&gt;next = p; last = p; p2=p2-&gt;next; &#125; else if(p2-&gt;data==p1-&gt;data) &#123; p= new Node; p-&gt;data = p2-&gt;data; last-&gt;next = p; last = p; p2=p2-&gt;next; p1=p1-&gt;next; &#125; &#125; else if(p2==NULL) &#123; p= new Node; p-&gt;data = p1-&gt;data; last-&gt;next = p; last = p; p1=p1-&gt;next; &#125; else if(p1==NULL) &#123; p= new Node; p-&gt;data = p2-&gt;data; last-&gt;next = p; last = p; p2=p2-&gt;next; &#125; &#125; last-&gt;next = NULL; p= first3-&gt;next; if(p!=NULL) &#123; while(p-&gt;next!=NULL) &#123; cout&lt;&lt;p-&gt;data&lt;&lt;&quot; &quot;; p = p-&gt;next; &#125; cout&lt;&lt;p-&gt;data&lt;&lt;endl; &#125; else cout&lt;&lt;&quot;NULL&quot;&lt;&lt;endl; return 0;&#125; 7-4 在有序链表中插入数据 (20 分) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;iostream&gt;using namespace std;struct Node&#123; int data; Node *next;&#125;;int main()&#123; int n,x; Node *p,*p2,*p1,*first,*last=new Node; first=last; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;x; p = new Node; p-&gt;data = x; last-&gt;next = p; last = p; &#125; last-&gt;next = NULL; cin&gt;&gt;x; p1 = first-&gt;next; p2 = first; while(p1!=NULL) &#123; if(x == p1-&gt;data)break; if(x&lt;p1-&gt;data) &#123; p = new Node; p-&gt;data = x; p-&gt;next = p1; p2-&gt;next = p; break; &#125; else if(x&gt;p1-&gt;data&amp;&amp;(p1-&gt;next==NULL||x&lt;p1-&gt;next-&gt;data)) &#123; p = new Node; p-&gt;data = x; p-&gt;next = p1-&gt;next; p1-&gt;next = p; break; &#125; p1 = p1-&gt;next; p2 = p2-&gt;next; &#125; if(first-&gt;next == NULL) &#123; p = new Node; p-&gt;data = x; p-&gt;next = NULL; first-&gt;next = p; &#125; p = first-&gt;next; while(p-&gt;next!=NULL) &#123; cout&lt;&lt;p-&gt;data&lt;&lt;&quot; &quot;; p = p-&gt;next; &#125; cout&lt;&lt;p-&gt;data&lt;&lt;endl; return 0;&#125; 第三章 栈和列表判断题（错题：1-10）1-1 若一个栈的输入序列为1，2，3，…，N，输出序列的第一个元素是i，则第j个输出元素是j−i−1。F 1-2 所谓“循环队列”是指用单向循环链表或者循环数组表示的队列。F 1-3 在对不带头结点的链队列作出队操作时，不会改变头指针的值。F 1-4 不论是入队列操作还是入栈操作,在顺序存储结构上都需要考虑”溢出”情况。T 1-5 队列和栈都是运算受限的线性表，只允许在表的两端进行运算。F 1-6 栈和队列的存储方式，既可以是顺序方式，也可以是链式方式。T 1-7 循环队列也存在着空间溢出问题。T 1-8 循环队列执行出队操作时会引起大量元素的移动。F 1-9 栈是插入和删除只能在一端进行的线性表；队列是插入在一端进行，删除在另一端进行的线性表。T 1-10 在n个元素连续进栈以后，它们的出栈顺序和进栈顺序一定正好相反。T 1-11 环形队列中有多少个元素可以根据队首指针和队尾指针的值来计算。T 1-12 栈和队列的插入和删除操作特殊，所以，栈和队列是非线性结构。F 1-13 序列{1,2,3,4,5}依次入栈，则不可能得到{3,4,1,2,5}的出栈序列。 T 1-14 队列中允许插入的一端叫队头，允许删除的一端叫队尾。F 单选题（错题：2-2、2-18）2-1 若用大小为6的数组来实现循环队列，且当前front和rear的值分别为0和4。当从队列中删除两个元素，再加入两个元素后，front和rear的值分别为多少？ A.2和0 2-2如果循环队列用大小为m的数组表示，且用队头指针front和队列元素个数size代替一般循环队列中的front和rear指针来表示队列的范围，那么这样的循环队列可以容纳的元素个数最多为： B.m 2-3 以下数据结构中，（ ）是非线性数据结构。 A.树 2-4 设栈S和队列Q的初始状态均为空，元素{1, 2, 3, 4, 5, 6, 7}依次进入栈S。若每个元素出栈后立即进入队列Q，且7个元素出队的顺序是{2, 5, 6, 4, 7, 3, 1}，则栈S的容量至少是： D.4 2-5 线性表、堆栈、队列的主要区别是什么？ B.堆栈和队列都是插入、删除受到约束的线性表 2-6 栈和队列的共同点( )。 C.只允许在端点处插入和删除元素 2-7 下列关于线性表,栈和队列叙述,错误的是( )。 A.线性表是给定的n(n必须大于零)个元素组成的序列 2-8 设用一个数组A[1……N]来存储一个栈，令A[N]为栈底，用整型变量T指示当前栈顶位置，A[T]为栈顶元素。当从栈中弹出一个元素时，变量T的变化为（ ）。 A.T=T+1 2-9 链式栈与顺序栈相比，一个比较明显的优点是（ ）。 B.通常不会出现栈满的情况 2-10 (neuDS)在循环顺序队列中，假设以少用一个存储单元的方法来区分队列判满和判空的条件，front和rear分别为队首和队尾指针，它们分别指向队首元素和队尾元素的下一个存储单元，队列的最大存储容量为maxSize，则队列的长度是（ ）。 C.(rear-front+maxSize)%maxSize 2-11 (nueDS_C++)设栈S和队列Q的初始状态为空，元素e1、e2、e3、e4、e5、e6依次通过栈S，一个元素出栈后即进入队列Q，若6个元素出队的顺序是e2、e4、e3、e6、e5、e1，则栈S的容量至少应该是（ ）。提示：对于栈，可以全进再依次出；也可以进一个出一个；也可以进一部分，出一个，再进一部分；但是出栈之后，不能再入栈。 A.3 2-12 关于栈和队列的下列说法正确的是（） B.栈是后进先出的结构，出栈时除了栈顶元素，其余元素无需移动； 2-13 一个栈的入栈序列是a,b,c,d,e，则栈的出栈序列不可能的是（ ）。 C.dceab 2-14 在一个链表表示的队列中， f和r分别指向队列的头和尾。下列哪个操作能正确地将s结点插入到队列中： B.r-&gt;next=s; r=s; 2-15 栈和队列具有相同的。 B.逻辑结构 2-16 假定利用数组a[n]顺序存储一个栈，用top表示栈顶指针，用top==-1表示栈空，并已知栈未满，当元素x进栈时所执行的操作为（ ）。 C.a[++top]=x 2-17 队列的“先进先出”特性是指（ ）。 Ⅰ.最后插入队列中的元素总是最后被删除Ⅱ.当同时进行插入、删除操作时，总是插入操作优先Ⅲ.每当有删除操作时，总要先做一次插入操作Ⅳ.每次从队列中删除的总是最早插入的元素 B.Ⅰ、Ⅳ 2-18已知循环队列存储在一维数组A[0…n-1]中，且队列非空时front和rear分别指向队头元素和队尾元素。若初始时队列为空，且要求第一个进入队列的元素存储在A[0]处，则初始时front和rear的值分别是（ ）。 B.0,n-1（原因：……） 2-19 执行函数时，其局部变量一般采用（ ）进行存储。 C.栈结构 2-20 对空栈 S 进行 Push 和 Pop 操作，入栈序列为 a, b, c, d, e，经过 Push, Push, Pop, Push, Pop, Push, Push, Pop 操作后，得到的出栈序列是： D.b, c, e 2-21 用S表示入栈操作，X表示出栈操作，若元素入栈的顺序为1234，为了得到1342出栈顺序，相应的S和X的操作串为( )。 D.SXSSXSXX 填空题（错题：4-3）4-1 栈的运算遵循 后进先出|先进后出 的原则。 4-2 以下运算实现在链队上的入队列，请在空白处用适当句子予以填充。 12345678void EnQueue(QueptrTp *lq,DataType x)&#123; LqueueTp *p; p=(LqueueTp *)malloc(sizeof(LqueueTp)); p-&gt;data=x;(1&#x27;) p-&gt;next=NULL; (lq-&gt;rear)-&gt;next=p;(1&#x27;) lq-&gt;rear=p;(1&#x27;) &#125; 4-3 以下运算实现在链栈上的初始化，请在空白处用请适当句子予以填充。 12345typedef struct Node&#123; DataType data; struct Node *next;&#125;StackNode,*LStackTp;void InitStack(LStackTp &amp;ls)&#123; ls=NULL;&#125;。(1&#x27;) 函数题6-3 jmu-ds-舞伴问题 (20 分) 12345678910111213141516171819202122232425262728293031323334353637383940int QueueLen(SqQueue Q)&#123; return (Q-&gt;rear-Q-&gt;front+MAXQSIZE)%MAXQSIZE;&#125;int EnQueue(SqQueue &amp;Q, Person e)&#123; Q-&gt;rear = (Q-&gt;rear+1)%MAXQSIZE; Q-&gt;data[Q-&gt;rear] = e; return 0;&#125;int QueueEmpty(SqQueue &amp;Q)&#123; if(Q-&gt;rear==Q-&gt;front)return 1; else return 0;&#125;int DeQueue(SqQueue &amp;Q, Person &amp;e)&#123; Q-&gt;front = (Q-&gt;front+1)%MAXQSIZE; e = Q-&gt;data[Q-&gt;front]; return 0;&#125;void DancePartner(Person dancer[], int num)&#123; for(int i=0;i&lt;num;i++) &#123; if(dancer[i].sex==&#x27;M&#x27;) EnQueue(Mdancers,dancer[i]); else EnQueue(Fdancers,dancer[i]); &#125; while(!QueueEmpty(Mdancers)&amp;&amp;!QueueEmpty(Fdancers)) &#123; Person x,y; DeQueue(Mdancers,x); DeQueue(Fdancers,y); cout&lt;&lt;y.name&lt;&lt;&quot; &quot;&lt;&lt;x.name&lt;&lt;endl; &#125;&#125; 6-4 十进制转二进制（顺序栈设计和应用） (10 分) 12345678910111213141516171819202122232425bool isEmpty()&#123; if(top==-1)return 1; else return 0;&#125;/* 元素x入栈 */void Push(int x)&#123; //if(x==MaxSize)cout&lt;&lt;&quot;上溢&quot;&lt;&lt;endl; //else mystack[++top]=x;&#125;/* 取栈顶元素 */int getTop()&#123; return mystack[top];&#125;/* 删除栈顶元素 */void Pop()&#123; top--;&#125; 编程题7-1 银行业务队列简单模拟 (25 分)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;using namespace std;int arr[1000];int main()&#123; int n; int flag1=0,flag2=0; int top1=0,top2=0,top=0; cin&gt;&gt;n; int a1[n+1],a2[n+1],a[n+1]; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;arr[i]; if(arr[i]%2!=0)a1[top1++]=arr[i]; else a2[top2++]=arr[i]; &#125; int t1=0,t2=0; for(int i=0;i&lt;n;i++) &#123; if(arr[i]%2==0)flag2++; else flag1++; if(flag2%2==0&amp;&amp;flag1%4==0) &#123; a[top++]=a1[t1++]; a[top++]=a1[t1++]; a[top++]=a2[t2++]; &#125;else&#123; if(t1!=top1&amp;&amp;(flag1%2==0||t2==top2)) &#123; a[top++]=a1[t1++]; a[top++]=a1[t1++]; &#125; if(t2!=top2&amp;&amp;(flag2%2==0||t1==top1||flag1%2==0)) &#123; a[top++]=a2[t2++]; &#125; &#125; if(top==n)break; &#125; for(int i=0;i&lt;n-1;i++) cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;; cout&lt;&lt;a[n-1]&lt;&lt;endl; return 0;&#125; 7-2 堆栈操作合法性 (20 分) 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; int N,M; string str; int n,x=0; cin&gt;&gt;N&gt;&gt;M; for(int i=0; i&lt;N; i++) &#123; cin&gt;&gt;str; n = str.size(); for(int j=0; j&lt;n; j++) &#123; if(str[j]==&#x27;S&#x27;) &#123; x++; if(x&gt;M)break; &#125; else if(str[j]==&#x27;X&#x27;) &#123; x--; if(x&lt;0)break; &#125; &#125; if(x==0)cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl; else cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl; x=0; &#125; return 0;&#125; 第四章 串和数组判断题1-1 假设模式串是abababaab，则KMP模式匹配算法中的next[j] = 0 1 1 2 3 4 5 6 2。T 选择题(错题：2-3,2-6,2-9,2-13)2-1 KMP算法下，长为n的字符串匹配长度为m的字串的时间复杂度为 B.O（M+N） 2-2 串的长度是指 B.串中所含字符的个数 2-3设主串 T = abaabaabcabaabc，模式串 S = abaabc，采用 KMP 算法进行模式匹配，到匹配成功时为止，在匹配过程中进行的单个字符间的比较次数是： B.10（6+4） 2-4 串“ababaaababaa”的next数组为（ ）。 C.011234223456 2-5 已知字符串S为“abaabaabacacaabaabcc”，模式串t为“abaabc”。采用KMP算法进行匹配，第一次出现“失配”(s[i]≠t[j])时，i=j=5，则下次开始匹配时，i和j的值分别是()。 C.i=5,j=2 2-62 符号串abcde的子串共有： C.16（1+2+3+4+5+1(空串)） [^长度为n的字符串]: 1、有n(n+1)/2 +1个子串；2、非空子串：n（n+1）/2；3、非空真子串：n（n+1）/2– 1 2-7 适用于压缩存储稀疏矩阵的两种存储结构是： A.三元组表和十字链表 2-8 (neuDS)以下( )是稀疏矩阵的一种存储方法。 A.十字链表 2-9一个稀疏矩阵采用压缩后，和直接采用二维数组存储相比会失去（ ） 特性。 B.随机存取 2-10 对特殊矩阵采用压缩存储的主要目的是（ ）。 D.减少不必要的存储空间 2-11 对n阶对称矩阵压缩存储时，需要表长为（ ）的顺序表。 C.n(n+1)/2 2-12 顺序查找法适合于存储结构为（ ）的线性表。 B.顺序存储或链式存储 2-13（SWPU-DS）设有一个 10 阶的对称矩阵 A，采用压缩存储方式，以行序为主存储，a[1, 1] 为第一元素，其存储地址为 1，每个元素占一个地址空间，则 a[8, 5] 的地址为（ ）。 *C.33（对称矩阵：(7+1)7/2+5)） 第五章 树和二叉树选择题2-1 设一棵非空完全二叉树 T 的所有叶节点均位于同一层，且每个非叶结点都有 2 个子结点。若 T 有 k 个叶结点，则 T 的结点总数是： A.2k−1 2-2 已知字符集{ a, b, c, d, e, f }，若各字符出现的次数分别为{ 6, 3, 8, 2, 10, 4 }，则对应字符集中各字符的哈夫曼编码可能是： A.00, 1011, 01, 1010, 11, 100 2-3 已知二叉树的先序遍历序列为ABCDEFGH，中序遍历序列为CBEDFAGH，则该二叉树形态中，父节点的右子节点为（）。 C.G 2-4 若将一棵树 T 转化为对应的二叉树 BT，则下列对 BT 的遍历中，其遍历序列与 T 的后根遍历序列相同的是： B.中序遍历 2-5 对 n 个互不相同的符号进行哈夫曼编码。若生成的哈夫曼树共有 115 个结点，则 n 的值是： C.58 2-6 设 T 是非空二叉树，若 T 的先序遍历和中序遍历序列相同，则 T 的形态是 __ D.所有结点只有右孩子 2-7 以二叉链表作为二叉树的存储结构，在具有 n 个结点的二叉链表中（n&gt;0），空链域的个数为 __ A.n+1 2-8 已知二叉树的前序遍历序列为 ABDCEFG，中序遍历序列为 DBCAFEG，则后序遍历序列为 __ B.DCBFGEA 2-9 对于任意一棵高度为 5 且有 10 个结点的二叉树，若采用顺序存储结构保存，每个结点占 1 个存储单元（仅存放结点的数据信息），则存放该二叉树需要的存储单元的数量至少是： A.31 2-10 已知森林 F 及与之对应的二叉树 T，若 F 的先根遍历序列是 a, b, c, d, e, f，后根遍历序列是 b, a, d, f, e, c，则 T 的后序遍历序列是： C.b, f, e, d, c, a 填空题4-1 已知一棵完全二叉树的第5层（设根为第1层）有8个叶结点，则该完全二叉树的结点个数最多是：47 4-2 一棵二叉树的前序遍历序列是ABDFECGHK，中序遍历序列是DBEFAGHCK，则它的后序遍历序列是 DEFBHGKCA 4-3 具有n个结点的二叉树中,一共有 2n 个指针域,其中只有 n-1 个用来指向结点的左右孩子，其余的 n+1 个指针域为NULL。 4-4 若以{4，5，6，7，8}作为叶子结点的权值构造哈夫曼树，则其带权路径长度是 69 程序填空题5-2 下列代码的功能是将二叉树T中的结点按照层序遍历的顺序输出。 123456789101112131415161718192021222324typedef struct TreeNode *Tree;struct TreeNode&#123; int Key; Tree Left; Tree Right;&#125;;void Level_order ( Tree T )&#123; Queue Q; if ( !T ) return; Q = CreateQueue( MaxElements ); Enqueue( T, Q ); while ( !IsEmpty( Q ) )&#123; T = Front_Dequeue ( Q ); /* return the front element and delete it from Q */ printf(&quot;%d &quot;, T-&gt;Key); if ( T-&gt;Left ) Enqueue( T-&gt;Left)3分; if (T-&gt;Right 3分 ) Enqueue( T-&gt;Right)3分; &#125;&#125; 5-3 下列代码的功能是计算给定二叉树T的宽度。二叉树的宽度是指各层结点数的最大值。函数Queue_rear和Queue_front分别返回当前队列Q中队尾和队首元素的位置。 12345678910111213141516171819202122232425262728293031323334typedef struct TreeNode *BinTree;struct TreeNode&#123; int Key; BinTree Left; BinTree Right;&#125;;int Width( BinTree T )&#123; BinTree p; Queue Q; int Last, temp_width, max_width; temp_width = max_width = 0; Q = CreateQueue(MaxElements); Last = Queue_rear(Q); if ( T == NULL) return 0; else &#123; Enqueue(T, Q); while (!IsEmpty(Q)) &#123; p = Front_Dequeue(Q); temp_width++3分; if ( p-&gt;Left != NULL ) Enqueue(p-&gt;Left, Q); if ( p-&gt;Right != NULL ) Enqueue (p-&gt;Right)3分; if ( Queue_front(Q) &gt; Last ) &#123; Last = Queue_rear(Q); if ( temp_width &gt; max_width ) max_width = temp_width; temp_width=0 3分; &#125; /* end-if */ &#125; /* end-while */ return max_width; &#125; /* end-else */&#125; 函数题6-1 求二叉树高度 (20 分) 1234567891011int GetHeight( BinTree BT )&#123; int LH,RH; if(!BT)return 0; else &#123; LH = GetHeight(BT-&gt;Left); RH = GetHeight(BT-&gt;Right); return LH&gt;RH?++LH:++RH; &#125;&#125; 6-2 二叉树的遍历 (25 分) 123456789101112131415161718192021222324252627282930313233343536void InorderTraversal( BinTree BT )&#123; if(!BT)return; InorderTraversal(BT-&gt;Left); printf(&quot; %c&quot;,BT-&gt;Data); InorderTraversal(BT-&gt;Right);&#125;void PreorderTraversal( BinTree BT )&#123; if(!BT)return; printf(&quot; %c&quot;,BT-&gt;Data); PreorderTraversal(BT-&gt;Left); PreorderTraversal(BT-&gt;Right);&#125;void PostorderTraversal( BinTree BT )&#123; if(!BT)return; PostorderTraversal(BT-&gt;Left); PostorderTraversal(BT-&gt;Right); printf(&quot; %c&quot;,BT-&gt;Data);&#125;void LevelorderTraversal( BinTree BT )&#123; if(!BT)return; BinTree que[101],t; int first=0,rear=0; que[rear++]=BT; while(first!=rear) &#123; t=que[first++]; printf(&quot; %c&quot;,t-&gt;Data); if(t-&gt;Left)que[rear++]=t-&gt;Left; if(t-&gt;Right)que[rear++]=t-&gt;Right; &#125;&#125; 6-3 先序输出叶结点 (15 分) 123456789void PreorderPrintLeaves( BinTree BT )&#123; if(BT) &#123; if(!BT-&gt;Left&amp;&amp;!BT-&gt;Right) printf(&quot; %c&quot;,BT-&gt;Data); PreorderPrintLeaves(BT-&gt;Left); PreorderPrintLeaves(BT-&gt;Right); &#125;&#125; 6-4 二叉树的非递归遍历 (25 分)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758void InorderTraversal( BinTree BT )&#123; BinTree T=BT; Stack S = CreateStack(); while(T||!IsEmpty(S)) &#123; while(T!=NULL) &#123; Push(S,T); T = T-&gt;Left; &#125; T = Pop(S); printf(&quot; %c&quot;,T-&gt;Data); T=T-&gt;Right; &#125;&#125;void PreorderTraversal( BinTree BT )&#123; BinTree T=BT; Stack S = CreateStack(); while(T||!IsEmpty(S)) &#123; while(T!=NULL) &#123; Push(S,T); printf(&quot; %c&quot;,T-&gt;Data); T = T-&gt;Left; &#125; T = Pop(S); T = T-&gt;Right; &#125;&#125;void PostorderTraversal( BinTree BT )&#123; BinTree T=BT; Stack S = CreateStack(); while(T||!IsEmpty(S)) &#123; while(T!=NULL) &#123; Push(S,T); T-&gt;flag=0; T = T-&gt;Left; &#125; T = Peek(S); if(T-&gt;flag==0) &#123; T-&gt;flag++; T=T-&gt;Right; &#125; else&#123; T = Pop(S); printf(&quot; %c&quot;,T-&gt;Data); T = NULL; &#125; &#125;&#125; 编程题7-1 根据后序和中序遍历输出先序遍历 (25 分)1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;iostream&gt;using namespace std;struct Node&#123; int data; Node *left,*right;&#125;;Node* Creat(int *Post,int *In,int n)&#123; if(n&lt;=0)return NULL; int len=0; Node *p=new Node; p-&gt;data = *(Post+n-1); while(*(In+len)!=p-&gt;data)len++; p-&gt;left=Creat(Post,In,len); p-&gt;right=Creat(Post+len,In+len+1,n-len-1);//右子树……emmm……记住吧…… return p;&#125;void Preorder(Node *t)&#123; if(!t)return; cout&lt;&lt;&quot; &quot;&lt;&lt;t-&gt;data; Preorder(t-&gt;left); Preorder(t-&gt;right);&#125;int main()&#123; int n; cin&gt;&gt;n; int a[n],b[n]; Node *t; for(int i=0; i&lt;n; i++) cin&gt;&gt;a[i]; for(int i=0; i&lt;n; i++) cin&gt;&gt;b[i]; t=Creat(a,b,n); cout&lt;&lt;&quot;Preorder:&quot;; Preorder(t); return 0;&#125; 7-2 玩转二叉树 (25 分)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;using namespace std;struct Node&#123; int data; Node *left,*right;&#125;;Node* creat(int *In,int *Pre,int n)&#123; if(n&lt;=0)return NULL; int len=0; while(*(In+len)!=*Pre)len++; Node *p=new Node; p-&gt;data=*(In+len); p-&gt;left=creat(In,Pre+1,len); p-&gt;right=creat(In+len+1,Pre+len+1,n-len-1);//n-len-1我也不清楚…… return p;&#125;void Level(Node *t,int n)&#123; if(!t)return; int first=0,last=0,i; Node* Q[n],*w; Q[last++]=t; while(last!=first) &#123; w=Q[first++]; //镜面也可以看做先右子树再左子树 if(w-&gt;right)Q[last++]=w-&gt;right; if(w-&gt;left)Q[last++]=w-&gt;left; &#125; for(i=0;i&lt;n-1;i++) cout&lt;&lt;Q[i]-&gt;data&lt;&lt;&quot; &quot;; cout&lt;&lt;Q[i]-&gt;data&lt;&lt;endl;&#125;int main()&#123; int n; cin&gt;&gt;n; int In[n],Pre[n]; for(int i=0;i&lt;n;i++) cin&gt;&gt;In[i]; for(int i=0;i&lt;n;i++) cin&gt;&gt;Pre[i]; Node* t=creat(In,Pre,n); Level(t,n); return 0;&#125; 7-3 树的遍历 (25 分) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;using namespace std;struct Node&#123; int data; Node *left,*right;&#125;;Node* creat(int* In,int* Post,int n)&#123; if(n&lt;=0)return NULL; int len=0; while(*(In+len)!= *(Post+n-1))len++; Node *p=new Node; p-&gt;data=In[len]; p-&gt;left=creat(In,Post,len); p-&gt;right=creat(In+len+1,Post+len,n-len-1); return p;&#125;void Level(Node* t,int n)&#123; int last=0,first=0,i; Node* Q[n],*w; Q[last++]=t; while(last!=first) &#123; w=Q[first++]; if(w-&gt;left)Q[last++]=w-&gt;left; if(w-&gt;right)Q[last++]=w-&gt;right; &#125; for(i=0;i&lt;n-1;i++) cout&lt;&lt;Q[i]-&gt;data&lt;&lt;&quot; &quot;; cout&lt;&lt;Q[i]-&gt;data&lt;&lt;endl;&#125;int main()&#123; int n; cin&gt;&gt;n; int In[n],Post[n]; for(int i=0;i&lt;n;i++) cin&gt;&gt;Post[i]; for(int i=0;i&lt;n;i++) cin&gt;&gt;In[i]; Node* t=creat(In,Post,n); Level(t,n); return 0;&#125; 7-4 哈夫曼编码 (30 分) 1 7-5 二叉搜索树的最近公共祖先 (30 分) 1","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"PTA","slug":"PTA","permalink":"https://zhang0224gz.github.io/tags/PTA/"}]},{"title":"静态博客的创建","slug":"静态博客的建立","date":"2021-12-04T11:35:25.302Z","updated":"2021-12-11T07:50:01.476Z","comments":true,"path":"2021/12/04/静态博客的建立/","link":"","permalink":"https://zhang0224gz.github.io/2021/12/04/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BB%BA%E7%AB%8B/","excerpt":"","text":"下载node​ D:\\my app\\nodejs github注册​ -&gt;Zhang2002GZ.github.io（用户名.github.io） 下载git​ git for windows-&gt;cmd+r: git（D:\\my app\\Git） SHH配置 (1)git_bash打开:$ ssh-keygen -t rsa -C “&#x32;&#x32;&#x35;&#x31;&#x37;&#x38;&#55;&#57;&#x32;&#51;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#109;“-&gt;回车(4次)直至结束 记住这行Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa) 括号里面的地址是后面要用到的 (2)打开github-&gt;setting-&gt;SHH:title:Zhang2002GZ ;key:粘贴文本文档 user-&gt;zhangguozhi-&gt;.ssh-&gt;.pub 在github上建秘钥 hexo使用​ -&gt;文档 npm install hexo-cli -g //安装 hexo init blog //初始化博客 cd blog npm install //hexo server 新建目录blog-&gt;cmd+r-&gt;D:-&gt;cd blog-&gt;npm install hexo-cli -g-&gt;hexo init myblog-&gt;cd myblog-&gt;npm install -&gt;hexo s -p 4000 浏览器输入网址：localhost:4000 sublime安装​ -&gt;将博客目录直接拖进-&gt;## hello hexo hexo发布至github hexo-&gt;文档-&gt;部署repo sublime-&gt;_config.yml 1234567891011开头： \\# URL \\## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27; **url**: https://Zhang2002GZ.github.io末尾 \\# Deployment \\## Docs: https://hexo.io/docs/one-command-deployment deploy: **type: git repo: https://github.com/Zhang2002GZ/Zhang2002GZ.github.io.git branch: master** hexo-&gt;文档-&gt;部署 hexo g-&gt;npm install hexo-deployer-git –save-&gt;hexo d 123type: git repository: https://github.com/zhang2002gz/zhang2002gz.github.io.git branch: main hexo init( Start blogging with Hexo!)-&gt;静态生成本地的hexo页面hexo s(打开本地服务器：将http://localhost:4000可以看见博客；ctrl+c关闭服务器就看不见页面） -&gt;npm install hexo-deployer-git –save-&gt;生成页面hexo g-&gt;将本地文件上传github hexo d （error10054:这个保错就执行git config –global http.sslVerify “false”） **!**登入页面弹窗只在第一次创建的时候出现 美化 git clone https://github.com/theme-nexmoe/hexo-theme-nexmoe.git themes/nexmoe (git clone 改页面代码所在地址.git 存到themes目录下/新建的nexmoe) sublime修改_config.yml:theme: nexmoe 也可以在release里下载压缩包将它解压到themes中 npm install –save hexo-renderer-pug git clone https://github.com/liuyib/hexo-theme-stun.git themes/stun theme: sbun 清理一下hexo clean ,生成一下 hexo g,hexo s(打开服务器），hexo d(上传） 其他检查： 123456789101112node -v git --version npm -v hexo -vssh $ ssh -T git@github.com （Hi zhang2002gz! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.）查看npm安装hexo插件的情况 npm ls --depth 0安装缺失的插件 npm install acorn --save 万能三件套： 12345git config --global --unset http.proxygit config --global --unset https.proxygit config --global http.sslVerify &quot;false&quot; 一些pure主题的配置hexo-theme-pure/README.cn.md at master · cofess/hexo-theme-pure (github.com) 1234567891011121314151617181920212223242526272829文章索引目录title: 文章标题categories: - 文章分类tags: - 文章标签toc: true # 是否启用内容索引sidebar侧边栏文章侧边栏默认为开启状态，如果某篇文章不想开启侧边栏，在文章开头配置加入“sidebar: none”即可：title: 文章标题categories: - 文章分类tags: - 文章标签sidebar: none # 是否启用sidebar侧边栏，none：不启用友情链接Name: link: http://example.com avatar: http://example.com/avatar.png desc: &quot;这是一个描述&quot; 安装主题git clone https://github.com/cofess/hexo-theme-pure.git themes/pure更新主题cd themes/puregit pull 相关视频【2021最新版】保姆级Hexo+github搭建个人博客_哔哩哔哩_bilibili Hexo博客开发之——WARN No layout index.html - 程序员大本营 (pianshen.com) 12345678910111213141516Git 全局设置: git config --global user.name &quot;zhang-guozhi&quot; git config --global user.email &quot;10094335+zhang-guozhi@user.noreply.gitee.com&quot; 创建 git 仓库: mkdir zhang-guozhi cd zhang-guozhi git init touch README.md git add README.md git commit -m &quot;first commit&quot; git remote add origin https://gitee.com/zhang-guozhi/zhang-guozhi.git git push -u origin master 已有仓库? cd existing_git_repo git remote add origin https://gitee.com/zhang-guozhi/zhang-guozhi.git git push -u origin master","categories":[{"name":"初始化","slug":"初始化","permalink":"https://zhang0224gz.github.io/categories/%E5%88%9D%E5%A7%8B%E5%8C%96/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-11-27T13:15:34.628Z","updated":"2021-11-27T13:15:34.628Z","comments":true,"path":"2021/11/27/hello-world/","link":"","permalink":"https://zhang0224gz.github.io/2021/11/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://zhang0224gz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"初始化","slug":"初始化","permalink":"https://zhang0224gz.github.io/categories/%E5%88%9D%E5%A7%8B%E5%8C%96/"}],"tags":[{"name":"PTA","slug":"PTA","permalink":"https://zhang0224gz.github.io/tags/PTA/"}]}